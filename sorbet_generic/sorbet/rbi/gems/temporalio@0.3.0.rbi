# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `temporalio` gem.
# Please instead update this file by running `bin/tapioca gem temporalio`.

# Temporal Ruby SDK. See the README at https://github.com/temporalio/sdk-ruby.
#
# source://temporalio//lib/temporalio/version.rb#3
module Temporalio
  class << self
    # source://temporalio//lib/temporalio.rb#8
    def _root_file_path; end
  end
end

# All activity related classes.
#
# source://temporalio//lib/temporalio/activity/complete_async_error.rb#6
module Temporalio::Activity; end

# Error raised inside an activity to mark that the activity will be completed asynchronously.
#
# source://temporalio//lib/temporalio/activity/complete_async_error.rb#8
class Temporalio::Activity::CompleteAsyncError < Temporalio::Error; end

# Context accessible only within an activity. Use {current} to get the current context. Contexts are fiber or thread
# local so may not be available in a newly started thread from an activity and may have to be propagated manually.
#
# source://temporalio//lib/temporalio/activity/context.rb#9
class Temporalio::Activity::Context
  # source://temporalio//lib/temporalio/activity/context.rb#86
  def _scoped_logger_info; end

  # @raise [NotImplementedError]
  # @return [Cancellation] Cancellation that is canceled when the activity is canceled.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#63
  def cancellation; end

  # Record a heartbeat on the activity.
  #
  # Heartbeats should be used for all non-immediately-returning, non-local activities and they are required to
  # receive cancellation. Heartbeat calls are throttled internally based on the heartbeat timeout of the activity.
  # Users do not have to be concerned with burdening the server by calling this too frequently.
  #
  # @param details [Array<Object>] Details to record with the heartbeat.
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/activity/context.rb#58
  def heartbeat(*details); end

  # @raise [NotImplementedError]
  # @return [Info] Activity info for this activity.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#47
  def info; end

  # @raise [NotImplementedError]
  # @return [ScopedLogger] Logger for this activity. Note, this is a shared logger not created each activity
  #   invocation. It just has logic to extract current activity details and so is only able to do so on log calls
  #   made with a current context available.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#81
  def logger; end

  # @raise [NotImplementedError]
  # @return [Metric::Meter] Metric meter to create metrics on, with some activity-specific attributes already set.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#105
  def metric_meter; end

  # @raise [NotImplementedError]
  # @return [Converters::PayloadConverter] Payload converter associated with this activity.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#74
  def payload_converter; end

  # @raise [NotImplementedError]
  # @return [Cancellation] Cancellation that is canceled when the worker is shutting down. On worker shutdown, this
  #   is canceled, then the `graceful_shutdown_period` is waited (default 0s), then the activity is canceled.
  #
  # source://temporalio//lib/temporalio/activity/context.rb#69
  def worker_shutdown_cancellation; end

  class << self
    # source://temporalio//lib/temporalio/activity/context.rb#29
    def _current_executor; end

    # source://temporalio//lib/temporalio/activity/context.rb#38
    def _current_executor=(executor); end

    # @raise [Error]
    # @return [Context] The current context, or raises an error if not in activity fiber/thread.
    #
    # source://temporalio//lib/temporalio/activity/context.rb#11
    def current; end

    # @return [Context, nil] The current context or nil if not in activity fiber/thread.
    #
    # source://temporalio//lib/temporalio/activity/context.rb#19
    def current_or_nil; end

    # @return [Boolean] Whether there is a current context available.
    #
    # source://temporalio//lib/temporalio/activity/context.rb#24
    def exist?; end
  end
end

# Base class for all activities.
#
# Activities can be given to a worker as instances of this class, which will call execute on the same instance for
# each execution, or given to the worker as the class itself which instantiates the activity for each execution.
#
# All activities must implement {execute}. Inside execute, {Activity::Context.current} can be used to access the
# current context to get information, issue heartbeats, etc.
#
# By default, the activity is named as its unqualified class name. This can be customized with {activity_name}.
#
# By default, the activity uses the `:default` executor which is usually the thread-pool based executor. This can be
# customized with {activity_executor}.
#
# By default, upon cancellation {::Thread.raise} or {::Fiber.raise} is called with a {Error::CanceledError}. This
# can be disabled by passing `false` to {activity_cancel_raise}.
#
# See documentation for more detail on activities.
#
# source://temporalio//lib/temporalio/activity/definition.rb#22
class Temporalio::Activity::Definition
  # Implementation of the activity. The arguments should be positional and this should return the value on success
  # or raise an error on failure.
  #
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#98
  #
  # NOTE: Manually removed due to arity issues, see README
  # def execute(*args); end

  class << self
    # source://temporalio//lib/temporalio/activity/definition.rb#82
    def _activity_definition_details; end

    protected

    # Override whether the activity uses Thread/Fiber raise for cancellation which is defaulted to true.
    #
    # @param cancel_raise [Boolean] Whether to raise.
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#50
    def activity_cancel_raise(cancel_raise); end

    # Set an activity as dynamic. Dynamic activities do not have names and handle any activity that is not otherwise
    # registered. A worker can only have one dynamic activity. It is often useful to use {activity_raw_args} with
    # this.
    #
    # @param value [Boolean] Whether the activity is dynamic.
    # @raise [ArgumentError]
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#63
    def activity_dynamic(value = T.unsafe(nil)); end

    # Override the activity executor which is defaulted to `:default`.
    #
    # @param executor_name [Symbol] Executor to use.
    # @raise [ArgumentError]
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#41
    def activity_executor(executor_name); end

    # Override the activity name which is defaulted to the unqualified class name.
    #
    # @param name [String, Symbol] Name to use.
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#29
    def activity_name(name); end

    # Have activity arguments delivered to `execute` as {Converters::RawValue}s. These are wrappers for the raw
    # payloads that have not been converted to types (but they have been decoded by the codec if present). They can
    # be converted with {Context#payload_converter}.
    #
    # @param value [Boolean] Whether the activity accepts raw arguments.
    # @raise [ArgumentError]
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#74
    def activity_raw_args(value = T.unsafe(nil)); end
  end
end

# Definition info of an activity. Activities are usually classes/instances that extend {Definition}, but
# definitions can also be manually created with a block via {initialize} here.
#
# source://temporalio//lib/temporalio/activity/definition.rb#104
class Temporalio::Activity::Definition::Info
  # Manually create activity definition info. Most users will use an instance/class of {Definition}.
  #
  # @param name [String, Symbol, nil] Name of the activity or nil for dynamic activity.
  # @param executor [Symbol] Name of the executor.
  # @param cancel_raise [Boolean] Whether to raise in thread/fiber on cancellation.
  # @param raw_args [Boolean] Whether to use {Converters::RawValue}s as arguments.
  # @raise [ArgumentError]
  # @return [Info] a new instance of Info
  # @yield Use this block as the activity.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#163
  def initialize(name:, executor: T.unsafe(nil), cancel_raise: T.unsafe(nil), raw_args: T.unsafe(nil), &block); end

  # @return [Boolean] Whether to raise in thread/fiber on cancellation. Default is `true`.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#115
  def cancel_raise; end

  # @return [Symbol] Name of the executor. Default is `:default`.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#112
  def executor; end

  # @return [String, Symbol, nil] Name of the activity, or nil if the activity is dynamic.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#106
  def name; end

  # @return [Proc] Proc for the activity.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#109
  def proc; end

  # @return [Boolean] Whether to use {Converters::RawValue}s as arguments.
  #
  # source://temporalio//lib/temporalio/activity/definition.rb#118
  def raw_args; end

  class << self
    # Obtain definition info representing the given activity, which can be a class, instance, or definition info.
    #
    # @param activity [Definition, Class<Definition>, Info] Activity to get info for.
    # @return Info Obtained definition info.
    #
    # source://temporalio//lib/temporalio/activity/definition.rb#124
    def from_activity(activity); end
  end
end

# Information about an activity.
#
# source://temporalio//lib/temporalio/activity/info.rb#62
class Temporalio::Activity::Info < Data
  # @return [String] ID for the activity.
  def activity_id; end

  # @return [String] Type name for the activity.
  def activity_type; end

  # @return [Integer] Attempt the activity is on.
  def attempt; end

  # @return [Time] When the current attempt was scheduled.
  def current_attempt_scheduled_time; end

  # @return [Array<Object>] Details from the last heartbeat of the last attempt.
  def heartbeat_details; end

  # @return [Float, nil] Heartbeat timeout set by the caller.
  def heartbeat_timeout; end

  # @return [Boolean] Whether the activity is a local activity or not.
  def local?; end

  # @return [Float, nil] Schedule to close timeout set by the caller.
  def schedule_to_close_timeout; end

  # @return [Time] When the activity was scheduled.
  def scheduled_time; end

  # @return [Float, nil] Start to close timeout set by the caller.
  def start_to_close_timeout; end

  # @return [Time] When the activity started.
  def started_time; end

  # @return [String] Task queue this activity is on.
  def task_queue; end

  # @return [String] Task token uniquely identifying this activity. Note, this is a `ASCII-8BIT` encoded string, not
  #   a `UTF-8` encoded string nor a valid UTF-8 string.
  def task_token; end

  # @return [String] Workflow ID that started this activity.
  def workflow_id; end

  # @return [String] Namespace this activity is on.
  def workflow_namespace; end

  # @return [String] Workflow run ID that started this activity.
  def workflow_run_id; end

  # @return [String] Workflow type name that started this activity.
  def workflow_type; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Raw protocol buffer models.
#
# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#18
module Temporalio::Api; end

# source://temporalio//lib/temporalio/api/activity/v1/message.rb#19
module Temporalio::Api::Activity; end

# source://temporalio//lib/temporalio/api/activity/v1/message.rb#20
module Temporalio::Api::Activity::V1; end

class Temporalio::Api::Activity::V1::ActivityOptions < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/batch/v1/message.rb#20
module Temporalio::Api::Batch; end

# source://temporalio//lib/temporalio/api/batch/v1/message.rb#21
module Temporalio::Api::Batch::V1; end

class Temporalio::Api::Batch::V1::BatchOperationCancellation < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Batch::V1::BatchOperationDeletion < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Batch::V1::BatchOperationInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Batch::V1::BatchOperationReset < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Batch::V1::BatchOperationSignal < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Batch::V1::BatchOperationTermination < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#19
module Temporalio::Api::Cloud; end

# source://temporalio//lib/temporalio/api/cloud/account/v1/message.rb#18
module Temporalio::Api::Cloud::Account; end

# source://temporalio//lib/temporalio/api/cloud/account/v1/message.rb#19
module Temporalio::Api::Cloud::Account::V1; end

class Temporalio::Api::Cloud::Account::V1::Account < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Account::V1::AccountSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Account::V1::Metrics < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Account::V1::MetricsSpec < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/cloudservice/v1/request_response.rb#25
module Temporalio::Api::Cloud::CloudService; end

# source://temporalio//lib/temporalio/api/cloud/cloudservice/v1/request_response.rb#26
module Temporalio::Api::Cloud::CloudService::V1; end

class Temporalio::Api::Cloud::CloudService::V1::AddNamespaceRegionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::AddNamespaceRegionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateApiKeyRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateApiKeyResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceExportSinkRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceExportSinkResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateServiceAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateServiceAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateUserGroupRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateUserGroupResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateUserRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::CreateUserResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteApiKeyRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteApiKeyResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceExportSinkRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceExportSinkResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteServiceAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteServiceAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteUserGroupRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteUserGroupResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteUserRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::DeleteUserResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::FailoverNamespaceRegionRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::FailoverNamespaceRegionResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::GetAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetApiKeyRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetApiKeyResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetApiKeysRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetApiKeysResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetAsyncOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetAsyncOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinkRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinkResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinksRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinksResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNamespacesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNamespacesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetRegionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetRegionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetRegionsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetRegionsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUsageRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUsageResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUserGroupRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUserGroupResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUserGroupsRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::GetUserGroupsRequest::GoogleGroupFilter < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::GetUserGroupsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUserRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUserResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUsersRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::GetUsersResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::RenameCustomSearchAttributeRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::RenameCustomSearchAttributeResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::SetUserGroupNamespaceAccessRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::SetUserGroupNamespaceAccessResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::SetUserNamespaceAccessRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::SetUserNamespaceAccessResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::UpdateAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateApiKeyRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateApiKeyResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceExportSinkRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceExportSinkResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateServiceAccountRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateServiceAccountResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateUserGroupRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateUserGroupResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateUserRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::CloudService::V1::UpdateUserResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Cloud::CloudService::V1::ValidateNamespaceExportSinkRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Cloud::CloudService::V1::ValidateNamespaceExportSinkResponse < Google::Protobuf::AbstractMessage
end

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#19
module Temporalio::Api::Cloud::Identity; end

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#20
module Temporalio::Api::Cloud::Identity::V1; end

class Temporalio::Api::Cloud::Identity::V1::Access < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::AccountAccess < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_ADMIN = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_DEVELOPER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_FINANCE_ADMIN = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_OWNER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_READ = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#22
Temporalio::Api::Cloud::Identity::V1::AccountAccess::Role::ROLE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Identity::V1::ApiKey < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::ApiKeySpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::GoogleGroupSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::Invitation < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::NamespaceAccess < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Identity::V1::NamespaceAccess::Permission
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#24
Temporalio::Api::Cloud::Identity::V1::NamespaceAccess::Permission::PERMISSION_ADMIN = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#24
Temporalio::Api::Cloud::Identity::V1::NamespaceAccess::Permission::PERMISSION_READ = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#24
Temporalio::Api::Cloud::Identity::V1::NamespaceAccess::Permission::PERMISSION_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#24
Temporalio::Api::Cloud::Identity::V1::NamespaceAccess::Permission::PERMISSION_WRITE = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Cloud::Identity::V1::OwnerType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#36
Temporalio::Api::Cloud::Identity::V1::OwnerType::OWNER_TYPE_SERVICE_ACCOUNT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#36
Temporalio::Api::Cloud::Identity::V1::OwnerType::OWNER_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/identity/v1/message.rb#36
Temporalio::Api::Cloud::Identity::V1::OwnerType::OWNER_TYPE_USER = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Identity::V1::ServiceAccount < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::User < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::UserGroup < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::UserGroupSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Identity::V1::UserSpec < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#20
module Temporalio::Api::Cloud::Namespace; end

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#21
module Temporalio::Api::Cloud::Namespace::V1; end

class Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::Endpoints < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::ExportSink < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Namespace::V1::ExportSink::Health
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#37
Temporalio::Api::Cloud::Namespace::V1::ExportSink::Health::HEALTH_ERROR_INTERNAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#37
Temporalio::Api::Cloud::Namespace::V1::ExportSink::Health::HEALTH_ERROR_USER_CONFIGURATION = T.let(T.unsafe(nil),
                                                                                                   Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#37
Temporalio::Api::Cloud::Namespace::V1::ExportSink::Health::HEALTH_OK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#37
Temporalio::Api::Cloud::Namespace::V1::ExportSink::Health::HEALTH_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Namespace::V1::ExportSinkSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::Limits < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::Namespace < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_ADDING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_PASSIVE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_REMOVING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#34
Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus::State::STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_BOOL = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_DATETIME = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_DOUBLE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_INT = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_KEYWORD = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_TEXT = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/cloud/namespace/v1/message.rb#27
Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec::SearchAttributeType::SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

class Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/nexus/v1/message.rb#19
module Temporalio::Api::Cloud::Nexus; end

# source://temporalio//lib/temporalio/api/cloud/nexus/v1/message.rb#20
module Temporalio::Api::Cloud::Nexus::V1; end

class Temporalio::Api::Cloud::Nexus::V1::AllowedCloudNamespacePolicySpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Nexus::V1::Endpoint < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Nexus::V1::EndpointPolicySpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Nexus::V1::EndpointSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Nexus::V1::EndpointTargetSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Nexus::V1::WorkerTargetSpec < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#20
module Temporalio::Api::Cloud::Operation; end

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#21
module Temporalio::Api::Cloud::Operation::V1; end

class Temporalio::Api::Cloud::Operation::V1::AsyncOperation < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_CANCELLED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_FULFILLED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_IN_PROGRESS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_PENDING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/operation/v1/message.rb#23
Temporalio::Api::Cloud::Operation::V1::AsyncOperation::State::STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/region/v1/message.rb#16
module Temporalio::Api::Cloud::Region; end

# source://temporalio//lib/temporalio/api/cloud/region/v1/message.rb#17
module Temporalio::Api::Cloud::Region::V1; end

class Temporalio::Api::Cloud::Region::V1::Region < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Region::V1::Region::CloudProvider
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/region/v1/message.rb#19
Temporalio::Api::Cloud::Region::V1::Region::CloudProvider::CLOUD_PROVIDER_AWS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/region/v1/message.rb#19
Temporalio::Api::Cloud::Region::V1::Region::CloudProvider::CLOUD_PROVIDER_GCP = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/region/v1/message.rb#19
Temporalio::Api::Cloud::Region::V1::Region::CloudProvider::CLOUD_PROVIDER_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#16
module Temporalio::Api::Cloud::Resource; end

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#17
module Temporalio::Api::Cloud::Resource::V1; end

module Temporalio::Api::Cloud::Resource::V1::ResourceState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_ACTIVATING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_ACTIVATION_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_ACTIVE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_DELETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_DELETE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_DELETING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_EXPIRED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_SUSPENDED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_UPDATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/resource/v1/message.rb#18
Temporalio::Api::Cloud::Resource::V1::ResourceState::RESOURCE_STATE_UPDATING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/sink/v1/message.rb#16
module Temporalio::Api::Cloud::Sink; end

# source://temporalio//lib/temporalio/api/cloud/sink/v1/message.rb#17
module Temporalio::Api::Cloud::Sink::V1; end

class Temporalio::Api::Cloud::Sink::V1::GCSSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Sink::V1::S3Spec < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#18
module Temporalio::Api::Cloud::Usage; end

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#19
module Temporalio::Api::Cloud::Usage::V1; end

class Temporalio::Api::Cloud::Usage::V1::GroupBy < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Usage::V1::GroupByKey
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#26
Temporalio::Api::Cloud::Usage::V1::GroupByKey::GROUP_BY_KEY_NAMESPACE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#26
Temporalio::Api::Cloud::Usage::V1::GroupByKey::GROUP_BY_KEY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Usage::V1::Record < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Cloud::Usage::V1::RecordGroup < Google::Protobuf::AbstractMessage; end

module Temporalio::Api::Cloud::Usage::V1::RecordType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#24
Temporalio::Api::Cloud::Usage::V1::RecordType::RECORD_TYPE_ACTIONS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#24
Temporalio::Api::Cloud::Usage::V1::RecordType::RECORD_TYPE_ACTIVE_STORAGE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#24
Temporalio::Api::Cloud::Usage::V1::RecordType::RECORD_TYPE_RETAINED_STORAGE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#24
Temporalio::Api::Cloud::Usage::V1::RecordType::RECORD_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Cloud::Usage::V1::RecordUnit
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#25
Temporalio::Api::Cloud::Usage::V1::RecordUnit::RECORD_UNIT_BYTE_SECONDS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#25
Temporalio::Api::Cloud::Usage::V1::RecordUnit::RECORD_UNIT_NUMBER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/cloud/usage/v1/message.rb#25
Temporalio::Api::Cloud::Usage::V1::RecordUnit::RECORD_UNIT_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Temporalio::Api::Cloud::Usage::V1::Summary < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/command/v1/message.rb#23
module Temporalio::Api::Command; end

# source://temporalio//lib/temporalio/api/command/v1/message.rb#24
module Temporalio::Api::Command::V1; end

class Temporalio::Api::Command::V1::CancelTimerCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::Command < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::RecordMarkerCommandAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::Command::V1::StartTimerCommandAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes < Google::Protobuf::AbstractMessage
end

# source://temporalio//lib/temporalio/api/common/v1/grpc_status.rb#17
module Temporalio::Api::Common; end

# source://temporalio//lib/temporalio/api/common/v1/grpc_status.rb#18
module Temporalio::Api::Common::V1; end

class Temporalio::Api::Common::V1::ActivityType < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Callback < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Callback::Internal < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Callback::Nexus < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::DataBlob < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::GrpcStatus < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Header < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Link < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Link::BatchJob < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Link::WorkflowEvent < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Link::WorkflowEvent::EventReference < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Memo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::MeteringMetadata < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Payload < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::Payloads < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::ResetOptions < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::RetryPolicy < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::SearchAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::WorkerVersionCapabilities < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::WorkerVersionStamp < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::WorkflowExecution < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Common::V1::WorkflowType < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#15
module Temporalio::Api::Enums; end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#16
module Temporalio::Api::Enums::V1; end

module Temporalio::Api::Enums::V1::ArchivalState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#18
Temporalio::Api::Enums::V1::ArchivalState::ARCHIVAL_STATE_DISABLED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#18
Temporalio::Api::Enums::V1::ArchivalState::ARCHIVAL_STATE_ENABLED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#18
Temporalio::Api::Enums::V1::ArchivalState::ARCHIVAL_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::BatchOperationState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#18
Temporalio::Api::Enums::V1::BatchOperationState::BATCH_OPERATION_STATE_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#18
Temporalio::Api::Enums::V1::BatchOperationState::BATCH_OPERATION_STATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#18
Temporalio::Api::Enums::V1::BatchOperationState::BATCH_OPERATION_STATE_RUNNING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#18
Temporalio::Api::Enums::V1::BatchOperationState::BATCH_OPERATION_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::BatchOperationType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_CANCEL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_DELETE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_RESET = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_SIGNAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_TERMINATE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/batch_operation.rb#17
Temporalio::Api::Enums::V1::BatchOperationType::BATCH_OPERATION_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::BuildIdTaskReachability
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#20
Temporalio::Api::Enums::V1::BuildIdTaskReachability::BUILD_ID_TASK_REACHABILITY_CLOSED_WORKFLOWS_ONLY = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#20
Temporalio::Api::Enums::V1::BuildIdTaskReachability::BUILD_ID_TASK_REACHABILITY_REACHABLE = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#20
Temporalio::Api::Enums::V1::BuildIdTaskReachability::BUILD_ID_TASK_REACHABILITY_UNREACHABLE = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#20
Temporalio::Api::Enums::V1::BuildIdTaskReachability::BUILD_ID_TASK_REACHABILITY_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                    Integer)

module Temporalio::Api::Enums::V1::CallbackState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_BACKING_OFF = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_STANDBY = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_SUCCEEDED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#20
Temporalio::Api::Enums::V1::CallbackState::CALLBACK_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::CancelExternalWorkflowExecutionFailedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#19
Temporalio::Api::Enums::V1::CancelExternalWorkflowExecutionFailedCause::CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#19
Temporalio::Api::Enums::V1::CancelExternalWorkflowExecutionFailedCause::CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#19
Temporalio::Api::Enums::V1::CancelExternalWorkflowExecutionFailedCause::CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::CommandType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_CANCEL_TIMER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_MODIFY_WORKFLOW_PROPERTIES = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_PROTOCOL_MESSAGE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_RECORD_MARKER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION = T.let(T.unsafe(nil),
                                                                                                         Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_REQUEST_CANCEL_NEXUS_OPERATION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_SCHEDULE_NEXUS_OPERATION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_START_TIMER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/command_type.rb#17
Temporalio::Api::Enums::V1::CommandType::COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ContinueAsNewInitiator
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#20
Temporalio::Api::Enums::V1::ContinueAsNewInitiator::CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#20
Temporalio::Api::Enums::V1::ContinueAsNewInitiator::CONTINUE_AS_NEW_INITIATOR_RETRY = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#20
Temporalio::Api::Enums::V1::ContinueAsNewInitiator::CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#20
Temporalio::Api::Enums::V1::ContinueAsNewInitiator::CONTINUE_AS_NEW_INITIATOR_WORKFLOW = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::DescribeTaskQueueMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#21
Temporalio::Api::Enums::V1::DescribeTaskQueueMode::DESCRIBE_TASK_QUEUE_MODE_ENHANCED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#21
Temporalio::Api::Enums::V1::DescribeTaskQueueMode::DESCRIBE_TASK_QUEUE_MODE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::EncodingType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#17
Temporalio::Api::Enums::V1::EncodingType::ENCODING_TYPE_JSON = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#17
Temporalio::Api::Enums::V1::EncodingType::ENCODING_TYPE_PROTO3 = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#17
Temporalio::Api::Enums::V1::EncodingType::ENCODING_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::EventType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_PROPERTIES_MODIFIED_EXTERNALLY = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_MARKER_RECORDED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_NEXUS_OPERATION_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED = T.let(T.unsafe(nil),
                                                                                                   Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_TIMER_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_TIMER_FIRED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_TIMER_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ACCEPTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ADMITTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_REJECTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED_EXTERNALLY = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_TASK_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_TASK_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_TASK_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_TASK_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/event_type.rb#17
Temporalio::Api::Enums::V1::EventType::EVENT_TYPE_WORKFLOW_TASK_TIMED_OUT = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::HistoryEventFilterType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#24
Temporalio::Api::Enums::V1::HistoryEventFilterType::HISTORY_EVENT_FILTER_TYPE_ALL_EVENT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#24
Temporalio::Api::Enums::V1::HistoryEventFilterType::HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#24
Temporalio::Api::Enums::V1::HistoryEventFilterType::HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                  Integer)

module Temporalio::Api::Enums::V1::IndexedValueType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_BOOL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_DATETIME = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_DOUBLE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_INT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_KEYWORD = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_KEYWORD_LIST = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_TEXT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#18
Temporalio::Api::Enums::V1::IndexedValueType::INDEXED_VALUE_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::NamespaceState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#17
Temporalio::Api::Enums::V1::NamespaceState::NAMESPACE_STATE_DELETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#17
Temporalio::Api::Enums::V1::NamespaceState::NAMESPACE_STATE_DEPRECATED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#17
Temporalio::Api::Enums::V1::NamespaceState::NAMESPACE_STATE_REGISTERED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#17
Temporalio::Api::Enums::V1::NamespaceState::NAMESPACE_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::NexusOperationCancellationState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_BACKING_OFF = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_FAILED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_SCHEDULED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_SUCCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_TIMED_OUT = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#22
Temporalio::Api::Enums::V1::NexusOperationCancellationState::NEXUS_OPERATION_CANCELLATION_STATE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::ParentClosePolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#19
Temporalio::Api::Enums::V1::ParentClosePolicy::PARENT_CLOSE_POLICY_ABANDON = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#19
Temporalio::Api::Enums::V1::ParentClosePolicy::PARENT_CLOSE_POLICY_REQUEST_CANCEL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#19
Temporalio::Api::Enums::V1::ParentClosePolicy::PARENT_CLOSE_POLICY_TERMINATE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#19
Temporalio::Api::Enums::V1::ParentClosePolicy::PARENT_CLOSE_POLICY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::PendingActivityState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#22
Temporalio::Api::Enums::V1::PendingActivityState::PENDING_ACTIVITY_STATE_CANCEL_REQUESTED = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#22
Temporalio::Api::Enums::V1::PendingActivityState::PENDING_ACTIVITY_STATE_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#22
Temporalio::Api::Enums::V1::PendingActivityState::PENDING_ACTIVITY_STATE_STARTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#22
Temporalio::Api::Enums::V1::PendingActivityState::PENDING_ACTIVITY_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::PendingNexusOperationState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#21
Temporalio::Api::Enums::V1::PendingNexusOperationState::PENDING_NEXUS_OPERATION_STATE_BACKING_OFF = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#21
Temporalio::Api::Enums::V1::PendingNexusOperationState::PENDING_NEXUS_OPERATION_STATE_SCHEDULED = T.let(T.unsafe(nil),
                                                                                                        Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#21
Temporalio::Api::Enums::V1::PendingNexusOperationState::PENDING_NEXUS_OPERATION_STATE_STARTED = T.let(T.unsafe(nil),
                                                                                                      Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#21
Temporalio::Api::Enums::V1::PendingNexusOperationState::PENDING_NEXUS_OPERATION_STATE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::PendingWorkflowTaskState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#23
Temporalio::Api::Enums::V1::PendingWorkflowTaskState::PENDING_WORKFLOW_TASK_STATE_SCHEDULED = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#23
Temporalio::Api::Enums::V1::PendingWorkflowTaskState::PENDING_WORKFLOW_TASK_STATE_STARTED = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#23
Temporalio::Api::Enums::V1::PendingWorkflowTaskState::PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                      Integer)

module Temporalio::Api::Enums::V1::QueryRejectCondition
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#18
Temporalio::Api::Enums::V1::QueryRejectCondition::QUERY_REJECT_CONDITION_NONE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#18
Temporalio::Api::Enums::V1::QueryRejectCondition::QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#18
Temporalio::Api::Enums::V1::QueryRejectCondition::QUERY_REJECT_CONDITION_NOT_OPEN = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#18
Temporalio::Api::Enums::V1::QueryRejectCondition::QUERY_REJECT_CONDITION_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::QueryResultType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#17
Temporalio::Api::Enums::V1::QueryResultType::QUERY_RESULT_TYPE_ANSWERED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#17
Temporalio::Api::Enums::V1::QueryResultType::QUERY_RESULT_TYPE_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/query.rb#17
Temporalio::Api::Enums::V1::QueryResultType::QUERY_RESULT_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ReplicationState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#19
Temporalio::Api::Enums::V1::ReplicationState::REPLICATION_STATE_HANDOVER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#19
Temporalio::Api::Enums::V1::ReplicationState::REPLICATION_STATE_NORMAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/namespace.rb#19
Temporalio::Api::Enums::V1::ReplicationState::REPLICATION_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ResetReapplyExcludeType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#17
Temporalio::Api::Enums::V1::ResetReapplyExcludeType::RESET_REAPPLY_EXCLUDE_TYPE_NEXUS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#17
Temporalio::Api::Enums::V1::ResetReapplyExcludeType::RESET_REAPPLY_EXCLUDE_TYPE_SIGNAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#17
Temporalio::Api::Enums::V1::ResetReapplyExcludeType::RESET_REAPPLY_EXCLUDE_TYPE_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#17
Temporalio::Api::Enums::V1::ResetReapplyExcludeType::RESET_REAPPLY_EXCLUDE_TYPE_UPDATE = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ResetReapplyType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#18
Temporalio::Api::Enums::V1::ResetReapplyType::RESET_REAPPLY_TYPE_ALL_ELIGIBLE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#18
Temporalio::Api::Enums::V1::ResetReapplyType::RESET_REAPPLY_TYPE_NONE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#18
Temporalio::Api::Enums::V1::ResetReapplyType::RESET_REAPPLY_TYPE_SIGNAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#18
Temporalio::Api::Enums::V1::ResetReapplyType::RESET_REAPPLY_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ResetType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#19
Temporalio::Api::Enums::V1::ResetType::RESET_TYPE_FIRST_WORKFLOW_TASK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#19
Temporalio::Api::Enums::V1::ResetType::RESET_TYPE_LAST_WORKFLOW_TASK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/reset.rb#19
Temporalio::Api::Enums::V1::ResetType::RESET_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ResourceExhaustedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_APS_LIMIT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_BUSY_WORKFLOW = T.let(T.unsafe(nil),
                                                                                                   Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_CIRCUIT_BREAKER_OPEN = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_CONCURRENT_LIMIT = T.let(T.unsafe(nil),
                                                                                                      Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_LIMIT = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_STORAGE_LIMIT = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_RPS_LIMIT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_SYSTEM_OVERLOADED = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#21
Temporalio::Api::Enums::V1::ResourceExhaustedCause::RESOURCE_EXHAUSTED_CAUSE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ResourceExhaustedScope
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#22
Temporalio::Api::Enums::V1::ResourceExhaustedScope::RESOURCE_EXHAUSTED_SCOPE_NAMESPACE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#22
Temporalio::Api::Enums::V1::ResourceExhaustedScope::RESOURCE_EXHAUSTED_SCOPE_SYSTEM = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#22
Temporalio::Api::Enums::V1::ResourceExhaustedScope::RESOURCE_EXHAUSTED_SCOPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::RetryState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_CANCEL_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_INTERNAL_SERVER_ERROR = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_IN_PROGRESS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_NON_RETRYABLE_FAILURE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_RETRY_POLICY_NOT_SET = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#25
Temporalio::Api::Enums::V1::RetryState::RETRY_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::ScheduleOverlapPolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_ALLOW_ALL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_BUFFER_ALL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_BUFFER_ONE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_SKIP = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER = T.let(T.unsafe(nil),
                                                                                                   Integer)

# source://temporalio//lib/temporalio/api/enums/v1/schedule.rb#17
Temporalio::Api::Enums::V1::ScheduleOverlapPolicy::SCHEDULE_OVERLAP_POLICY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::Severity
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#19
Temporalio::Api::Enums::V1::Severity::SEVERITY_HIGH = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#19
Temporalio::Api::Enums::V1::Severity::SEVERITY_LOW = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#19
Temporalio::Api::Enums::V1::Severity::SEVERITY_MEDIUM = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/common.rb#19
Temporalio::Api::Enums::V1::Severity::SEVERITY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::SignalExternalWorkflowExecutionFailedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#20
Temporalio::Api::Enums::V1::SignalExternalWorkflowExecutionFailedCause::SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#20
Temporalio::Api::Enums::V1::SignalExternalWorkflowExecutionFailedCause::SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#20
Temporalio::Api::Enums::V1::SignalExternalWorkflowExecutionFailedCause::SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_SIGNAL_COUNT_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#20
Temporalio::Api::Enums::V1::SignalExternalWorkflowExecutionFailedCause::SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::StartChildWorkflowExecutionFailedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#18
Temporalio::Api::Enums::V1::StartChildWorkflowExecutionFailedCause::START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#18
Temporalio::Api::Enums::V1::StartChildWorkflowExecutionFailedCause::START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#18
Temporalio::Api::Enums::V1::StartChildWorkflowExecutionFailedCause::START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::TaskQueueKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#17
Temporalio::Api::Enums::V1::TaskQueueKind::TASK_QUEUE_KIND_NORMAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#17
Temporalio::Api::Enums::V1::TaskQueueKind::TASK_QUEUE_KIND_STICKY = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#17
Temporalio::Api::Enums::V1::TaskQueueKind::TASK_QUEUE_KIND_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::TaskQueueType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#18
Temporalio::Api::Enums::V1::TaskQueueType::TASK_QUEUE_TYPE_ACTIVITY = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#18
Temporalio::Api::Enums::V1::TaskQueueType::TASK_QUEUE_TYPE_NEXUS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#18
Temporalio::Api::Enums::V1::TaskQueueType::TASK_QUEUE_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#18
Temporalio::Api::Enums::V1::TaskQueueType::TASK_QUEUE_TYPE_WORKFLOW = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::TaskReachability
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#19
Temporalio::Api::Enums::V1::TaskReachability::TASK_REACHABILITY_CLOSED_WORKFLOWS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#19
Temporalio::Api::Enums::V1::TaskReachability::TASK_REACHABILITY_EXISTING_WORKFLOWS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#19
Temporalio::Api::Enums::V1::TaskReachability::TASK_REACHABILITY_NEW_WORKFLOWS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#19
Temporalio::Api::Enums::V1::TaskReachability::TASK_REACHABILITY_OPEN_WORKFLOWS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/task_queue.rb#19
Temporalio::Api::Enums::V1::TaskReachability::TASK_REACHABILITY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::TimeoutType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#26
Temporalio::Api::Enums::V1::TimeoutType::TIMEOUT_TYPE_HEARTBEAT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#26
Temporalio::Api::Enums::V1::TimeoutType::TIMEOUT_TYPE_SCHEDULE_TO_CLOSE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#26
Temporalio::Api::Enums::V1::TimeoutType::TIMEOUT_TYPE_SCHEDULE_TO_START = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#26
Temporalio::Api::Enums::V1::TimeoutType::TIMEOUT_TYPE_START_TO_CLOSE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#26
Temporalio::Api::Enums::V1::TimeoutType::TIMEOUT_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::UpdateAdmittedEventOrigin
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#18
Temporalio::Api::Enums::V1::UpdateAdmittedEventOrigin::UPDATE_ADMITTED_EVENT_ORIGIN_REAPPLY = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#18
Temporalio::Api::Enums::V1::UpdateAdmittedEventOrigin::UPDATE_ADMITTED_EVENT_ORIGIN_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                        Integer)

module Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#17
Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#17
Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#17
Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/update.rb#17
Temporalio::Api::Enums::V1::UpdateWorkflowExecutionLifecycleStage::UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Api::Enums::V1::WorkflowExecutionStatus
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW = T.let(T.unsafe(nil),
                                                                                                        Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_RUNNING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_TERMINATED = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#21
Temporalio::Api::Enums::V1::WorkflowExecutionStatus::WORKFLOW_EXECUTION_STATUS_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                   Integer)

module Temporalio::Api::Enums::V1::WorkflowIdConflictPolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#18
Temporalio::Api::Enums::V1::WorkflowIdConflictPolicy::WORKFLOW_ID_CONFLICT_POLICY_FAIL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#18
Temporalio::Api::Enums::V1::WorkflowIdConflictPolicy::WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#18
Temporalio::Api::Enums::V1::WorkflowIdConflictPolicy::WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                      Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#18
Temporalio::Api::Enums::V1::WorkflowIdConflictPolicy::WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING = T.let(T.unsafe(nil),
                                                                                                       Integer)

module Temporalio::Api::Enums::V1::WorkflowIdReusePolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#17
Temporalio::Api::Enums::V1::WorkflowIdReusePolicy::WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#17
Temporalio::Api::Enums::V1::WorkflowIdReusePolicy::WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#17
Temporalio::Api::Enums::V1::WorkflowIdReusePolicy::WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE = T.let(T.unsafe(nil),
                                                                                                     Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#17
Temporalio::Api::Enums::V1::WorkflowIdReusePolicy::WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING = T.let(T.unsafe(nil),
                                                                                                         Integer)

# source://temporalio//lib/temporalio/api/enums/v1/workflow.rb#17
Temporalio::Api::Enums::V1::WorkflowIdReusePolicy::WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Temporalio::Api::Enums::V1::WorkflowTaskFailedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_BINARY = T.let(T.unsafe(nil),
                                                                                                   Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_MODIFY_WORKFLOW_PROPERTIES_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_NEXUS_OPERATION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_NEXUS_OPERATION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_BAD_UPDATE_WORKFLOW_EXECUTION_MESSAGE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_FEATURE_DISABLED = T.let(T.unsafe(nil),
                                                                                                         Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_NON_DETERMINISTIC_ERROR = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_PENDING_ACTIVITIES_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_PENDING_CHILD_WORKFLOWS_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_PENDING_NEXUS_OPERATIONS_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_PENDING_REQUEST_CANCEL_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_PENDING_SIGNALS_LIMIT_EXCEEDED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_RESET_STICKY_TASK_QUEUE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_RESET_WORKFLOW = T.let(T.unsafe(nil),
                                                                                                       Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_COMMAND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_UPDATE = T.let(T.unsafe(nil),
                                                                                                         Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/api/enums/v1/failed_cause.rb#17
Temporalio::Api::Enums::V1::WorkflowTaskFailedCause::WORKFLOW_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/api/errordetails/v1/message.rb#20
module Temporalio::Api::ErrorDetails; end

# source://temporalio//lib/temporalio/api/errordetails/v1/message.rb#21
module Temporalio::Api::ErrorDetails::V1; end

class Temporalio::Api::ErrorDetails::V1::CancellationAlreadyRequestedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::ClientVersionNotSupportedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::MultiOperationExecutionFailure < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::ErrorDetails::V1::MultiOperationExecutionFailure::OperationStatus < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::ErrorDetails::V1::NamespaceAlreadyExistsFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::NamespaceInvalidStateFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::NamespaceNotActiveFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::NamespaceNotFoundFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::NewerBuildExistsFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::NotFoundFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::PermissionDeniedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::QueryFailedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::ResourceExhaustedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::ServerVersionNotSupportedFailure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::ErrorDetails::V1::SystemWorkflowFailure < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::ErrorDetails::V1::WorkflowExecutionAlreadyStartedFailure < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::ErrorDetails::V1::WorkflowNotReadyFailure < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/export/v1/message.rb#17
module Temporalio::Api::Export; end

# source://temporalio//lib/temporalio/api/export/v1/message.rb#18
module Temporalio::Api::Export::V1; end

class Temporalio::Api::Export::V1::WorkflowExecution < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Export::V1::WorkflowExecutions < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/failure/v1/message.rb#19
module Temporalio::Api::Failure; end

# source://temporalio//lib/temporalio/api/failure/v1/message.rb#20
module Temporalio::Api::Failure::V1; end

class Temporalio::Api::Failure::V1::ActivityFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::ApplicationFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::CanceledFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::Failure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::MultiOperationExecutionAborted < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::NexusOperationFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::ServerFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::TerminatedFailureInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Failure::V1::TimeoutFailureInfo < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/filter/v1/message.rb#18
module Temporalio::Api::Filter; end

# source://temporalio//lib/temporalio/api/filter/v1/message.rb#19
module Temporalio::Api::Filter::V1; end

class Temporalio::Api::Filter::V1::StartTimeFilter < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Filter::V1::StatusFilter < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Filter::V1::WorkflowExecutionFilter < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Filter::V1::WorkflowTypeFilter < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/history/v1/message.rb#29
module Temporalio::Api::History; end

# source://temporalio//lib/temporalio/api/history/v1/message.rb#30
module Temporalio::Api::History::V1; end

class Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::History < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::HistoryEvent < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::MarkerRecordedEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::NexusOperationFailedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::NexusOperationStartedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::TimerCanceledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::TimerFiredEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::TimerStartedEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/namespace/v1/message.rb#19
module Temporalio::Api::Namespace; end

# source://temporalio//lib/temporalio/api/namespace/v1/message.rb#20
module Temporalio::Api::Namespace::V1; end

class Temporalio::Api::Namespace::V1::BadBinaries < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::BadBinaryInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::NamespaceConfig < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::NamespaceFilter < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::NamespaceInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::NamespaceInfo::Capabilities < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Namespace::V1::UpdateNamespaceInfo < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/nexus/v1/message.rb#18
module Temporalio::Api::Nexus; end

# source://temporalio//lib/temporalio/api/nexus/v1/message.rb#19
module Temporalio::Api::Nexus::V1; end

class Temporalio::Api::Nexus::V1::CancelOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::CancelOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::Endpoint < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::EndpointSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::EndpointTarget < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::EndpointTarget::External < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::EndpointTarget::Worker < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::Failure < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::HandlerError < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::Link < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::Request < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::Response < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::StartOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::StartOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::StartOperationResponse::Async < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::StartOperationResponse::Sync < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Nexus::V1::UnsuccessfulOperationError < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/operatorservice/v1/request_response.rb#19
module Temporalio::Api::OperatorService; end

# source://temporalio//lib/temporalio/api/operatorservice/v1/request_response.rb#20
module Temporalio::Api::OperatorService::V1; end

class Temporalio::Api::OperatorService::V1::AddOrUpdateRemoteClusterRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::AddOrUpdateRemoteClusterResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::AddSearchAttributesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::AddSearchAttributesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ClusterMetadata < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::CreateNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::CreateNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::DeleteNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::DeleteNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::DeleteNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::DeleteNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::GetNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::GetNexusEndpointResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListClustersRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListClustersResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListNexusEndpointsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListNexusEndpointsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListSearchAttributesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::ListSearchAttributesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::RemoveRemoteClusterRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::RemoveRemoteClusterResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::RemoveSearchAttributesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::RemoveSearchAttributesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::UpdateNexusEndpointRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::OperatorService::V1::UpdateNexusEndpointResponse < Google::Protobuf::AbstractMessage; end

# Visitor for payloads within the protobuf structure. This visitor is thread safe and can be used multiple
# times since it stores no mutable state.
#
# @note WARNING: This class is not considered stable for external use and may change as needed for internal
#   reasons.
#
# source://temporalio//lib/temporalio/api/payload_visitor.rb#15
class Temporalio::Api::PayloadVisitor
  # Create a new visitor, calling the block on every {Common::V1::Payload} or
  # {Google::Protobuf::RepeatedField<Payload>} encountered.
  #
  # @param on_enter [Proc, nil] Proc called at the beginning of the processing for every protobuf value
  #   _except_ the ones calling the block.
  # @param on_exit [Proc, nil] Proc called at the end of the processing for every protobuf value _except_ the
  #   ones calling the block.
  # @param skip_search_attributes [Boolean] If true, payloads within search attributes do not call the block.
  # @param traverse_any [Boolean] If true, when a [Google::Protobuf::Any] is encountered, it is unpacked,
  #   visited, then repacked.
  # @raise [ArgumentError]
  # @return [PayloadVisitor] a new instance of PayloadVisitor
  # @yield [value] Block called with the visited payload value.
  # @yieldparam Payload [Common::V1::Payload, Google::Protobuf::RepeatedField<Payload>] or payload list.
  #
  # source://temporalio//lib/temporalio/api/payload_visitor.rb#28
  def initialize(on_enter: T.unsafe(nil), on_exit: T.unsafe(nil), skip_search_attributes: T.unsafe(nil),
                 traverse_any: T.unsafe(nil), &block)
  end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#54
  def _run_activation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#59
  def _run_activation_completion(value); end

  # Visit the given protobuf message.
  #
  # @param value [Google::Protobuf::Message] Message to visit.
  #
  # source://temporalio//lib/temporalio/api/payload_visitor.rb#46
  def run(value); end

  private

  # Generated method bodies below ###
  #
  # source://temporalio//lib/temporalio/api/payload_visitor.rb#91
  def api_batch_v1_batch_operation_signal(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#98
  def api_batch_v1_batch_operation_termination(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#104
  def api_cloud_cloudservice_v1_add_namespace_region_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#110
  def api_cloud_cloudservice_v1_create_api_key_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#116
  def api_cloud_cloudservice_v1_create_namespace_export_sink_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#122
  def api_cloud_cloudservice_v1_create_namespace_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#128
  def api_cloud_cloudservice_v1_create_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#134
  def api_cloud_cloudservice_v1_create_service_account_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#140
  def api_cloud_cloudservice_v1_create_user_group_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#146
  def api_cloud_cloudservice_v1_create_user_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#152
  def api_cloud_cloudservice_v1_delete_api_key_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#158
  def api_cloud_cloudservice_v1_delete_namespace_export_sink_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#164
  def api_cloud_cloudservice_v1_delete_namespace_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#170
  def api_cloud_cloudservice_v1_delete_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#176
  def api_cloud_cloudservice_v1_delete_service_account_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#182
  def api_cloud_cloudservice_v1_delete_user_group_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#188
  def api_cloud_cloudservice_v1_delete_user_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#194
  def api_cloud_cloudservice_v1_failover_namespace_region_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#200
  def api_cloud_cloudservice_v1_get_async_operation_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#206
  def api_cloud_cloudservice_v1_rename_custom_search_attribute_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#212
  def api_cloud_cloudservice_v1_set_user_group_namespace_access_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#218
  def api_cloud_cloudservice_v1_set_user_namespace_access_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#224
  def api_cloud_cloudservice_v1_update_account_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#230
  def api_cloud_cloudservice_v1_update_api_key_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#236
  def api_cloud_cloudservice_v1_update_namespace_export_sink_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#242
  def api_cloud_cloudservice_v1_update_namespace_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#248
  def api_cloud_cloudservice_v1_update_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#254
  def api_cloud_cloudservice_v1_update_service_account_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#260
  def api_cloud_cloudservice_v1_update_user_group_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#266
  def api_cloud_cloudservice_v1_update_user_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#272
  def api_cloud_operation_v1_async_operation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#278
  def api_command_v1_cancel_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#284
  def api_command_v1_command(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#301
  def api_command_v1_complete_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#307
  def api_command_v1_continue_as_new_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#318
  def api_command_v1_fail_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#324
  def api_command_v1_modify_workflow_properties_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#330
  def api_command_v1_record_marker_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#338
  def api_command_v1_schedule_activity_task_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#345
  def api_command_v1_schedule_nexus_operation_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#351
  def api_command_v1_signal_external_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#358
  def api_command_v1_start_child_workflow_execution_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#367
  def api_command_v1_upsert_workflow_search_attributes_command_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#373
  def api_common_v1_header(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#379
  def api_common_v1_memo(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#73
  def api_common_v1_payload(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#77
  def api_common_v1_payload_repeated(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#385
  def api_common_v1_payloads(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#391
  def api_common_v1_search_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#398
  def api_export_v1_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#404
  def api_export_v1_workflow_executions(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#410
  def api_failure_v1_application_failure_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#416
  def api_failure_v1_canceled_failure_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#422
  def api_failure_v1_failure(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#433
  def api_failure_v1_reset_workflow_failure_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#439
  def api_failure_v1_timeout_failure_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#445
  def api_history_v1_activity_task_canceled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#451
  def api_history_v1_activity_task_completed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#457
  def api_history_v1_activity_task_failed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#463
  def api_history_v1_activity_task_scheduled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#470
  def api_history_v1_activity_task_started_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#476
  def api_history_v1_activity_task_timed_out_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#482
  def api_history_v1_child_workflow_execution_canceled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#488
  def api_history_v1_child_workflow_execution_completed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#494
  def api_history_v1_child_workflow_execution_failed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#500
  def api_history_v1_child_workflow_execution_started_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#506
  def api_history_v1_history(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#512
  def api_history_v1_history_event(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#551
  def api_history_v1_marker_recorded_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#559
  def api_history_v1_nexus_operation_canceled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#565
  def api_history_v1_nexus_operation_completed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#571
  def api_history_v1_nexus_operation_failed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#577
  def api_history_v1_nexus_operation_scheduled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#583
  def api_history_v1_nexus_operation_timed_out_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#589
  def api_history_v1_signal_external_workflow_execution_initiated_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#596
  def api_history_v1_start_child_workflow_execution_initiated_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#605
  def api_history_v1_upsert_workflow_search_attributes_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#611
  def api_history_v1_workflow_execution_canceled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#617
  def api_history_v1_workflow_execution_completed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#623
  def api_history_v1_workflow_execution_continued_as_new_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#634
  def api_history_v1_workflow_execution_failed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#640
  def api_history_v1_workflow_execution_signaled_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#647
  def api_history_v1_workflow_execution_started_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#658
  def api_history_v1_workflow_execution_terminated_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#664
  def api_history_v1_workflow_execution_update_accepted_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#670
  def api_history_v1_workflow_execution_update_admitted_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#676
  def api_history_v1_workflow_execution_update_completed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#682
  def api_history_v1_workflow_execution_update_rejected_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#689
  def api_history_v1_workflow_properties_modified_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#695
  def api_history_v1_workflow_properties_modified_externally_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#701
  def api_history_v1_workflow_task_failed_event_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#707
  def api_nexus_v1_endpoint(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#713
  def api_nexus_v1_endpoint_spec(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#719
  def api_nexus_v1_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#725
  def api_nexus_v1_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#731
  def api_nexus_v1_start_operation_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#737
  def api_nexus_v1_start_operation_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#743
  def api_nexus_v1_start_operation_response_sync(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#749
  def api_operatorservice_v1_create_nexus_endpoint_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#755
  def api_operatorservice_v1_create_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#761
  def api_operatorservice_v1_get_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#767
  def api_operatorservice_v1_list_nexus_endpoints_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#773
  def api_operatorservice_v1_update_nexus_endpoint_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#779
  def api_operatorservice_v1_update_nexus_endpoint_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#785
  def api_protocol_v1_message(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#791
  def api_query_v1_workflow_query(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#798
  def api_query_v1_workflow_query_result(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#804
  def api_schedule_v1_schedule(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#810
  def api_schedule_v1_schedule_action(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#816
  def api_schedule_v1_schedule_list_entry(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#823
  def api_sdk_v1_user_metadata(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#830
  def api_update_v1_input(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#837
  def api_update_v1_outcome(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#844
  def api_update_v1_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#850
  def api_workflow_v1_callback_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#856
  def api_workflow_v1_new_workflow_execution_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#866
  def api_workflow_v1_nexus_operation_cancellation_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#872
  def api_workflow_v1_pending_activity_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#879
  def api_workflow_v1_pending_nexus_operation_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#886
  def api_workflow_v1_workflow_execution_config(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#892
  def api_workflow_v1_workflow_execution_info(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#899
  def api_workflowservice_v1_count_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#905
  def api_workflowservice_v1_count_workflow_executions_response_aggregation_group(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#911
  def api_workflowservice_v1_create_schedule_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#919
  def api_workflowservice_v1_describe_schedule_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#927
  def api_workflowservice_v1_describe_workflow_execution_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#937
  def api_workflowservice_v1_execute_multi_operation_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#943
  def api_workflowservice_v1_execute_multi_operation_request_operation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#950
  def api_workflowservice_v1_execute_multi_operation_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#956
  def api_workflowservice_v1_execute_multi_operation_response_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#963
  def api_workflowservice_v1_get_workflow_execution_history_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#969
  def api_workflowservice_v1_get_workflow_execution_history_reverse_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#975
  def api_workflowservice_v1_list_archived_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#981
  def api_workflowservice_v1_list_closed_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#987
  def api_workflowservice_v1_list_open_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#993
  def api_workflowservice_v1_list_schedules_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#999
  def api_workflowservice_v1_list_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1005
  def api_workflowservice_v1_poll_activity_task_queue_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1013
  def api_workflowservice_v1_poll_nexus_task_queue_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1019
  def api_workflowservice_v1_poll_workflow_execution_update_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1025
  def api_workflowservice_v1_poll_workflow_task_queue_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1034
  def api_workflowservice_v1_query_workflow_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1040
  def api_workflowservice_v1_query_workflow_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1046
  def api_workflowservice_v1_record_activity_task_heartbeat_by_id_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1052
  def api_workflowservice_v1_record_activity_task_heartbeat_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1058
  def api_workflowservice_v1_respond_activity_task_canceled_by_id_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1064
  def api_workflowservice_v1_respond_activity_task_canceled_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1070
  def api_workflowservice_v1_respond_activity_task_completed_by_id_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1076
  def api_workflowservice_v1_respond_activity_task_completed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1082
  def api_workflowservice_v1_respond_activity_task_failed_by_id_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1089
  def api_workflowservice_v1_respond_activity_task_failed_by_id_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1095
  def api_workflowservice_v1_respond_activity_task_failed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1102
  def api_workflowservice_v1_respond_activity_task_failed_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1108
  def api_workflowservice_v1_respond_nexus_task_completed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1114
  def api_workflowservice_v1_respond_query_task_completed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1120
  def api_workflowservice_v1_respond_workflow_task_completed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1128
  def api_workflowservice_v1_respond_workflow_task_completed_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1135
  def api_workflowservice_v1_respond_workflow_task_failed_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1142
  def api_workflowservice_v1_scan_workflow_executions_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1148
  def api_workflowservice_v1_signal_with_start_workflow_execution_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1159
  def api_workflowservice_v1_signal_workflow_execution_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1166
  def api_workflowservice_v1_start_batch_operation_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1173
  def api_workflowservice_v1_start_workflow_execution_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1185
  def api_workflowservice_v1_start_workflow_execution_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1191
  def api_workflowservice_v1_terminate_workflow_execution_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1197
  def api_workflowservice_v1_update_schedule_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1204
  def api_workflowservice_v1_update_workflow_execution_request(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1210
  def api_workflowservice_v1_update_workflow_execution_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1216
  def coresdk_activity_result_activity_resolution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1224
  def coresdk_activity_result_cancellation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1230
  def coresdk_activity_result_failure(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1236
  def coresdk_activity_result_success(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1242
  def coresdk_child_workflow_cancellation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1248
  def coresdk_child_workflow_child_workflow_result(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1256
  def coresdk_child_workflow_failure(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1262
  def coresdk_child_workflow_success(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1268
  def coresdk_nexus_nexus_operation_result(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1277
  def coresdk_workflow_activation_cancel_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1283
  def coresdk_workflow_activation_do_update(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1290
  def coresdk_workflow_activation_initialize_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1301
  def coresdk_workflow_activation_query_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1308
  def coresdk_workflow_activation_resolve_activity(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1314
  def coresdk_workflow_activation_resolve_child_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1320
  def coresdk_workflow_activation_resolve_child_workflow_execution_start(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1326
  def coresdk_workflow_activation_resolve_child_workflow_execution_start_cancelled(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1332
  def coresdk_workflow_activation_resolve_nexus_operation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1338
  def coresdk_workflow_activation_resolve_nexus_operation_start(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1344
  def coresdk_workflow_activation_resolve_request_cancel_external_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1350
  def coresdk_workflow_activation_resolve_signal_external_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1356
  def coresdk_workflow_activation_signal_workflow(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1363
  def coresdk_workflow_activation_workflow_activation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1369
  def coresdk_workflow_activation_workflow_activation_job(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1386
  def coresdk_workflow_commands_complete_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1392
  def coresdk_workflow_commands_continue_as_new_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1401
  def coresdk_workflow_commands_fail_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1407
  def coresdk_workflow_commands_modify_workflow_properties(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1413
  def coresdk_workflow_commands_query_result(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1420
  def coresdk_workflow_commands_query_success(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1426
  def coresdk_workflow_commands_schedule_activity(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1433
  def coresdk_workflow_commands_schedule_local_activity(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1440
  def coresdk_workflow_commands_schedule_nexus_operation(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1446
  def coresdk_workflow_commands_signal_external_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1453
  def coresdk_workflow_commands_start_child_workflow_execution(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1462
  def coresdk_workflow_commands_update_response(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1469
  def coresdk_workflow_commands_upsert_workflow_search_attributes(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1475
  def coresdk_workflow_commands_workflow_command(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1493
  def coresdk_workflow_completion_failure(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1499
  def coresdk_workflow_completion_success(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#1505
  def coresdk_workflow_completion_workflow_activation_completion(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#81
  def google_protobuf_any(value); end

  # source://temporalio//lib/temporalio/api/payload_visitor.rb#65
  def method_name_from_proto_name(name); end
end

# source://temporalio//lib/temporalio/api/protocol/v1/message.rb#17
module Temporalio::Api::Protocol; end

# source://temporalio//lib/temporalio/api/protocol/v1/message.rb#18
module Temporalio::Api::Protocol::V1; end

class Temporalio::Api::Protocol::V1::Message < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/query/v1/message.rb#19
module Temporalio::Api::Query; end

# source://temporalio//lib/temporalio/api/query/v1/message.rb#20
module Temporalio::Api::Query::V1; end

class Temporalio::Api::Query::V1::QueryRejected < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Query::V1::WorkflowQuery < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Query::V1::WorkflowQueryResult < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/replication/v1/message.rb#18
module Temporalio::Api::Replication; end

# source://temporalio//lib/temporalio/api/replication/v1/message.rb#19
module Temporalio::Api::Replication::V1; end

class Temporalio::Api::Replication::V1::ClusterReplicationConfig < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Replication::V1::FailoverStatus < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Replication::V1::NamespaceReplicationConfig < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/schedule/v1/message.rb#22
module Temporalio::Api::Schedule; end

# source://temporalio//lib/temporalio/api/schedule/v1/message.rb#23
module Temporalio::Api::Schedule::V1; end

class Temporalio::Api::Schedule::V1::BackfillRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::CalendarSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::IntervalSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::Range < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::Schedule < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleAction < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleActionResult < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleListEntry < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleListInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::SchedulePatch < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::SchedulePolicies < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::ScheduleState < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::StructuredCalendarSpec < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Schedule::V1::TriggerImmediatelyRequest < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/sdk/v1/user_metadata.rb#17
module Temporalio::Api::Sdk; end

# source://temporalio//lib/temporalio/api/sdk/v1/user_metadata.rb#18
module Temporalio::Api::Sdk::V1; end

class Temporalio::Api::Sdk::V1::UserMetadata < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/taskqueue/v1/message.rb#21
module Temporalio::Api::TaskQueue; end

# source://temporalio//lib/temporalio/api/taskqueue/v1/message.rb#22
module Temporalio::Api::TaskQueue::V1; end

class Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::BuildIdReachability < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::CompatibleVersionSet < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::PollerInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::RampByPercentage < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::StickyExecutionAttributes < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskIdBlock < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueue < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueMetadata < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueuePartitionMetadata < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueReachability < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueStats < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueStatus < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueTypeInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueVersionInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TaskQueueVersionSelection < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::TaskQueue::V1::TimestampedBuildIdAssignmentRule < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::TaskQueue::V1::TimestampedCompatibleBuildIdRedirectRule < Google::Protobuf::AbstractMessage
end

# source://temporalio//lib/temporalio/api/update/v1/message.rb#19
module Temporalio::Api::Update; end

# source://temporalio//lib/temporalio/api/update/v1/message.rb#20
module Temporalio::Api::Update::V1; end

class Temporalio::Api::Update::V1::Acceptance < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Input < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Meta < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Outcome < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Rejection < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Request < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::Response < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::UpdateRef < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Update::V1::WaitPolicy < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/version/v1/message.rb#18
module Temporalio::Api::Version; end

# source://temporalio//lib/temporalio/api/version/v1/message.rb#19
module Temporalio::Api::Version::V1; end

class Temporalio::Api::Version::V1::Alert < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Version::V1::ReleaseInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Version::V1::VersionInfo < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/workflow/v1/message.rb#25
module Temporalio::Api::Workflow; end

# source://temporalio//lib/temporalio/api/workflow/v1/message.rb#26
module Temporalio::Api::Workflow::V1; end

class Temporalio::Api::Workflow::V1::CallbackInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::CallbackInfo::Trigger < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::CallbackInfo::WorkflowClosed < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::NewWorkflowExecutionInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::NexusOperationCancellationInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::PendingActivityInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::PendingChildExecutionInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::PendingNexusOperationInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::PendingWorkflowTaskInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::ResetPointInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::ResetPoints < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::WorkflowExecutionConfig < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::Workflow::V1::WorkflowExecutionInfo < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/api/workflowservice/v1/request_response.rb#47
module Temporalio::Api::WorkflowService; end

# source://temporalio//lib/temporalio/api/workflowservice/v1/request_response.rb#48
module Temporalio::Api::WorkflowService::V1; end

class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::CreateScheduleRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::CreateScheduleResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListNamespacesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListNamespacesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListSchedulesRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListSchedulesResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PatchScheduleRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PatchScheduleResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PauseActivityByIdRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PauseActivityByIdResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::ResetActivityByIdRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ResetActivityByIdResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest::Capabilities < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ShutdownWorkerRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::ShutdownWorkerResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdRequest < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdRequest::ResetOperation < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdRequest::ResumeOperation < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateActivityOptionsByIdRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateActivityOptionsByIdResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse < Google::Protobuf::AbstractMessage
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest < Google::Protobuf::AbstractMessage; end
class Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse < Google::Protobuf::AbstractMessage; end

# Cancellation representation, often known as a "cancellation token". This is used by clients, activities, and
# workflows to represent cancellation in a thread/fiber-safe way.
#
# source://temporalio//lib/temporalio/cancellation.rb#9
class Temporalio::Cancellation
  # Create a new cancellation.
  #
  # This is usually created and destructured into a tuple with the second value being the proc to invoke to cancel.
  # For example: `cancel, cancel_proc = Temporalio::Cancellation.new`. This is done via {to_ary} which returns a proc
  # to issue the cancellation in the second value of the array.
  #
  # @param parents [Array<Cancellation>] Parent cancellations to link this one to. This cancellation will be canceled
  #   when any parents are canceled.
  # @return [Cancellation] a new instance of Cancellation
  #
  # source://temporalio//lib/temporalio/cancellation.rb#18
  def initialize(*parents); end

  # Advanced call to invoke a proc or block on cancel. The callback usually needs to be quick and thread-safe since it
  # is called in the canceler's thread. Usually the callback will just be something like pushing on a queue or
  # signaling a condition variable. If the cancellation is already canceled, the callback is called inline before
  # returning.
  #
  # @note WARNING: This is advanced API, users should use {wait} or similar.
  # @raise [ArgumentError]
  # @return [Object] Key that can be used with {remove_cancel_callback} or `nil`` if run immediately.
  # @yield Accepts block if not using `proc`.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#120
  def add_cancel_callback(&); end

  # @return [Boolean] Whether this cancellation is canceled.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#30
  def canceled?; end

  # @return [String, nil] Reason for cancellation. Can be nil if not canceled or no reason provided.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#35
  def canceled_reason; end

  # Raise an error if this cancellation is canceled.
  #
  # @param err [Exception] Error to raise.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#52
  def check!(err = T.unsafe(nil)); end

  # @return [Boolean] Whether a cancel is pending but currently shielded.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#40
  def pending_canceled?; end

  # @return [String, nil] Reason for pending cancellation. Can be nil if not pending canceled or no reason provided.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#45
  def pending_canceled_reason; end

  # Remove a cancel callback using the key returned from {add_cancel_callback}.
  #
  # @param key [Object] Key returned from {add_cancel_callback}.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#137
  def remove_cancel_callback(key); end

  # Shield the given block from cancellation. This means any cancellation that occurs while shielded code is running
  # will be set as "pending" and will not take effect until after the block completes. If shield calls are nested, the
  # cancellation remains "pending" until the last shielded block ends.
  #
  # @return [Object] Result of the block.
  # @yield Requires a block to run under shield.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#94
  def shield; end

  # @return [Array(Cancellation, Proc)] Self and a proc to call to cancel that accepts an optional string `reason`
  #   keyword argument. As a general practice, only the creator of the cancellation should be the one controlling its
  #   cancellation.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#59
  def to_ary; end

  # Wait on this to be canceled. This is backed by a {::ConditionVariable} outside of workflows or
  # {Workflow.wait_condition} inside of workflows.
  #
  # source://temporalio//lib/temporalio/cancellation.rb#65
  def wait; end

  private

  # source://temporalio//lib/temporalio/cancellation.rb#146
  def on_cancel(reason:); end

  # Expects to be called inside mutex by caller, returns callbacks to run
  #
  # source://temporalio//lib/temporalio/cancellation.rb#160
  def prepare_cancel(reason:); end
end

# Client for accessing Temporal.
#
# Most users will use {connect} to connect a client. The {workflow_service} method provides access to a raw gRPC
# client. To create another client on the same connection, like for a different namespace, {options} may be used to
# get the options as a struct which can then be dup'd, altered, and splatted as kwargs to the constructor (e.g.
# +Client.new(**my_options.to_h)+).
#
# Clients are thread-safe and are meant to be reused for the life of the application. They are built to work in both
# synchronous and asynchronous contexts. Internally they use callbacks based on {::Queue} which means they are
# Fiber-compatible.
#
# source://temporalio//lib/temporalio/client/interceptor.rb#4
class Temporalio::Client
  # Create a client from an existing connection. Most users will prefer {connect} instead. Parameters here match
  # {Options} returned from {options} by intention so options can be dup'd, altered, and splatted to create a new
  # client.
  #
  # @param connection [Connection] Existing connection to create a client from.
  # @param namespace [String] Namespace to use for client calls.
  # @param data_converter [Converters::DataConverter] Data converter to use for all data conversions to/from payloads.
  # @param interceptors [Array<Interceptor>] Set of interceptors that are chained together to allow intercepting of
  #   client calls. The earlier interceptors wrap the later ones. Any interceptors that also implement worker
  #   interceptor will be used as worker interceptors too so they should not be given separately when creating a
  #   worker.
  # @param logger [Logger] Logger to use for this client and any workers made from this client. Defaults to stdout
  #   with warn level. Callers setting this logger are responsible for closing it.
  # @param default_workflow_query_reject_condition [WorkflowQueryRejectCondition, nil] Default rejection condition for
  #   workflow queries if not set during query. See {WorkflowHandle.query} for details on the rejection condition.
  # @return [Client] a new instance of Client
  # @see connect
  #
  # source://temporalio//lib/temporalio/client.rb#141
  def initialize(connection:, namespace:, data_converter: T.unsafe(nil), interceptors: T.unsafe(nil),
                 logger: T.unsafe(nil), default_workflow_query_reject_condition: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/client.rb#441
  def _impl; end

  # Get an async activity handle.
  #
  # @param task_token_or_id_reference [String, ActivityIDReference] Task token string or activity ID reference.
  # @return [AsyncActivityHandle]
  #
  # source://temporalio//lib/temporalio/client.rb#430
  def async_activity_handle(task_token_or_id_reference); end

  # @return [Connection] Underlying connection for this client.
  #
  # source://temporalio//lib/temporalio/client.rb#164
  def connection; end

  # Count workflows.
  #
  # @param query [String, nil] A Temporal visibility list filter.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [WorkflowExecutionCount] Count of workflows.
  # @see https://docs.temporal.io/visibility
  #
  # source://temporalio//lib/temporalio/client.rb#361
  def count_workflows(query = T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Create a schedule and return its handle.
  #
  # @param id [String] Unique identifier of the schedule.
  # @param schedule [Schedule] Schedule to create.
  # @param trigger_immediately [Boolean] If true, trigger one action immediately when creating the schedule.
  # @param backfills [Array<Schedule::Backfill>] Set of time periods to take actions on as if that time passed right
  #   now.
  # @param memo [Hash<String, Object>, nil] Memo for the schedule. Memo for a scheduled workflow is part of the
  #   schedule action.
  # @param search_attributes [SearchAttributes, nil] Search attributes for the schedule. Search attributes for a
  #   scheduled workflow are part of the scheduled action.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::ScheduleAlreadyRunningError] If a schedule with this ID is already running.
  # @raise [Error::RPCError] RPC error from call.
  # @return [ScheduleHandle] A handle to the created schedule.
  #
  # source://temporalio//lib/temporalio/client.rb#381
  def create_schedule(id, schedule, trigger_immediately: T.unsafe(nil), backfills: T.unsafe(nil), memo: T.unsafe(nil),
                      search_attributes: T.unsafe(nil), rpc_options: T.unsafe(nil))
  end

  # @return [DataConverter] Data converter used by this client.
  #
  # source://temporalio//lib/temporalio/client.rb#174
  def data_converter; end

  # Start a workflow and wait for its result. This is a shortcut for {start_workflow} + {WorkflowHandle.result}.
  #
  # @param workflow [Class<Workflow::Definition>, Symbol, String] Workflow definition class or workflow name.
  # @param args [Array<Object>] Arguments to the workflow.
  # @param id [String] Unique identifier for the workflow execution.
  # @param task_queue [String] Task queue to run the workflow on.
  # @param execution_timeout [Float, nil] Total workflow execution timeout in seconds including retries and continue
  #   as new.
  # @param run_timeout [Float, nil] Timeout of a single workflow run in seconds.
  # @param task_timeout [Float, nil] Timeout of a single workflow task in seconds.
  # @param id_reuse_policy [WorkflowIDReusePolicy] How already-existing IDs are treated.
  # @param id_conflict_policy [WorkflowIDConflictPolicy] How already-running workflows of the same ID are treated.
  #   Default is unspecified which effectively means fail the start attempt. This cannot be set if `id_reuse_policy`
  #   is set to terminate if running.
  # @param retry_policy [RetryPolicy, nil] Retry policy for the workflow.
  # @param cron_schedule [String, nil] Cron schedule. Users should use schedules instead of this.
  # @param memo [Hash{String, Symbol => Object}, nil] Memo for the workflow.
  # @param search_attributes [SearchAttributes, nil] Search attributes for the workflow.
  # @param start_delay [Float, nil] Amount of time in seconds to wait before starting the workflow. This does not work
  #   with `cron_schedule`.
  # @param request_eager_start [Boolean] Potentially reduce the latency to start this workflow by encouraging the
  #   server to start it on a local worker running with this same client. This is currently experimental.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowAlreadyStartedError] Workflow already exists.
  # @raise [Error::WorkflowFailedError] Workflow failed with +cause+ as the cause.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Object] Successful result of the workflow.
  #
  # source://temporalio//lib/temporalio/client.rb#282
  #
  # NOTE: Manually removed due to arity issues, see README
  # def execute_workflow(workflow, *args, id:, task_queue:, execution_timeout: T.unsafe(nil), run_timeout: T.unsafe(nil),
  #                      task_timeout: T.unsafe(nil), id_reuse_policy: T.unsafe(nil), id_conflict_policy: T.unsafe(nil), retry_policy: T.unsafe(nil), cron_schedule: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil), start_delay: T.unsafe(nil), request_eager_start: T.unsafe(nil), rpc_options: T.unsafe(nil))
  # end

  # List schedules.
  #
  # Note, this list is eventually consistent. Therefore if a schedule is added or deleted, it may not be available in
  # the list immediately.
  #
  # @param query [String] A Temporal visibility list filter.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Enumerator<Schedule::List::Description>] Enumerable schedules.
  # @see https://docs.temporal.io/visibility
  #
  # source://temporalio//lib/temporalio/client.rb#422
  def list_schedules(query = T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # List workflows.
  #
  # @param query [String, nil] A Temporal visibility list filter.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Enumerator<WorkflowExecution>] Enumerable workflow executions.
  # @see https://docs.temporal.io/visibility
  #
  # source://temporalio//lib/temporalio/client.rb#347
  def list_workflows(query = T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # @return [String] Namespace used in calls by this client.
  #
  # source://temporalio//lib/temporalio/client.rb#169
  def namespace; end

  # @return [Connection::OperatorService] Raw gRPC operator service.
  #
  # source://temporalio//lib/temporalio/client.rb#184
  def operator_service; end

  # @return [Options] Frozen options for this client which has the same attributes as {initialize}.
  #
  # source://temporalio//lib/temporalio/client.rb#122
  def options; end

  # Get a schedule handle to an existing schedule for the given ID.
  #
  # @param id [String] Schedule ID to get a handle to.
  # @return [ScheduleHandle] The schedule handle.
  #
  # source://temporalio//lib/temporalio/client.rb#405
  def schedule_handle(id); end

  # Start a workflow and return its handle.
  #
  # @param workflow [Class<Workflow::Definition>, String, Symbol] Workflow definition class or workflow name.
  # @param args [Array<Object>] Arguments to the workflow.
  # @param id [String] Unique identifier for the workflow execution.
  # @param task_queue [String] Task queue to run the workflow on.
  # @param execution_timeout [Float, nil] Total workflow execution timeout in seconds including retries and continue
  #   as new.
  # @param run_timeout [Float, nil] Timeout of a single workflow run in seconds.
  # @param task_timeout [Float, nil] Timeout of a single workflow task in seconds.
  # @param id_reuse_policy [WorkflowIDReusePolicy] How already-existing IDs are treated.
  # @param id_conflict_policy [WorkflowIDConflictPolicy] How already-running workflows of the same ID are treated.
  #   Default is unspecified which effectively means fail the start attempt. This cannot be set if `id_reuse_policy`
  #   is set to terminate if running.
  # @param retry_policy [RetryPolicy, nil] Retry policy for the workflow.
  # @param cron_schedule [String, nil] Cron schedule. Users should use schedules instead of this.
  # @param memo [Hash{String, Symbol => Object}, nil] Memo for the workflow.
  # @param search_attributes [SearchAttributes, nil] Search attributes for the workflow.
  # @param start_delay [Float, nil] Amount of time in seconds to wait before starting the workflow. This does not work
  #   with `cron_schedule`.
  # @param request_eager_start [Boolean] Potentially reduce the latency to start this workflow by encouraging the
  #   server to start it on a local worker running with this same client. This is currently experimental.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowAlreadyStartedError] Workflow already exists.
  # @raise [Error::RPCError] RPC error from call.
  # @return [WorkflowHandle] A workflow handle to the started workflow.
  #
  # source://temporalio//lib/temporalio/client.rb#215
  #
  # NOTE: Manually removed due to arity issues, see README
  # def start_workflow(workflow, *args, id:, task_queue:, execution_timeout: T.unsafe(nil), run_timeout: T.unsafe(nil),
  #                    task_timeout: T.unsafe(nil), id_reuse_policy: T.unsafe(nil), id_conflict_policy: T.unsafe(nil), retry_policy: T.unsafe(nil), cron_schedule: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil), start_delay: T.unsafe(nil), request_eager_start: T.unsafe(nil), rpc_options: T.unsafe(nil))
  # end

  # Get a workflow handle to an existing workflow by its ID.
  #
  # @param workflow_id [String] Workflow ID to get a handle to.
  # @param run_id [String, nil] Run ID that will be used for all calls. Many choose to leave this unset which ensures
  #   interactions occur on the latest of the workflow ID.
  # @param first_execution_run_id [String, nil] First execution run ID used for some calls like cancellation and
  #   termination to ensure the affected workflow is only within the same chain as this given run ID.
  # @return [WorkflowHandle] The workflow handle.
  #
  # source://temporalio//lib/temporalio/client.rb#329
  def workflow_handle(workflow_id, run_id: T.unsafe(nil), first_execution_run_id: T.unsafe(nil)); end

  # @return [Connection::WorkflowService] Raw gRPC workflow service.
  #
  # source://temporalio//lib/temporalio/client.rb#179
  def workflow_service; end

  class << self
    # Connect to Temporal server. This is a shortcut for +Connection.new+ followed by +Client.new+.
    #
    # @param target_host [String] +host:port+ for the Temporal server. For local development, this is often
    #   +localhost:7233+.
    # @param namespace [String] Namespace to use for client calls.
    # @param api_key [String, nil] API key for Temporal. This becomes the +Authorization+ HTTP header with +"Bearer "+
    #   prepended. This is only set if RPC metadata doesn't already have an +authorization+ key.
    # @param tls [Boolean, Connection::TLSOptions] If false, do not use TLS. If true, use system default TLS options. If
    #   TLS options are present, those TLS options will be used.
    # @param data_converter [Converters::DataConverter] Data converter to use for all data conversions to/from payloads.
    # @param interceptors [Array<Interceptor>] Set of interceptors that are chained together to allow intercepting of
    #   client calls. The earlier interceptors wrap the later ones. Any interceptors that also implement worker
    #   interceptor will be used as worker interceptors too so they should not be given separately when creating a
    #   worker.
    # @param logger [Logger] Logger to use for this client and any workers made from this client. Defaults to stdout
    #   with warn level. Callers setting this logger are responsible for closing it.
    # @param default_workflow_query_reject_condition [WorkflowQueryRejectCondition, nil] Default rejection
    #   condition for workflow queries if not set during query. See {WorkflowHandle.query} for details on the
    #   rejection condition.
    # @param rpc_metadata [Hash<String, String>] Headers to use for all calls to the server. Keys here can be overriden
    #   by per-call RPC metadata keys.
    # @param rpc_retry [Connection::RPCRetryOptions] Retry options for direct service calls (when opted in) or all
    #   high-level calls made by this client (which all opt-in to retries by default).
    # @param identity [String] Identity for this client.
    # @param keep_alive [Connection::KeepAliveOptions] Keep-alive options for the client connection. Can be set to +nil+
    #   to disable.
    # @param http_connect_proxy [Connection::HTTPConnectProxyOptions, nil] Options for HTTP CONNECT proxy.
    # @param runtime [Runtime] Runtime for this client.
    # @param lazy_connect [Boolean] If true, the client will not connect until the first call is attempted or a worker
    #   is created with it. Lazy clients cannot be used for workers if they have not performed a connection.
    # @return [Client] Connected client.
    # @see Connection.initialize
    # @see initialize
    #
    # source://temporalio//lib/temporalio/client.rb#83
    def connect(target_host, namespace, api_key: T.unsafe(nil), tls: T.unsafe(nil), data_converter: T.unsafe(nil),
                interceptors: T.unsafe(nil), logger: T.unsafe(nil), default_workflow_query_reject_condition: T.unsafe(nil), rpc_metadata: T.unsafe(nil), rpc_retry: T.unsafe(nil), identity: T.unsafe(nil), keep_alive: T.unsafe(nil), http_connect_proxy: T.unsafe(nil), runtime: T.unsafe(nil), lazy_connect: T.unsafe(nil))
    end
  end
end

# Reference to an existing activity by its workflow ID, run ID, and activity ID.
#
# source://temporalio//lib/temporalio/client/activity_id_reference.rb#10
class Temporalio::Client::ActivityIDReference
  # Create an activity ID reference.
  #
  # @param workflow_id [String] ID for the workflow.
  # @param run_id [String, nil] Run ID for the workflow.
  # @param activity_id [String] ID for the workflow.
  # @return [ActivityIDReference] a new instance of ActivityIDReference
  #
  # source://temporalio//lib/temporalio/client/activity_id_reference.rb#25
  def initialize(workflow_id:, run_id:, activity_id:); end

  # @return [String] ID for the activity.
  #
  # source://temporalio//lib/temporalio/client/activity_id_reference.rb#18
  def activity_id; end

  # @return [String, nil] Run ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/activity_id_reference.rb#15
  def run_id; end

  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/activity_id_reference.rb#12
  def workflow_id; end
end

# Handle representing an external activity for completion and heartbeat. This is usually created via
# {Client.async_activity_handle}.
#
# source://temporalio//lib/temporalio/client/async_activity_handle.rb#12
class Temporalio::Client::AsyncActivityHandle
  # @return [AsyncActivityHandle] a new instance of AsyncActivityHandle
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#21
  def initialize(client:, task_token:, id_reference:); end

  # Complete the activity.
  #
  # @param result [Object, nil] Result of the activity.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#43
  def complete(result = T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Fail the activity.
  #
  # @param error [Exception] Error for the activity.
  # @param last_heartbeat_details [Array<Object>] Last heartbeat details for the activity.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#56
  def fail(error, last_heartbeat_details: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Record a heartbeat for the activity.
  #
  # @param details [Array<Object>] Details of the heartbeat.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#31
  def heartbeat(*details, rpc_options: T.unsafe(nil)); end

  # {task_token}.
  #
  # @return [ActivityIDReference, nil] Activity ID reference if created with one. Mutually exclusive with
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#18
  def id_reference; end

  # Report the activity as canceled.
  #
  # @param details [Array<Object>] Cancellation details.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [AsyncActivityCanceledError] If the activity has been canceled.
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#70
  def report_cancellation(*details, rpc_options: T.unsafe(nil)); end

  # @return [String, nil] Task token if created with a task token. Mutually exclusive with {id_reference}.
  #
  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#14
  def task_token; end

  private

  # source://temporalio//lib/temporalio/client/async_activity_handle.rb#80
  def task_token_or_id_reference; end
end

# Connection to Temporal server that is not namespace specific. Most users will use {Client.connect} instead of this
# directly.
#
# source://temporalio//lib/temporalio/client/connection/service.rb#9
class Temporalio::Client::Connection
  # Connect to Temporal server. Most users will use {Client.connect} instead of this directly. Parameters here match
  # {Options} returned from {options} by intention so options can be dup'd, altered, splatted to create a new
  # connection.
  #
  # @param target_host [String] +host:port+ for the Temporal server. For local development, this is often
  #   +localhost:7233+.
  # @param api_key [String, nil] API key for Temporal. This becomes the +Authorization+ HTTP header with +"Bearer "+
  #   prepended. This is only set if RPC metadata doesn't already have an +authorization+ key.
  # @param tls [Boolean, TLSOptions] If false, do not use TLS. If true, use system default TLS options. If TLS
  #   options are present, those TLS options will be used.
  # @param rpc_metadata [Hash<String, String>] Headers to use for all calls to the server. Keys here can be
  #   overriden by per-call RPC metadata keys.
  # @param rpc_retry [RPCRetryOptions] Retry options for direct service calls (when opted in) or all high-level
  #   calls made by this client (which all opt-in to retries by default).
  # @param identity [String] Identity for this client.
  # @param keep_alive [KeepAliveOptions] Keep-alive options for the client connection. Can be set to +nil+ to
  #   disable.
  # @param http_connect_proxy [HTTPConnectProxyOptions, nil] Options for HTTP CONNECT proxy.
  # @param runtime [Runtime] Runtime for this client.
  # @param lazy_connect [Boolean] If true, there is no connection until the first call is attempted or a worker
  #   is created with it. Clients from lazy connections cannot be used for workers if they have not performed a
  #   connection.
  # @return [Connection] a new instance of Connection
  # @see Client.connect
  #
  # source://temporalio//lib/temporalio/client/connection.rb#172
  def initialize(target_host:, api_key: T.unsafe(nil), tls: T.unsafe(nil), rpc_metadata: T.unsafe(nil),
                 rpc_retry: T.unsafe(nil), identity: T.unsafe(nil), keep_alive: T.unsafe(nil), http_connect_proxy: T.unsafe(nil), runtime: T.unsafe(nil), lazy_connect: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/client/connection.rb#255
  def _core_client; end

  # @return [String, nil] API key. This is a shortcut for `options.api_key`.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#222
  def api_key; end

  # Set the API key for all future calls. This also makes a new object for {options} with the changes.
  #
  # @param new_key [String, nil] New API key.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#229
  def api_key=(new_key); end

  # @return [CloudService] Raw gRPC cloud service.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#146
  def cloud_service; end

  # @return [Boolean] Whether this connection is connected. This is always `true` unless `lazy_connect` option was
  #   originally set, in which case this will be `false` until the first call is made.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#217
  def connected?; end

  # @return [String] Client identity.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#211
  def identity; end

  # @return [OperatorService] Raw gRPC operator service.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#143
  def operator_service; end

  # @return [Options] Frozen options for this client which has the same attributes as {initialize}. Note that if
  #   {api_key=} or {rpc_metadata=} are updated, the options object is replaced with those changes (it is not
  #   mutated in place).
  #
  # source://temporalio//lib/temporalio/client/connection.rb#137
  def options; end

  # @return [Hash<String, String>] RPC metadata (aka HTTP headers). This is a shortcut for `options.rpc_metadata`.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#238
  def rpc_metadata; end

  # Set the RPC metadata (aka HTTP headers) for all future calls. This also makes a new object for {options} with
  # the changes.
  #
  # @param rpc_metadata [Hash<String, String>] New API key.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#246
  def rpc_metadata=(rpc_metadata); end

  # @return [String] Target host this connection is connected to.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#206
  def target_host; end

  # @return [WorkflowService] Raw gRPC workflow service.
  #
  # source://temporalio//lib/temporalio/client/connection.rb#140
  def workflow_service; end

  private

  # source://temporalio//lib/temporalio/client/connection.rb#268
  def new_core_client; end
end

# CloudService API.
#
# source://temporalio//lib/temporalio/client/connection/cloud_service.rb#13
class Temporalio::Client::Connection::CloudService < Temporalio::Client::Connection::Service
  # @return [CloudService] a new instance of CloudService
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#15
  def initialize(connection); end

  # Calls CloudService.AddNamespaceRegion API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::AddNamespaceRegionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::AddNamespaceRegionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#234
  def add_namespace_region(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateApiKey API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateApiKeyRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateApiKeyResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#309
  def create_api_key(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateNamespace API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#129
  def create_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateNamespaceExportSink API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceExportSinkRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateNamespaceExportSinkResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#639
  def create_namespace_export_sink(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#384
  def create_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateServiceAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateServiceAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateServiceAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#519
  def create_service_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateUser API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateUserRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateUserResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#54
  def create_user(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.CreateUserGroup API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::CreateUserGroupRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::CreateUserGroupResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#459
  def create_user_group(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteApiKey API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteApiKeyRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteApiKeyResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#339
  def delete_api_key(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteNamespace API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#204
  def delete_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteNamespaceExportSink API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceExportSinkRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteNamespaceExportSinkResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#699
  def delete_namespace_export_sink(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#414
  def delete_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteServiceAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteServiceAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteServiceAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#579
  def delete_service_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteUser API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteUserRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteUserResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#84
  def delete_user(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.DeleteUserGroup API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::DeleteUserGroupRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::DeleteUserGroupResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#489
  def delete_user_group(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.FailoverNamespaceRegion API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::FailoverNamespaceRegionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::FailoverNamespaceRegionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#219
  def failover_namespace_region(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#609
  def get_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetApiKey API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetApiKeyRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetApiKeyResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#294
  def get_api_key(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetApiKeys API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetApiKeysRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetApiKeysResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#279
  def get_api_keys(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetAsyncOperation API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetAsyncOperationRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetAsyncOperationResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#114
  def get_async_operation(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNamespace API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#159
  def get_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNamespaceExportSink API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinkRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinkResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#654
  def get_namespace_export_sink(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNamespaceExportSinks API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinksRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNamespaceExportSinksResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#669
  def get_namespace_export_sinks(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNamespaces API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNamespacesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNamespacesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#144
  def get_namespaces(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#369
  def get_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetNexusEndpoints API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetNexusEndpointsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#354
  def get_nexus_endpoints(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetRegion API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetRegionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetRegionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#264
  def get_region(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetRegions API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetRegionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetRegionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#249
  def get_regions(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetServiceAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#534
  def get_service_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetServiceAccounts API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetServiceAccountsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#549
  def get_service_accounts(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetUsage API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetUsageRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetUsageResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#594
  def get_usage(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetUser API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetUserRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetUserResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#39
  def get_user(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetUserGroup API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetUserGroupRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetUserGroupResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#444
  def get_user_group(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetUserGroups API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetUserGroupsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetUserGroupsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#429
  def get_user_groups(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.GetUsers API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::GetUsersRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::GetUsersResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#24
  def get_users(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.RenameCustomSearchAttribute API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::RenameCustomSearchAttributeRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::RenameCustomSearchAttributeResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#189
  def rename_custom_search_attribute(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.SetUserGroupNamespaceAccess API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::SetUserGroupNamespaceAccessRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::SetUserGroupNamespaceAccessResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#504
  def set_user_group_namespace_access(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.SetUserNamespaceAccess API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::SetUserNamespaceAccessRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::SetUserNamespaceAccessResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#99
  def set_user_namespace_access(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#624
  def update_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateApiKey API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateApiKeyRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateApiKeyResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#324
  def update_api_key(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateNamespace API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#174
  def update_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateNamespaceExportSink API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceExportSinkRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateNamespaceExportSinkResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#684
  def update_namespace_export_sink(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#399
  def update_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateServiceAccount API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateServiceAccountRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateServiceAccountResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#564
  def update_service_account(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateUser API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateUserRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateUserResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#69
  def update_user(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.UpdateUserGroup API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::UpdateUserGroupRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::UpdateUserGroupResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#474
  def update_user_group(request, rpc_options: T.unsafe(nil)); end

  # Calls CloudService.ValidateNamespaceExportSink API call.
  #
  # @param request [Temporalio::Api::Cloud::CloudService::V1::ValidateNamespaceExportSinkRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::Cloud::CloudService::V1::ValidateNamespaceExportSinkResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/cloud_service.rb#714
  def validate_namespace_export_sink(request, rpc_options: T.unsafe(nil)); end
end

# Options for HTTP CONNECT proxy for client connections.
#
# source://temporalio//lib/temporalio/client/connection.rb#132
class Temporalio::Client::Connection::HTTPConnectProxyOptions < Data
  # @return [String, nil] Pass for HTTP basic auth for the proxy, must be combined with {basic_auth_user}.
  def basic_auth_pass; end

  # @return [String, nil] User for HTTP basic auth for the proxy, must be combined with {basic_auth_pass}.
  def basic_auth_user; end

  # @return [String] Target host:port for the HTTP CONNECT proxy.
  def target_host; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Keep-alive options for client connections. For most users, the default is preferred.
#
# source://temporalio//lib/temporalio/client/connection.rb#112
class Temporalio::Client::Connection::KeepAliveOptions < Data
  # @return [KeepAliveOptions] a new instance of KeepAliveOptions
  #
  # source://temporalio//lib/temporalio/client/connection.rb#113
  def initialize(interval: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # @return [Float] Interval to send HTTP2 keep alive pings, default 30.0.
  def interval; end

  # @return [Float] Timeout that the keep alive must be responded to within or the connection will be closed,
  #   default 15.0.
  def timeout; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# OperatorService API.
#
# source://temporalio//lib/temporalio/client/connection/operator_service.rb#13
class Temporalio::Client::Connection::OperatorService < Temporalio::Client::Connection::Service
  # @return [OperatorService] a new instance of OperatorService
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#15
  def initialize(connection); end

  # Calls OperatorService.AddOrUpdateRemoteCluster API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::AddOrUpdateRemoteClusterRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::AddOrUpdateRemoteClusterResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#84
  def add_or_update_remote_cluster(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.AddSearchAttributes API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::AddSearchAttributesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::AddSearchAttributesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#24
  def add_search_attributes(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.CreateNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::CreateNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::CreateNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#144
  def create_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.DeleteNamespace API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::DeleteNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::DeleteNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#69
  def delete_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.DeleteNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::DeleteNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::DeleteNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#174
  def delete_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.GetNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::GetNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::GetNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#129
  def get_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.ListClusters API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::ListClustersRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::ListClustersResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#114
  def list_clusters(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.ListNexusEndpoints API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::ListNexusEndpointsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::ListNexusEndpointsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#189
  def list_nexus_endpoints(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.ListSearchAttributes API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::ListSearchAttributesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::ListSearchAttributesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#54
  def list_search_attributes(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.RemoveRemoteCluster API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::RemoveRemoteClusterRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::RemoveRemoteClusterResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#99
  def remove_remote_cluster(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.RemoveSearchAttributes API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::RemoveSearchAttributesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::RemoveSearchAttributesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#39
  def remove_search_attributes(request, rpc_options: T.unsafe(nil)); end

  # Calls OperatorService.UpdateNexusEndpoint API call.
  #
  # @param request [Temporalio::Api::OperatorService::V1::UpdateNexusEndpointRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::OperatorService::V1::UpdateNexusEndpointResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/operator_service.rb#159
  def update_nexus_endpoint(request, rpc_options: T.unsafe(nil)); end
end

# Options as returned from {options} for +**to_h+ splat use in {initialize}. See {initialize} for details.
#
# source://temporalio//lib/temporalio/client/connection.rb#31
class Temporalio::Client::Connection::Options < Data
  def api_key; end
  def http_connect_proxy; end
  def identity; end
  def keep_alive; end
  def lazy_connect; end
  def rpc_metadata; end
  def rpc_retry; end
  def runtime; end
  def target_host; end
  def tls; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Retry options for server calls when retry is enabled (which it is by default on all high-level {Client} calls).
# For most users, the default is preferred.
#
# source://temporalio//lib/temporalio/client/connection.rb#87
class Temporalio::Client::Connection::RPCRetryOptions < Data
  # @return [RPCRetryOptions] a new instance of RPCRetryOptions
  #
  # source://temporalio//lib/temporalio/client/connection.rb#88
  def initialize(initial_interval: T.unsafe(nil), randomization_factor: T.unsafe(nil), multiplier: T.unsafe(nil),
                 max_interval: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), max_retries: T.unsafe(nil))
  end

  # @return [Float] Initial backoff interval, default 0.1.
  def initial_interval; end

  # @return [Float] Maximum total time, default 10.0. Can use 0 for no max.
  def max_elapsed_time; end

  # @return [Float] Maximum backoff interval, default 5.0.
  def max_interval; end

  # @return [Integer] Maximum number of retries, default 10.
  def max_retries; end

  # @return [Float] Backoff multiplier, default 1.5.
  def multiplier; end

  # @return [Float] Randomization jitter to add, default 0.2.
  def randomization_factor; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Base class for raw gRPC services.
#
# source://temporalio//lib/temporalio/client/connection/service.rb#11
class Temporalio::Client::Connection::Service
  # @return [Service] a new instance of Service
  #
  # source://temporalio//lib/temporalio/client/connection/service.rb#13
  def initialize(connection, service); end

  protected

  # source://temporalio//lib/temporalio/client/connection/service.rb#20
  def invoke_rpc(rpc:, request_class:, response_class:, request:, rpc_options:); end
end

# TLS options. All attributes are optional, and an empty options set just enables default TLS.
#
# source://temporalio//lib/temporalio/client/connection.rb#52
class Temporalio::Client::Connection::TLSOptions < Data
  # @return [TLSOptions] a new instance of TLSOptions
  #
  # source://temporalio//lib/temporalio/client/connection.rb#53
  def initialize(client_cert: T.unsafe(nil), client_private_key: T.unsafe(nil), server_root_ca_cert: T.unsafe(nil),
                 domain: T.unsafe(nil))
  end

  # @return [String, nil] Client certificate for mTLS. Must be combined with {client_private_key}.
  def client_cert; end

  # @return [String, nil] Client private key for mTLS. Must be combined with {client_cert}.
  def client_private_key; end

  # @return [String, nil] SNI override. This is only needed for self-hosted servers with certificates that do not
  #   match the hostname being connected to.
  def domain; end

  # @return [String, nil] Root CA certificate to validate the server certificate against. This is only needed for
  #   self-hosted servers with self-signed server certificates.
  def server_root_ca_cert; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# WorkflowService API.
#
# source://temporalio//lib/temporalio/client/connection/workflow_service.rb#13
class Temporalio::Client::Connection::WorkflowService < Temporalio::Client::Connection::Service
  # @return [WorkflowService] a new instance of WorkflowService
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#15
  def initialize(connection); end

  # Calls WorkflowService.CountWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#504
  def count_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.CreateSchedule API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::CreateScheduleRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::CreateScheduleResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#669
  def create_schedule(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DeleteSchedule API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#744
  def delete_schedule(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DeleteWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#414
  def delete_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DeprecateNamespace API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#84
  def deprecate_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DescribeBatchOperation API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#909
  def describe_batch_operation(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DescribeNamespace API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#39
  def describe_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DescribeSchedule API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#684
  def describe_schedule(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DescribeTaskQueue API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#609
  def describe_task_queue(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.DescribeWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#594
  def describe_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ExecuteMultiOperation API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#114
  def execute_multi_operation(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetClusterInfo API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#624
  def get_cluster_info(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetSearchAttributes API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#519
  def get_search_attributes(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetSystemInfo API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#639
  def get_system_info(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetWorkerBuildIdCompatibility API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#789
  def get_worker_build_id_compatibility(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetWorkerTaskReachability API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#834
  def get_worker_task_reachability(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetWorkerVersioningRules API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#819
  def get_worker_versioning_rules(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetWorkflowExecutionHistory API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#129
  def get_workflow_execution_history(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.GetWorkflowExecutionHistoryReverse API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#144
  def get_workflow_execution_history_reverse(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListArchivedWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#474
  def list_archived_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListBatchOperations API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#924
  def list_batch_operations(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListClosedWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#444
  def list_closed_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListNamespaces API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListNamespacesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListNamespacesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#54
  def list_namespaces(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListOpenWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#429
  def list_open_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListScheduleMatchingTimes API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#729
  def list_schedule_matching_times(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListSchedules API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListSchedulesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListSchedulesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#759
  def list_schedules(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListTaskQueuePartitions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#654
  def list_task_queue_partitions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ListWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#459
  def list_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PatchSchedule API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PatchScheduleRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PatchScheduleResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#714
  def patch_schedule(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PauseActivityById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PauseActivityByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PauseActivityByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#999
  def pause_activity_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PollActivityTaskQueue API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#204
  def poll_activity_task_queue(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PollNexusTaskQueue API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#939
  def poll_nexus_task_queue(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PollWorkflowExecutionUpdate API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#864
  def poll_workflow_execution_update(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.PollWorkflowTaskQueue API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#159
  def poll_workflow_task_queue(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.QueryWorkflow API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#579
  def query_workflow(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RecordActivityTaskHeartbeat API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#219
  def record_activity_task_heartbeat(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RecordActivityTaskHeartbeatById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#234
  def record_activity_task_heartbeat_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RegisterNamespace API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#24
  def register_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RequestCancelWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#339
  def request_cancel_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ResetActivityById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ResetActivityByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ResetActivityByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#1029
  def reset_activity_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ResetStickyTaskQueue API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#549
  def reset_sticky_task_queue(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ResetWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#384
  def reset_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskCanceled API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#309
  def respond_activity_task_canceled(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskCanceledById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#324
  def respond_activity_task_canceled_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskCompleted API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#249
  def respond_activity_task_completed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskCompletedById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#264
  def respond_activity_task_completed_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskFailed API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#279
  def respond_activity_task_failed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondActivityTaskFailedById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#294
  def respond_activity_task_failed_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondNexusTaskCompleted API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#954
  def respond_nexus_task_completed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondNexusTaskFailed API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#969
  def respond_nexus_task_failed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondQueryTaskCompleted API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#534
  def respond_query_task_completed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondWorkflowTaskCompleted API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#174
  def respond_workflow_task_completed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.RespondWorkflowTaskFailed API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#189
  def respond_workflow_task_failed(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ScanWorkflowExecutions API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#489
  def scan_workflow_executions(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.ShutdownWorker API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::ShutdownWorkerRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::ShutdownWorkerResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#564
  def shutdown_worker(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.SignalWithStartWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#369
  def signal_with_start_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.SignalWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#354
  def signal_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.StartBatchOperation API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#879
  def start_batch_operation(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.StartWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#99
  def start_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.StopBatchOperation API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#894
  def stop_batch_operation(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.TerminateWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#399
  def terminate_workflow_execution(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UnpauseActivityById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UnpauseActivityByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#1014
  def unpause_activity_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateActivityOptionsById API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateActivityOptionsByIdRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateActivityOptionsByIdResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#984
  def update_activity_options_by_id(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateNamespace API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#69
  def update_namespace(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateSchedule API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#699
  def update_schedule(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateWorkerBuildIdCompatibility API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#774
  def update_worker_build_id_compatibility(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateWorkerVersioningRules API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#804
  def update_worker_versioning_rules(request, rpc_options: T.unsafe(nil)); end

  # Calls WorkflowService.UpdateWorkflowExecution API call.
  #
  # @param request [Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest] API request.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @return [Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse] API response.
  #
  # source://temporalio//lib/temporalio/client/connection/workflow_service.rb#849
  def update_workflow_execution(request, rpc_options: T.unsafe(nil)); end
end

# Mixin for intercepting clients. Classes that +include+ this should implement their own {intercept_client} that
# returns their own instance of {Outbound}.
#
# may change in backwards incompatible ways. Users should not try to construct Input classes themselves.
#
# @note Input classes herein may get new required fields added and therefore the constructors of the Input classes
#
# source://temporalio//lib/temporalio/client/interceptor.rb#10
module Temporalio::Client::Interceptor
  # Method called when intercepting a client. This is called upon client creation.
  #
  # @param next_interceptor [Outbound] Next interceptor in the chain that should be called. This is usually passed
  #   to {Outbound} constructor.
  # @return [Outbound] Interceptor to be called for client calls.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#16
  def intercept_client(next_interceptor); end
end

# Input for {Outbound.backfill_schedule}.
class Temporalio::Client::Interceptor::BackfillScheduleInput < Data
  def backfills; end
  def id; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.cancel_workflow}.
class Temporalio::Client::Interceptor::CancelWorkflowInput < Data
  def first_execution_run_id; end
  def rpc_options; end
  def run_id; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.complete_async_activity}.
class Temporalio::Client::Interceptor::CompleteAsyncActivityInput < Data
  def result; end
  def rpc_options; end
  def task_token_or_id_reference; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.count_workflows}.
class Temporalio::Client::Interceptor::CountWorkflowsInput < Data
  def query; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.create_schedule}.
class Temporalio::Client::Interceptor::CreateScheduleInput < Data
  def backfills; end
  def id; end
  def memo; end
  def rpc_options; end
  def schedule; end
  def search_attributes; end
  def trigger_immediately; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.delete_schedule}.
class Temporalio::Client::Interceptor::DeleteScheduleInput < Data
  def id; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.describe_schedule}.
class Temporalio::Client::Interceptor::DescribeScheduleInput < Data
  def id; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.describe_workflow}.
class Temporalio::Client::Interceptor::DescribeWorkflowInput < Data
  def rpc_options; end
  def run_id; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.fail_async_activity}.
class Temporalio::Client::Interceptor::FailAsyncActivityInput < Data
  def error; end
  def last_heartbeat_details; end
  def rpc_options; end
  def task_token_or_id_reference; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.fetch_workflow_history_events}.
class Temporalio::Client::Interceptor::FetchWorkflowHistoryEventsInput < Data
  def event_filter_type; end
  def rpc_options; end
  def run_id; end
  def skip_archival; end
  def wait_new_event; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.heartbeat_async_activity}.
class Temporalio::Client::Interceptor::HeartbeatAsyncActivityInput < Data
  def details; end
  def rpc_options; end
  def task_token_or_id_reference; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.list_schedules}.
class Temporalio::Client::Interceptor::ListSchedulesInput < Data
  def query; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.list_workflows}.
class Temporalio::Client::Interceptor::ListWorkflowsInput < Data
  def query; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Outbound interceptor for intercepting client calls. This should be extended by users needing to intercept client
# actions.
#
# source://temporalio//lib/temporalio/client/interceptor.rb#224
class Temporalio::Client::Interceptor::Outbound
  # Initialize outbound with the next interceptor in the chain.
  #
  # @param next_interceptor [Outbound] Next interceptor in the chain.
  # @return [Outbound] a new instance of Outbound
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#231
  def initialize(next_interceptor); end

  # Called for every {ScheduleHandle.backfill} call.
  #
  # @param input [BackfillScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#339
  def backfill_schedule(input); end

  # Called for every {WorkflowHandle.cancel} call.
  #
  # @param input [CancelWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#309
  def cancel_workflow(input); end

  # Called for every {AsyncActivityHandle.complete} call.
  #
  # @param input [CompleteAsyncActivityInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#396
  def complete_async_activity(input); end

  # Called for every {Client.count_workflows} call.
  #
  # @param input [CountWorkflowsInput] Input.
  # @return [WorkflowExecutionCount] Workflow count.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#255
  def count_workflows(input); end

  # Called for every {Client.create_schedule} call.
  #
  # @param input [CreateScheduleInput] Input.
  # @return [ScheduleHandle] Schedule handle.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#324
  def create_schedule(input); end

  # Called for every {ScheduleHandle.delete} call.
  #
  # @param input [DeleteScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#346
  def delete_schedule(input); end

  # Called for every {ScheduleHandle.describe} call.
  #
  # @param input [DescribeScheduleInput] Input.
  # @return [Schedule::Description] Schedule description.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#354
  def describe_schedule(input); end

  # Called for every {WorkflowHandle.describe} call.
  #
  # @param input [DescribeWorkflowInput] Input.
  # @return [WorkflowExecution::Description] Workflow description.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#263
  def describe_workflow(input); end

  # Called for every {AsyncActivityHandle.fail} call.
  #
  # @param input [FailAsyncActivityInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#403
  def fail_async_activity(input); end

  # Called everytime the client needs workflow history. This includes getting the result.
  #
  # @param input [FetchWorkflowHistoryEventsInput] Input.
  # @return [Enumerator<Api::History::V1::HistoryEvent>] Event enumerator.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#271
  def fetch_workflow_history_events(input); end

  # Called for every {AsyncActivityHandle.heartbeat} call.
  #
  # @param input [HeartbeatAsyncActivityInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#389
  def heartbeat_async_activity(input); end

  # Called for every {Client.list_schedules} call.
  #
  # @param input [ListSchedulesInput] Input.
  # @return [Enumerator<Schedule::List::Description>] Enumerable schedules.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#332
  def list_schedules(input); end

  # Called for every {Client.list_workflows} call.
  #
  # @param input [ListWorkflowsInput] Input.
  # @return [Enumerator<WorkflowExecution>] Enumerable workflow executions.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#247
  def list_workflows(input); end

  # @return [Outbound] Next interceptor in the chain.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#226
  def next_interceptor; end

  # Called for every {ScheduleHandle.pause} call.
  #
  # @param input [PauseScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#361
  def pause_schedule(input); end

  # Called when polling for update result.
  #
  # @param input [PollWorkflowUpdateInput] Input.
  # @return [Api::Update::V1::Outcome] Update outcome.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#302
  def poll_workflow_update(input); end

  # Called for every {WorkflowHandle.query} call.
  #
  # @param input [QueryWorkflowInput] Input.
  # @return [Object, nil] Query result.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#286
  def query_workflow(input); end

  # Called for every {AsyncActivityHandle.report_cancellation} call.
  #
  # @param input [ReportCancellationAsyncActivityInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#410
  def report_cancellation_async_activity(input); end

  # Called for every {WorkflowHandle.signal} call.
  #
  # @param input [SignalWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#278
  def signal_workflow(input); end

  # Called for every {Client.start_workflow} and {Client.execute_workflow} call.
  #
  # @param input [StartWorkflowInput] Input.
  # @return [WorkflowHandle] Workflow handle.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#239
  def start_workflow(input); end

  # Called for every {WorkflowHandle.start_update} call.
  #
  # @param input [StartWorkflowUpdateInput] Input.
  # @return [WorkflowUpdateHandle] Update handle.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#294
  def start_workflow_update(input); end

  # Called for every {WorkflowHandle.terminate} call.
  #
  # @param input [TerminateWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#316
  def terminate_workflow(input); end

  # Called for every {ScheduleHandle.trigger} call.
  #
  # @param input [TriggerScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#368
  def trigger_schedule(input); end

  # Called for every {ScheduleHandle.unpause} call.
  #
  # @param input [UnpauseScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#375
  def unpause_schedule(input); end

  # Called for every {ScheduleHandle.update} call.
  #
  # @param input [UpdateScheduleInput] Input.
  #
  # source://temporalio//lib/temporalio/client/interceptor.rb#382
  def update_schedule(input); end
end

# Input for {Outbound.pause_schedule}.
class Temporalio::Client::Interceptor::PauseScheduleInput < Data
  def id; end
  def note; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.poll_workflow_update}.
class Temporalio::Client::Interceptor::PollWorkflowUpdateInput < Data
  def rpc_options; end
  def run_id; end
  def update_id; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.query_workflow}.
class Temporalio::Client::Interceptor::QueryWorkflowInput < Data
  def args; end
  def headers; end
  def query; end
  def reject_condition; end
  def rpc_options; end
  def run_id; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.report_cancellation_async_activity}.
class Temporalio::Client::Interceptor::ReportCancellationAsyncActivityInput < Data
  def details; end
  def rpc_options; end
  def task_token_or_id_reference; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.signal_workflow}.
class Temporalio::Client::Interceptor::SignalWorkflowInput < Data
  def args; end
  def headers; end
  def rpc_options; end
  def run_id; end
  def signal; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.start_workflow}.
class Temporalio::Client::Interceptor::StartWorkflowInput < Data
  def args; end
  def cron_schedule; end
  def execution_timeout; end
  def headers; end
  def id_conflict_policy; end
  def id_reuse_policy; end
  def memo; end
  def request_eager_start; end
  def retry_policy; end
  def rpc_options; end
  def run_timeout; end
  def search_attributes; end
  def start_delay; end
  def task_queue; end
  def task_timeout; end
  def workflow; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.start_workflow_update}.
class Temporalio::Client::Interceptor::StartWorkflowUpdateInput < Data
  def args; end
  def headers; end
  def rpc_options; end
  def run_id; end
  def update; end
  def update_id; end
  def wait_for_stage; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.terminate_workflow}.
class Temporalio::Client::Interceptor::TerminateWorkflowInput < Data
  def details; end
  def first_execution_run_id; end
  def reason; end
  def rpc_options; end
  def run_id; end
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.trigger_schedule}.
class Temporalio::Client::Interceptor::TriggerScheduleInput < Data
  def id; end
  def overlap; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.unpause_schedule}.
class Temporalio::Client::Interceptor::UnpauseScheduleInput < Data
  def id; end
  def note; end
  def rpc_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.update_schedule}.
class Temporalio::Client::Interceptor::UpdateScheduleInput < Data
  def id; end
  def rpc_options; end
  def updater; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Options as returned from {options} for +**to_h+ splat use in {initialize}. See {initialize} for details.
#
# source://temporalio//lib/temporalio/client.rb#46
class Temporalio::Client::Options < Data
  def connection; end
  def data_converter; end
  def default_workflow_query_reject_condition; end
  def interceptors; end
  def logger; end
  def namespace; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Set of RPC options for RPC calls.
#
# source://temporalio//lib/temporalio/client.rb#446
class Temporalio::Client::RPCOptions
  # Create RPC options.
  #
  # @param metadata [Hash<String, String>, nil] Headers to include on the RPC call.
  # @param timeout [Float, nil] Number of seconds before timeout of the RPC call.
  # @param cancellation [Cancellation, nil] Cancellation to use to potentially cancel the call. If canceled, the RPC
  #   will return {Error::CanceledError}.
  # @param override_retry [Boolean, nil] Whether to override the default retry option which decides whether to retry
  #   calls implicitly when known transient error codes are reached. By default when this is nil, high-level calls
  #   retry known transient error codes and low-level/direct calls do not.
  # @return [RPCOptions] a new instance of RPCOptions
  #
  # source://temporalio//lib/temporalio/client.rb#471
  def initialize(metadata: T.unsafe(nil), timeout: T.unsafe(nil), cancellation: T.unsafe(nil),
                 override_retry: T.unsafe(nil))
  end

  # @return [Cancellation, nil] Cancellation to use to potentially cancel the call. If canceled, the RPC will return
  #   {Error::CanceledError}.
  #
  # source://temporalio//lib/temporalio/client.rb#455
  def cancellation; end

  # @return [Cancellation, nil] Cancellation to use to potentially cancel the call. If canceled, the RPC will return
  #   {Error::CanceledError}.
  #
  # source://temporalio//lib/temporalio/client.rb#455
  def cancellation=(_arg0); end

  # @return [Hash<String, String>, nil] Headers to include on the RPC call.
  #
  # source://temporalio//lib/temporalio/client.rb#448
  def metadata; end

  # @return [Hash<String, String>, nil] Headers to include on the RPC call.
  #
  # source://temporalio//lib/temporalio/client.rb#448
  def metadata=(_arg0); end

  # @return [Boolean, nil] Whether to override the default retry option which decides whether to retry calls
  #   implicitly when known transient error codes are reached. By default when this is nil, high-level calls retry
  #   known transient error codes and low-level/direct calls do not.
  #
  # source://temporalio//lib/temporalio/client.rb#460
  def override_retry; end

  # @return [Boolean, nil] Whether to override the default retry option which decides whether to retry calls
  #   implicitly when known transient error codes are reached. By default when this is nil, high-level calls retry
  #   known transient error codes and low-level/direct calls do not.
  #
  # source://temporalio//lib/temporalio/client.rb#460
  def override_retry=(_arg0); end

  # @return [Float, nil] Number of seconds before timeout of the RPC call.
  #
  # source://temporalio//lib/temporalio/client.rb#451
  def timeout; end

  # @return [Float, nil] Number of seconds before timeout of the RPC call.
  #
  # source://temporalio//lib/temporalio/client.rb#451
  def timeout=(_arg0); end
end

# A schedule for periodically running an action.
#
# source://temporalio//lib/temporalio/client/schedule.rb#28
class Temporalio::Client::Schedule < Data
  # Create schedule
  #
  # @param action [Action] Action taken when scheduled.
  # @param spec [Spec] When the action is taken.
  # @param policy [Policy] Schedule policies.
  # @param state [State] State of the schedule.
  # @return [Schedule] a new instance of Schedule
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#45
  def initialize(action:, spec:, policy: T.unsafe(nil), state: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/client/schedule.rb#50
  def _to_proto(data_converter); end

  # @return [Action] Action taken when scheduled.
  def action; end

  # @return [Policy] Schedule policies.
  def policy; end

  # @return [Spec] When the action is taken.
  def spec; end

  # @return [State] State of the schedule.
  def state; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#30
    def _from_proto(raw_schedule, data_converter); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Base module mixed in by specific actions a schedule can take.
#
# source://temporalio//lib/temporalio/client/schedule.rb#152
module Temporalio::Client::Schedule::Action
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#161
  def _to_proto(data_converter); end

  class << self
    # source://temporalio//lib/temporalio/client/schedule.rb#154
    def _from_proto(raw_action, data_converter); end
  end
end

# Schedule action to start a workflow.
#
# source://temporalio//lib/temporalio/client/schedule.rb#203
class Temporalio::Client::Schedule::Action::StartWorkflow < Data
  include ::Temporalio::Client::Schedule::Action

  # source://temporalio//lib/temporalio/client/schedule.rb#270
  def _to_proto(data_converter); end

  # @return [Array<Object>] Arguments to the workflow.
  def args; end

  # @return [Float, nil] Total workflow execution timeout in seconds including retries and continue as new.
  def execution_timeout; end

  # @return [Hash<String, Object>, nil] Headers for the workflow.
  def headers; end

  # @return [String] Unique identifier for the workflow execution.
  def id; end

  # @return [Hash<String, Object>, nil] Memo for the workflow.
  def memo; end

  # @return [RetryPolicy, nil] Retry policy for the workflow.
  def retry_policy; end

  # @return [Float, nil] Timeout of a single workflow run in seconds.
  def run_timeout; end

  # @return [SearchAttributes, nil] Search attributes for the workflow.
  def search_attributes; end

  # @return [String] Task queue to run the workflow on.
  def task_queue; end

  # @return [Float, nil] Timeout of a single workflow task in seconds.
  def task_timeout; end

  # @return [String] Workflow.
  def workflow; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#253
    def _from_proto(raw_info, data_converter); end

    def _original_new(*_arg0); end
    def inspect; end
    def members; end

    # Create start-workflow schedule action.
    #
    # @param workflow [Class<Workflow::Definition>, Symbol, String] Workflow.
    # @param args [Array<Object>] Arguments to the workflow.
    # @param id [String] Unique identifier for the workflow execution.
    # @param task_queue [String] Task queue to run the workflow on.
    # @param execution_timeout [Float, nil] Total workflow execution timeout in seconds including retries and
    #   continue as new.
    # @param run_timeout [Float, nil] Timeout of a single workflow run in seconds.
    # @param task_timeout [Float, nil] Timeout of a single workflow task in seconds.
    # @param retry_policy [RetryPolicy, nil] Retry policy for the workflow.
    # @param memo [Hash<String, Object>, nil] Memo for the workflow.
    # @param search_attributes [SearchAttributes, nil] Search attributes for the workflow.
    # @param headers [Hash<String, Object>, nil] Headers for the workflow.
    #
    # source://temporalio//lib/temporalio/client/schedule.rb#223
    def new(workflow, *args, id:, task_queue:, execution_timeout: T.unsafe(nil), run_timeout: T.unsafe(nil),
            task_timeout: T.unsafe(nil), retry_policy: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil), headers: T.unsafe(nil))
    end
  end
end

# Base module mixed in by specific action executions.
#
# source://temporalio//lib/temporalio/client/schedule.rb#355
module Temporalio::Client::Schedule::ActionExecution; end

# Execution of a scheduled workflow start.
#
# source://temporalio//lib/temporalio/client/schedule.rb#367
class Temporalio::Client::Schedule::ActionExecution::StartWorkflow < Data
  include ::Temporalio::Client::Schedule::ActionExecution

  # @return [StartWorkflow] a new instance of StartWorkflow
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#371
  def initialize(raw_execution:); end

  # @return [String] Workflow run ID.
  def first_execution_run_id; end

  # @return [String] Workflow ID.
  def workflow_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Information about when an action took place.
#
# source://temporalio//lib/temporalio/client/schedule.rb#396
class Temporalio::Client::Schedule::ActionResult < Data
  # @return [ActionResult] a new instance of ActionResult
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#398
  def initialize(raw_result:); end

  # @return [ActionExecution] Action that took place.
  def action; end

  # @return [Time] Scheduled time of the action including jitter.
  def scheduled_at; end

  # @return [Time] When the action actually started.
  def started_at; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Time period and policy for actions taken as if the time passed right now.
#
# source://temporalio//lib/temporalio/client/schedule.rb#330
class Temporalio::Client::Schedule::Backfill < Data
  # Create backfill.
  #
  # @param start_at [Time] Start of the range to evaluate the schedule in. This is exclusive.
  # @param end_at [Time] End of the range to evaluate the schedule in. This is inclusive.
  # @param overlap [OverlapPolicy] Overlap policy.
  # @return [Backfill] a new instance of Backfill
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#336
  def initialize(start_at:, end_at:, overlap: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/client/schedule.rb#345
  def _to_proto; end

  # @return [Time] End of the range to evaluate the schedule in. This is inclusive.
  def end_at; end

  # @return [OverlapPolicy] Overlap policy.
  def overlap; end

  # @return [Time] Start of the range to evaluate the schedule in. This is exclusive.
  def start_at; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Description of a schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#76
class Temporalio::Client::Schedule::Description < Data
  # @return [Description] a new instance of Description
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#78
  def initialize(id:, raw_description:, data_converter:); end

  # @return [String] ID of the schedule.
  def id; end

  # @return [Schedule::Info] Information about the schedule.
  def info; end

  # @return [Hash<String, Object>, nil] Memo for the schedule, converted lazily on first call.
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#92
  def memo; end

  # @return [Api::WorkflowService::V1::DescribeScheduleResponse] Raw description of the schedule.
  def raw_description; end

  # @return [Schedule] Schedule details.
  def schedule; end

  # @return [SearchAttributes, nil] Search attributes for the schedule, converted lazily on first call.
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#97
  def search_attributes; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Information about a schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#131
class Temporalio::Client::Schedule::Info < Data
  # @return [Info] a new instance of Info
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#133
  def initialize(raw_info:); end

  # @return [Time] When the schedule was created.
  def created_at; end

  # @return [Time, nil] When the schedule was last updated.
  def last_updated_at; end

  # @return [Array<Time>] Next 10 scheduled action times.
  def next_action_times; end

  # @return [Integer] Number of actions taken by this schedule.
  def num_actions; end

  # @return [Integer] Number of times an action was skipped due to missing the catchup window.
  def num_actions_missed_catchup_window; end

  # @return [Integer] Number of actions skipped due to overlap.
  def num_actions_skipped_overlap; end

  # @return [Array<ActionResult>] 10 most recent actions, oldest first.
  def recent_actions; end

  # @return [Array<ActionExecution>] Currently running actions.
  def running_actions; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/client/schedule.rb#826
module Temporalio::Client::Schedule::List; end

# Base module mixed in by specific actions a listed schedule can take.
#
# source://temporalio//lib/temporalio/client/schedule.rb#902
module Temporalio::Client::Schedule::List::Action; end

# Action to start a workflow on a listed schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#911
class Temporalio::Client::Schedule::List::Action::StartWorkflow < Data
  include ::Temporalio::Client::Schedule::List::Action

  # @return [String] Workflow type name.
  def workflow; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Description of a listed schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#846
class Temporalio::Client::Schedule::List::Description < Data
  # @return [Description] a new instance of Description
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#848
  def initialize(raw_entry:, data_converter:); end

  # @return [String] ID of the schedule.
  def id; end

  # @return [Info, nil] Information about the schedule. This may not be present in older Temporal servers
  #   without advanced visibility.
  def info; end

  # @return [Hash<String, Object>, nil] Memo for the schedule, converted lazily on first call.
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#862
  def memo; end

  # @return [Api::Schedule::V1::ScheduleListEntry] Raw description of the schedule.
  def raw_entry; end

  # @return [Schedule, nil] Schedule details that can be mutated. This may not be present in older Temporal
  #   servers without advanced visibility.
  def schedule; end

  # @return [Search attributes, nil] Search attributes for the schedule, converted lazily on first call.
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#867
  def search_attributes; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Information about a listed schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#929
class Temporalio::Client::Schedule::List::Info < Data
  # @return [Info] a new instance of Info
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#931
  def initialize(raw_info:); end

  # @return [Array<Time>] Next scheduled action times. This may be a smaller amount than present on
  #   {Temporalio::Client::Schedule::Info.next_action_times}.
  def next_action_times; end

  # @return [Array<ActionResult>] Most recent actions, oldest first. This may be a smaller amount than present
  #   on {Temporalio::Client::Schedule::Info.recent_actions}.
  def recent_actions; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Details for a listed schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#886
class Temporalio::Client::Schedule::List::Schedule < Data
  # @return [Schedule] a new instance of Schedule
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#888
  def initialize(raw_info:); end

  # @return [Action] Action taken when scheduled.
  def action; end

  # @return [Spec] When the action is taken.
  def spec; end

  # @return [State] State of the schedule.
  def state; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# State of a listed schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#953
class Temporalio::Client::Schedule::List::State < Data
  # @return [State] a new instance of State
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#955
  def initialize(raw_info:); end

  # @return [String, nil] Human readable message for the schedule. The system may overwrite this value on
  #   certain conditions like pause-on-failure.
  def note; end

  # @return [Boolean] Whether the schedule is paused.
  def paused; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Enumerate that controls what happens when a workflow would be started by a schedule but one is already running.
#
# source://temporalio//lib/temporalio/client/schedule.rb#291
module Temporalio::Client::Schedule::OverlapPolicy; end

# Start any number of concurrent workflows. Note that with this policy, last completion result and last failure
# will not be available since workflows are not sequential.
#
# source://temporalio//lib/temporalio/client/schedule.rb#313
Temporalio::Client::Schedule::OverlapPolicy::ALLOW_ALL = T.let(T.unsafe(nil), Integer)

# Buffer up any number of starts to all happen sequentially, immediately after the running workflow completes.
#
# source://temporalio//lib/temporalio/client/schedule.rb#302
Temporalio::Client::Schedule::OverlapPolicy::BUFFER_ALL = T.let(T.unsafe(nil), Integer)

# Start the workflow again soon as the current one completes, but only buffer one start in this way. If another
# start is supposed to happen when the workflow is running, and one is already buffered, then only the first one
# will be started after the running workflow finishes.
#
# source://temporalio//lib/temporalio/client/schedule.rb#299
Temporalio::Client::Schedule::OverlapPolicy::BUFFER_ONE = T.let(T.unsafe(nil), Integer)

# If there is another workflow running, cancel it, and start the new one after the old one completes
# cancellation.
#
# source://temporalio//lib/temporalio/client/schedule.rb#306
Temporalio::Client::Schedule::OverlapPolicy::CANCEL_OTHER = T.let(T.unsafe(nil), Integer)

# Don't start anything. When the workflow completes, the next scheduled event after that time will be
# considered.
#
# source://temporalio//lib/temporalio/client/schedule.rb#294
Temporalio::Client::Schedule::OverlapPolicy::SKIP = T.let(T.unsafe(nil), Integer)

# If there is another workflow running, terminate it and start the new one immediately.
#
# source://temporalio//lib/temporalio/client/schedule.rb#309
Temporalio::Client::Schedule::OverlapPolicy::TERMINATE_OTHER = T.let(T.unsafe(nil), Integer)

# Policies of a schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#699
class Temporalio::Client::Schedule::Policy < Data
  # Create a schedule policy.
  #
  # @param overlap [OverlapPolicy] Controls what happens when an action is started while another is still running.
  # @param catchup_window [Float] After a Temporal server is unavailable, amount of time in the past to execute
  #   missed actions.
  # @param pause_on_failure [Boolean] Whether to pause the schedule if an action fails or times out. Note: For
  #   workflows, this only applies after all retries have been exhausted.
  # @return [Policy] a new instance of Policy
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#718
  def initialize(overlap: T.unsafe(nil), catchup_window: T.unsafe(nil), pause_on_failure: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/client/schedule.rb#727
  def _to_proto; end

  # @return [Float] After a Temporal server is unavailable, amount of time in the past to execute missed actions.
  def catchup_window; end

  # @return [OverlapPolicy] Controls what happens when an action is started while another is still running.
  def overlap; end

  # @return [Boolean] Whether to pause the schedule if an action fails or times out. Note: For workflows, this
  #   only applies after all retries have been exhausted.
  def pause_on_failure; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#701
    def _from_proto(raw_policies); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Inclusive range for a schedule match value.
#
# source://temporalio//lib/temporalio/client/schedule.rb#637
class Temporalio::Client::Schedule::Range < Data
  # source://temporalio//lib/temporalio/client/schedule.rb#675
  def _to_proto; end

  # @return [Integer] Inclusive end of the range. If unset or less than start, defaults to start.
  def finish; end

  # @return [Integer] Inclusive start of the range.
  def start; end

  # @return [Integer] Step to take between each value. Defaults as 1.
  def step; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#656
    def _from_proto(raw_range); end

    # source://temporalio//lib/temporalio/client/schedule.rb#665
    def _from_protos(raw_ranges); end

    def _original_new(*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#670
    def _to_protos(ranges); end

    def inspect; end
    def members; end

    # Create inclusive range.
    #
    # @param start [Integer] Inclusive start of the range.
    # @param finish [Integer] Inclusive end of the range. If unset or less than start, defaults to start.
    # @param step [Integer] Step to take between each value. Defaults as 1.
    #
    # source://temporalio//lib/temporalio/client/schedule.rb#646
    def new(start, finish = T.unsafe(nil), step = T.unsafe(nil)); end
  end
end

# Specification of the times scheduled actions may occur.
#
# The times are the union of {calendars}, {intervals}, and {cron_expressions} excluding anything in {skip}.
#
# source://temporalio//lib/temporalio/client/schedule.rb#443
class Temporalio::Client::Schedule::Spec < Data
  # Create a spec.
  #
  # @param calendars [Array<Calendar>] Calendar-based specification of times.
  # @param intervals [Array<Interval>] Interval-based specification of times.
  # @param cron_expressions [Array<String>] Cron-based specification of times. This is provided for easy migration
  #   from legacy string-based cron scheduling. New uses should use `calendars` instead. These expressions will be
  #   translated to calendar-based specifications on the server.
  # @param skip [Array<Calendar>] Set of matching calendar times that will be skipped.
  # @param start_at [Time, nil] Time before which any matching times will be skipped.
  # @param end_at [Time, nil] Time after which any matching times will be skipped.
  # @param jitter [Float, nil] Jitter to apply each action. An action's scheduled time will be incremented by a
  #   random value between 0 and this value if present (but not past the next schedule).
  # @param time_zone_name [String, nil] IANA time zone name, for example `US/Central`.
  # @return [Spec] a new instance of Spec
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#471
  def initialize(calendars: T.unsafe(nil), intervals: T.unsafe(nil), cron_expressions: T.unsafe(nil),
                 skip: T.unsafe(nil), start_at: T.unsafe(nil), end_at: T.unsafe(nil), jitter: T.unsafe(nil), time_zone_name: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/client/schedule.rb#485
  def _to_proto; end

  # @return [Array<Calendar>] Calendar-based specification of times.
  def calendars; end

  # @return [Array<String>] Cron-based specification of times. This is provided for easy migration
  #   from legacy string-based cron scheduling. New uses should use `calendars` instead. These expressions will be
  #   translated to calendar-based specifications on the server.
  def cron_expressions; end

  # @return [Time, nil] Time after which any matching times will be skipped.
  def end_at; end

  # @return [Array<Interval>] Interval-based specification of times.
  def intervals; end

  # @return [Float, nil] Jitter to apply each action. An action's scheduled time will be incremented by a random
  #   value between 0 and this value if present (but not past the next schedule).
  def jitter; end

  # @return [Array<Calendar>] Set of matching calendar times that will be skipped.
  def skip; end

  # @return [Time, nil] Time before which any matching times will be skipped.
  def start_at; end

  # @return [String, nil] IANA time zone name, for example `US/Central`.
  def time_zone_name; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#445
    def _from_proto(raw_spec); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Specification relative to calendar time when to run an action.
#
# A timestamp matches if at least one range of each field matches except for year. If year is missing, that
# means all years match. For all fields besides year, at least one range must be present to match anything.
#
# source://temporalio//lib/temporalio/client/schedule.rb#530
class Temporalio::Client::Schedule::Spec::Calendar < Data
  # Create a calendar spec.
  #
  # @param second [Array<Range>] Second range to match, 0-59. Default matches 0.
  # @param minute [Array<Range>] Minute range to match, 0-59. Default matches 0.
  # @param hour [Array<Range>] Hour range to match, 0-23. Default matches 0.
  # @param day_of_month [Array<Range>] Day of month range to match, 1-31. Default matches all days.
  # @param month [Array<Range>] Month range to match, 1-12. Default matches all months.
  # @param year [Array<Range>] Optional year range to match. Default of empty matches all years.
  # @param day_of_week [Array<Range>] Day of week range to match, 0-6, 0 is Sunday. Default matches all days.
  # @param comment [String, nil] Description of this schedule.
  # @return [Calendar] a new instance of Calendar
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#555
  def initialize(second: T.unsafe(nil), minute: T.unsafe(nil), hour: T.unsafe(nil), day_of_month: T.unsafe(nil),
                 month: T.unsafe(nil), year: T.unsafe(nil), day_of_week: T.unsafe(nil), comment: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/client/schedule.rb#569
  def _to_proto; end

  # @return [String, nil] Description of this schedule.
  def comment; end

  # @return [Array<Range>] Day of month range to match, 1-31. Default matches all days.
  def day_of_month; end

  # @return [Array<Range>] Day of week range to match, 0-6, 0 is Sunday. Default matches all days.
  def day_of_week; end

  # @return [Array<Range>] Hour range to match, 0-23. Default matches 0.
  def hour; end

  # @return [Array<Range>] Minute range to match, 0-59. Default matches 0.
  def minute; end

  # @return [Array<Range>] Month range to match, 1-12. Default matches all months.
  def month; end

  # @return [Array<Range>] Second range to match, 0-59. Default matches 0.
  def second; end

  # @return [Array<Range>] Optional year range to match. Default of empty matches all years.
  def year; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#532
    def _from_proto(raw_cal); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Specification for scheduling on an interval.
#
# Matches times expressed as epoch + (n * every) + offset.
#
# source://temporalio//lib/temporalio/client/schedule.rb#596
class Temporalio::Client::Schedule::Spec::Interval < Data
  # Create an interval spec.
  #
  # @param every [Float] Period to repeat the interval.
  # @param offset [Float, nil] Fixed offset added to each interval period.
  # @return [Interval] a new instance of Interval
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#609
  def initialize(every:, offset: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/client/schedule.rb#614
  def _to_proto; end

  # @return [Float] Period to repeat the interval.
  def every; end

  # @return [Float, nil] Fixed offset added to each interval period.
  def offset; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#598
    def _from_proto(raw_int); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# State of a schedule.
#
# source://temporalio//lib/temporalio/client/schedule.rb#756
class Temporalio::Client::Schedule::State < Data
  # Create a schedule state.
  #
  # @param note [String, nil] Human readable message for the schedule. The system may overwrite this value on
  #   certain conditions like pause-on-failure.
  # @param paused [Boolean] Whether the schedule is paused.
  # @param limited_actions [Boolean] If true, remaining actions will be decremented for each action taken. On
  #   schedule create, this must be set to true if `remaining_actions` is non-zero and left false if
  #   `remaining_actions` is zero.
  # @param remaining_actions [Integer] Actions remaining on this schedule. Once this number hits 0, no further
  #   actions are scheduled automatically.
  # @return [State] a new instance of State
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#777
  def initialize(note: T.unsafe(nil), paused: T.unsafe(nil), limited_actions: T.unsafe(nil),
                 remaining_actions: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/client/schedule.rb#787
  def _to_proto; end

  # @return [Boolean] If true, remaining actions will be decremented for each action taken. On schedule create,
  #   this must be set to true if `remaining_actions` is non-zero and left false if `remaining_actions` is zero.
  def limited_actions; end

  # @return [String, nil] Human readable message for the schedule. The system may overwrite this value on certain
  #   conditions like pause-on-failure.
  def note; end

  # @return [Boolean] Whether the schedule is paused.
  def paused; end

  # @return [Integer] Actions remaining on this schedule. Once this number hits 0, no further actions are
  #   scheduled automatically.
  def remaining_actions; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/client/schedule.rb#758
    def _from_proto(raw_state); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Result of an update callback for {ScheduleHandle.update}.
#
# source://temporalio//lib/temporalio/client/schedule.rb#808
class Temporalio::Client::Schedule::Update < Data
  # Create an update callback result.
  #
  # @param schedule [Schedule] Schedule to update.
  # @param search_attributes [SearchAttributes, nil] Search attributes to update to.
  # @return [Update] a new instance of Update
  #
  # source://temporalio//lib/temporalio/client/schedule.rb#813
  def initialize(schedule:, search_attributes: T.unsafe(nil)); end

  # @return [Schedule] Schedule to update.
  def schedule; end

  # @return [SearchAttributes, nil] Search attributes to update to.
  def search_attributes; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Parameter for an update callback for {ScheduleHandle.update}.
class Temporalio::Client::Schedule::Update::Input < Data
  def description; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Handle for interacting with a schedule. This is usually created via {Client.create_schedule} or
# {Client.schedule_handle}.
#
# source://temporalio//lib/temporalio/client/schedule_handle.rb#10
class Temporalio::Client::ScheduleHandle
  # @return [ScheduleHandle] a new instance of ScheduleHandle
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#15
  def initialize(client:, id:); end

  # Backfill the schedule by going through the specified time periods as if they passed right now.
  #
  # @param backfills [Array<Schedule::Backfill>] Backfill periods.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#26
  def backfill(*backfills, rpc_options: T.unsafe(nil)); end

  # Delete this schedule.
  #
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#44
  def delete(rpc_options: T.unsafe(nil)); end

  # Fetch this schedule's description.
  #
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Schedule::Description] Schedule description.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#57
  def describe(rpc_options: T.unsafe(nil)); end

  # @return [String] ID of the schedule.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#12
  def id; end

  # Pause the schedule and set a note.
  #
  # @param note [String] Note to set on the schedule.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#70
  def pause(note: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Trigger an action on this schedule to happen immediately.
  #
  # @param overlap [Schedule::OverlapPolicy, nil] If set, overrides the schedule's overlap policy.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#84
  def trigger(overlap: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Unpause the schedule and set a note.
  #
  # @param note [String] Note to set on the schedule.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#98
  def unpause(note: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Update a schedule using a callback to build the update from the description.
  #
  # NOTE: In future versions, the callback may be invoked multiple times in a conflict-resolution loop.
  #
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @yield Block called to obtain the update.
  # @yieldparam Parameter [Schedule::Update::Input] to the block that contains a description with the schedule to be
  #   updated.
  # @yieldreturn [Schedule::Update, nil] The update to apply, or `nil` to not perform an update.
  #
  # source://temporalio//lib/temporalio/client/schedule_handle.rb#117
  def update(rpc_options: T.unsafe(nil), &updater); end
end

# Info for a single workflow execution run.
#
# source://temporalio//lib/temporalio/client/workflow_execution.rb#11
class Temporalio::Client::WorkflowExecution
  # @return [WorkflowExecution] a new instance of WorkflowExecution
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#16
  def initialize(raw_info, data_converter); end

  # @return [Time, nil] When the workflow was closed if closed.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#23
  def close_time; end

  # @return [Time, nil] When this workflow run started or should start.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#28
  def execution_time; end

  # @return [Integer] Number of events in the history.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#33
  def history_length; end

  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#38
  def id; end

  # @return [Hash<String, Object>, nil] Memo for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#43
  def memo; end

  # @return [String, nil] ID for the parent workflow if this was started as a child.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#48
  def parent_id; end

  # @return [String, nil] Run ID for the parent workflow if this was started as a child.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#53
  def parent_run_id; end

  # @return [Api::Workflow::V1::WorkflowExecutionInfo] Underlying protobuf info.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#13
  def raw_info; end

  # @return [String] Run ID for this workflow run.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#58
  def run_id; end

  # @return [SearchAttributes, nil] Current set of search attributes if any.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#63
  def search_attributes; end

  # @return [Time] When the workflow was created.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#68
  def start_time; end

  # @return [WorkflowExecutionStatus] Status for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#73
  def status; end

  # @return [String] Task queue for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#78
  def task_queue; end

  # @return [String] Type name for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#83
  def workflow_type; end
end

# Description for a single workflow execution run.
#
# source://temporalio//lib/temporalio/client/workflow_execution.rb#88
class Temporalio::Client::WorkflowExecution::Description < Temporalio::Client::WorkflowExecution
  # @return [Description] a new instance of Description
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#93
  def initialize(raw_description, data_converter); end

  # @return [Api::WorkflowService::V1::DescribeWorkflowExecutionResponse] Underlying protobuf description.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution.rb#90
  def raw_description; end
end

# Representation of a count from a count workflows call.
#
# source://temporalio//lib/temporalio/client/workflow_execution_count.rb#6
class Temporalio::Client::WorkflowExecutionCount
  # @return [WorkflowExecutionCount] a new instance of WorkflowExecutionCount
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#15
  def initialize(count, groups); end

  # clause, this is simply the sum of all the counts in {groups}.
  #
  # @return [Integer] Approximate number of workflows matching the original query. If the query had a group-by
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#9
  def count; end

  # @return [Array<AggregationGroup>] Groups if the query had a group-by clause, or empty if not.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#12
  def groups; end
end

# Aggregation group if the workflow count query had a group-by clause.
#
# source://temporalio//lib/temporalio/client/workflow_execution_count.rb#21
class Temporalio::Client::WorkflowExecutionCount::AggregationGroup
  # @return [AggregationGroup] a new instance of AggregationGroup
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#29
  def initialize(count, group_values); end

  # @return [Integer] Approximate number of workflows matching the original query for this group.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#23
  def count; end

  # @return [Array<Object>] Search attribute values for this group.
  #
  # source://temporalio//lib/temporalio/client/workflow_execution_count.rb#26
  def group_values; end
end

# Status of a workflow execution.
#
# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#8
module Temporalio::Client::WorkflowExecutionStatus; end

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#12
Temporalio::Client::WorkflowExecutionStatus::CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#10
Temporalio::Client::WorkflowExecutionStatus::COMPLETED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#14
Temporalio::Client::WorkflowExecutionStatus::CONTINUED_AS_NEW = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#11
Temporalio::Client::WorkflowExecutionStatus::FAILED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#9
Temporalio::Client::WorkflowExecutionStatus::RUNNING = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#13
Temporalio::Client::WorkflowExecutionStatus::TERMINATED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_execution_status.rb#15
Temporalio::Client::WorkflowExecutionStatus::TIMED_OUT = T.let(T.unsafe(nil), Integer)

# Handle for interacting with a workflow. This is usually created via {Client.start_workflow} or
# {Client.workflow_handle}.
#
# source://temporalio//lib/temporalio/client/workflow_handle.rb#15
class Temporalio::Client::WorkflowHandle
  # @return [WorkflowHandle] a new instance of WorkflowHandle
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#52
  def initialize(client:, id:, run_id:, result_run_id:, first_execution_run_id:); end

  # Cancel the workflow. This will issue a cancellation for {run_id} if present. This call will make sure to use the
  # run chain starting from {first_execution_run_id} if present. To create handles with these values, use
  # {Client.workflow_handle}.
  #
  # @note Handles created as a result of signal with start will cancel the latest workflow with the same workflow ID
  #   even if it is unrelated to the started workflow.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#356
  def cancel(rpc_options: T.unsafe(nil)); end

  # Get workflow details. This will get details for the {run_id} if present. To use a different run ID, create a new
  # handle via {Client.workflow_handle}.
  #
  # @note Handles created as a result of {Client.start_workflow} will describe the latest workflow with the same
  #   workflow ID even if it is unrelated to the started workflow.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [WorkflowExecution::Description] Workflow description.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#147
  def describe(rpc_options: T.unsafe(nil)); end

  # Send an update request to the workflow and wait for it to complete. This will target the workflow with {run_id}
  # if present. To use a different run ID, create a new handle via {Client.workflow_handle}.
  #
  # @note Handles created as a result of {Client.start_workflow} will send updates the latest workflow with the same
  #   workflow ID even if it is unrelated to the started workflow.
  # @param update [Workflow::Definition::Update, Symbol, String] Update definition or name.
  # @param args [Array<Object>] Update arguments.
  # @param id [String] ID of the update.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowUpdateFailedError] If the update failed.
  # @raise [Error::WorkflowUpdateRPCTimeoutOrCanceledError] This update call timed out or was canceled. This doesn't
  #   mean the update itself was timed out or canceled.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Object, nil] Update result.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#319
  #
  # NOTE: Manually removed due to arity issues, see README
  # def execute_update(update, *args, id: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Get workflow history. This is a helper on top of {fetch_history_events}.
  #
  # @param event_filter_type [Api::Enums::V1::HistoryEventFilterType] Types of events to fetch.
  # @param skip_archival [Boolean] Whether to skip archival.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [WorkflowHistory] Workflow history.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#164
  def fetch_history(event_filter_type: T.unsafe(nil), skip_archival: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Fetch an enumerator of history events for this workflow. Internally this is done in paginated form, but it is
  # presented as an enumerator.
  #
  # @param wait_new_event [Boolean] If +true+, when the end of the current set of events is reached but the workflow
  #   is not complete, this will wait for the next event. If +false+, the enumerable completes at the end of current
  #   history.
  # @param event_filter_type [Api::Enums::V1::HistoryEventFilterType] Types of events to fetch.
  # @param skip_archival [Boolean] Whether to skip archival.
  # @param specific_run_id [String, nil] Run ID to fetch events for. Default is the {run_id}. Most users will not
  #   need to set this and instead use the one on the class.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Enumerator<Api::History::V1::HistoryEvent>] Enumerable events.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#193
  def fetch_history_events(wait_new_event: T.unsafe(nil), event_filter_type: T.unsafe(nil),
                           skip_archival: T.unsafe(nil), specific_run_id: T.unsafe(nil), rpc_options: T.unsafe(nil))
  end

  # Run ID used for some calls like {cancel} and {terminate} to ensure the cancel and terminate happen for a
  # workflow ID on a chain started with this run ID.
  #
  # This can be set when using {Client.workflow_handle}. When {Client.start_workflow} is called without a start
  # signal, this is set to the resulting run.
  #
  # This cannot be mutated. If a different first execution run ID is needed, {Client.workflow_handle} must be used
  # instead.
  #
  # @return [String, nil] First execution run ID.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#49
  def first_execution_run_id; end

  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#17
  def id; end

  # Query the workflow. This will query for {run_id} if present. To use a different run ID, create a new handle via
  # {Client.workflow_handle}.
  #
  # @note Handles created as a result of {Client.start_workflow} will query the latest workflow with the same
  #   workflow ID even if it is unrelated to the started workflow.
  # @param query [Workflow::Definition::Query, Symbol, String] Query definition or name.
  # @param args [Array<Object>] Query arguments.
  # @param reject_condition [WorkflowQueryRejectCondition, nil] Condition for rejecting the query.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowQueryFailedError] The query on the workflow returned a failure.
  # @raise [Error::WorkflowQueryRejectedError] A query reject condition was satisfied.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Object, nil] Query result.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#248
  #
  # NOTE: Manually removed due to arity issues, see README
  # def query(query, *args, reject_condition: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Wait for the result of the workflow.
  #
  # This will use {result_run_id} if present to base the result on. To use another run ID, a new handle must be
  # created via {Client.workflow_handle}.
  #
  # @param follow_runs [Boolean] If +true+, workflow runs will be continually fetched across retries and continue as
  #   new until the latest one is found. If +false+, the first result is used.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowFailedError] Workflow failed with +cause+ as the cause.
  # @raise [Error::WorkflowContinuedAsNewError] Workflow continued as new and +follow_runs+ is +false+.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Object] Result of the workflow after being converted by the data converter.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#74
  def result(follow_runs: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Run ID used for {result} calls if present to ensure result is for a workflow starting from this run.
  #
  # When this handle is created via {Client.workflow_handle}, this is the same as {run_id}. When this handle is
  # created via {Client.start_workflow}, this value will be the resulting run ID.
  #
  # This cannot be mutated. If a different run ID is needed, {Client.workflow_handle} must be used instead.
  #
  # @return [String, nil] Result run ID.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#37
  def result_run_id; end

  # Run ID used for {signal}, {query}, and {start_update}/{execute_update} calls if present to ensure the
  # signal/query/update happen on this exact run.
  #
  # This is only created via {Client.workflow_handle}. {Client.start_workflow} will not set this value.
  #
  # This cannot be mutated. If a different run ID is needed, {Client.workflow_handle} must be used instead.
  #
  # @return [String, nil] Run ID.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#27
  def run_id; end

  # Send a signal to the workflow. This will signal for {run_id} if present. To use a different run ID, create a new
  # handle via {Client.workflow_handle}.
  #
  # @note Handles created as a result of {Client.start_workflow} will signal the latest workflow with the same
  #   workflow ID even if it is unrelated to the started workflow.
  # @param signal [Workflow::Definition::Signal, Symbol, String] Signal definition or name.
  # @param args [Array<Object>] Signal arguments.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#221
  #
  # NOTE: Manually removed due to arity issues, see README
  # def signal(signal, *args, rpc_options: T.unsafe(nil)); end

  # Send an update request to the workflow and return a handle to it. This will target the workflow with {run_id} if
  # present. To use a different run ID, create a new handle via {Client.workflow_handle}.
  #
  # @note Handles created as a result of {Client.start_workflow} will send updates the latest workflow with the same
  #   workflow ID even if it is unrelated to the started workflow.
  # @param update [Workflow::Definition::Update, Symbol, String] Update definition or name.
  # @param args [Array<Object>] Update arguments.
  # @param wait_for_stage [WorkflowUpdateWaitStage] Required stage to wait until returning. ADMITTED is not
  #   currently supported. See https://docs.temporal.io/workflows#update for more details.
  # @param id [String] ID of the update.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowUpdateRPCTimeoutOrCanceledError] This update call timed out or was canceled. This doesn't
  #   mean the update itself was timed out or canceled.
  # @raise [Error::RPCError] RPC error from call.
  # @return [WorkflowUpdateHandle] The update handle.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#283
  def start_update(update, *args, wait_for_stage:, id: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Terminate the workflow. This will issue a termination for {run_id} if present. This call will make sure to use
  # the run chain starting from {first_execution_run_id} if present. To create handles with these values, use
  # {Client.workflow_handle}.
  #
  # @note Handles created as a result of signal with start will terminate the latest workflow with the same workflow
  #   ID even if it is unrelated to the started workflow.
  # @param reason [String, nil] Reason for the termination.
  # @param details [Array<Object>] Details to store on the termination.
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::RPCError] RPC error from call.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#377
  def terminate(reason = T.unsafe(nil), details: T.unsafe(nil), rpc_options: T.unsafe(nil)); end

  # Get a handle for an update. The handle can be used to wait on the update result.
  #
  # @param id [String] ID of the update.
  # @param specific_run_id [String, nil] Workflow run ID to get update handle for. Default is the {run_id}. Most
  #   users will not need to set this and instead use the one on the class.
  # @return [WorkflowUpdateHandle] The update handle.
  #
  # source://temporalio//lib/temporalio/client/workflow_handle.rb#336
  def update_handle(id, specific_run_id: T.unsafe(nil)); end
end

# Whether a query should be rejected in certain conditions.
#
# source://temporalio//lib/temporalio/client/workflow_query_reject_condition.rb#8
module Temporalio::Client::WorkflowQueryRejectCondition; end

# source://temporalio//lib/temporalio/client/workflow_query_reject_condition.rb#9
Temporalio::Client::WorkflowQueryRejectCondition::NONE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_query_reject_condition.rb#11
Temporalio::Client::WorkflowQueryRejectCondition::NOT_COMPLETED_CLEANLY = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_query_reject_condition.rb#10
Temporalio::Client::WorkflowQueryRejectCondition::NOT_OPEN = T.let(T.unsafe(nil), Integer)

# Handle for a workflow update execution request. This is usually created via {WorkflowHandle.start_update} or
# {WorkflowHandle.update_handle}.
#
# source://temporalio//lib/temporalio/client/workflow_update_handle.rb#11
class Temporalio::Client::WorkflowUpdateHandle
  # @return [WorkflowUpdateHandle] a new instance of WorkflowUpdateHandle
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#22
  def initialize(client:, id:, workflow_id:, workflow_run_id:, known_outcome:); end

  # @return [String] ID for the workflow update.
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#13
  def id; end

  # Wait for and return the result of the update. The result may already be known in which case no network call is
  # made. Otherwise the result will be polled for until it is returned.
  #
  # @param rpc_options [RPCOptions, nil] Advanced RPC options.
  # @raise [Error::WorkflowUpdateFailedError] If the update failed.
  # @raise [Error::WorkflowUpdateRPCTimeoutOrCanceledError] This update call timed out or was canceled. This doesn't
  #   mean the update itself was timed out or canceled.
  # @raise [Error::RPCError] RPC error from call.
  # @return [Object, nil] Update result.
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#47
  def result(rpc_options: T.unsafe(nil)); end

  # @return [Boolean] True if the result is already known and {result} will not make a blocking call, false if
  #   {result} will make a blocking call because the result is not yet known.
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#32
  def result_obtained?; end

  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#16
  def workflow_id; end

  # @return [String, nil] Run ID for the workflow.
  #
  # source://temporalio//lib/temporalio/client/workflow_update_handle.rb#19
  def workflow_run_id; end
end

# Stage to wait for workflow update to reach before returning from {WorkflowHandle.start_update}.
#
# source://temporalio//lib/temporalio/client/workflow_update_wait_stage.rb#8
module Temporalio::Client::WorkflowUpdateWaitStage; end

# source://temporalio//lib/temporalio/client/workflow_update_wait_stage.rb#11
Temporalio::Client::WorkflowUpdateWaitStage::ACCEPTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_update_wait_stage.rb#9
Temporalio::Client::WorkflowUpdateWaitStage::ADMITTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/client/workflow_update_wait_stage.rb#13
Temporalio::Client::WorkflowUpdateWaitStage::COMPLETED = T.let(T.unsafe(nil), Integer)

# Module for data conversion.
#
# source://temporalio//lib/temporalio/converters/failure_converter.rb#8
module Temporalio::Converters; end

# Data converter for converting/encoding payloads to/from Ruby values.
#
# source://temporalio//lib/temporalio/converters/data_converter.rb#10
class Temporalio::Converters::DataConverter
  # Create data converter.
  #
  # @param payload_converter [PayloadConverter] Payload converter to use.
  # @param failure_converter [FailureConverter] Failure converter to use.
  # @param payload_codec [PayloadCodec, nil] Payload codec to use.
  # @return [DataConverter] a new instance of DataConverter
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#30
  def initialize(payload_converter: T.unsafe(nil), failure_converter: T.unsafe(nil), payload_codec: T.unsafe(nil)); end

  # @return [FailureConverter] Failure converter.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#15
  def failure_converter; end

  # Decode and convert a Temporal failure to a Ruby error.
  #
  # @param failure [Api::Failure::V1::Failure] Encoded failure.
  # @return [Exception] Decoded and converted Ruby error.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#94
  def from_failure(failure); end

  # Decode and convert a payload to a Ruby value.
  #
  # @param payload [Api::Common::V1::Payload] Encoded payload.
  # @return [Object] Decoded and converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#64
  def from_payload(payload); end

  # Decode and convert a payload set to Ruby values.
  #
  # @param payloads [Api::Common::V1::Payloads, nil] Encoded payload set.
  # @return [Array<Object>] Decoded and converted Ruby values.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#73
  def from_payloads(payloads); end

  # @return [PayloadCodec, nil] Optional codec for encoding/decoding payload bytes such as for encryption.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#18
  def payload_codec; end

  # @return [PayloadConverter] Payload converter.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#12
  def payload_converter; end

  # Convert a Ruby error to a Temporal failure and encode it.
  #
  # @param error [Exception] Ruby error.
  # @return [Api::Failure::V1::Failure] Converted and encoded failure.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#86
  def to_failure(error); end

  # Convert a Ruby value to a payload and encode it.
  #
  # @param value [Object] Ruby value.
  # @return [Api::Common::V1::Payload] Converted and encoded payload.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#44
  def to_payload(value); end

  # Convert multiple Ruby values to a payload set and encode it.
  #
  # @param values [Object] Ruby values, converted to array via {::Array}.
  # @return [Api::Common::V1::Payloads] Converted and encoded payload set.
  #
  # source://temporalio//lib/temporalio/converters/data_converter.rb#54
  def to_payloads(values); end

  class << self
    # @return [DataConverter] Default data converter.
    #
    # source://temporalio//lib/temporalio/converters/data_converter.rb#21
    def default; end
  end
end

# Base class for converting Ruby errors to/from Temporal failures.
#
# source://temporalio//lib/temporalio/converters/failure_converter.rb#10
class Temporalio::Converters::FailureConverter
  # Create failure converter.
  #
  # @param encode_common_attributes [Boolean] If +true+, the message and stack trace of the failure will be moved
  #   into the encoded attribute section of the failure which can be encoded with a codec.
  # @return [FailureConverter] a new instance of FailureConverter
  #
  # source://temporalio//lib/temporalio/converters/failure_converter.rb#24
  def initialize(encode_common_attributes: T.unsafe(nil)); end

  # @return [Boolean] If +true+, the message and stack trace of the failure will be moved into the encoded attribute
  #   section of the failure which can be encoded with a codec.
  #
  # source://temporalio//lib/temporalio/converters/failure_converter.rb#18
  def encode_common_attributes; end

  # Convert a Temporal failure to a Ruby error.
  #
  # @param failure [Api::Failure::V1::Failure] Failure.
  # @param converter [DataConverter, PayloadConverter] Converter for payloads.
  # @return [Error::Failure] Converted Ruby error.
  #
  # source://temporalio//lib/temporalio/converters/failure_converter.rb#109
  def from_failure(failure, converter); end

  # Convert a Ruby error to a Temporal failure.
  #
  # @param error [Exception] Ruby error.
  # @param converter [DataConverter, PayloadConverter] Converter for payloads.
  # @return [Api::Failure::V1::Failure] Converted failure.
  #
  # source://temporalio//lib/temporalio/converters/failure_converter.rb#33
  def to_failure(error, converter); end

  class << self
    # @return [FailureConverter] Default failure converter.
    #
    # source://temporalio//lib/temporalio/converters/failure_converter.rb#12
    def default; end
  end
end

# Base class for converting Ruby values to/from Temporal payloads.
#
# source://temporalio//lib/temporalio/converters/payload_converter/encoding.rb#5
class Temporalio::Converters::PayloadConverter
  # Convert a payload to a Ruby value.
  #
  # @param payload [Api::Common::V1::Payload] Payload.
  # @raise [NotImplementedError]
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter.rb#56
  def from_payload(payload); end

  # Convert a payload set to Ruby values.
  #
  # @param payloads [Api::Common::V1::Payloads, nil] Payload set.
  # @return [Array<Object>] Converted Ruby values.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter.rb#64
  def from_payloads(payloads); end

  # Convert a Ruby value to a payload.
  #
  # @param value [Object] Ruby value.
  # @raise [NotImplementedError]
  # @return [Api::Common::V1::Payload] Converted payload.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter.rb#38
  def to_payload(value); end

  # Convert multiple Ruby values to a payload set.
  #
  # @param values [Object] Ruby values, converted to array via {::Array}.
  # @return [Api::Common::V1::Payloads] Converted payload set.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter.rb#46
  def to_payloads(values); end

  class << self
    # @return [PayloadConverter::Composite] Default payload converter.
    #
    # source://temporalio//lib/temporalio/converters/payload_converter.rb#15
    def default; end

    # Create a new payload converter with the default set of encoding converters.
    #
    # @param json_parse_options [Hash] Options for {::JSON.parse}.
    # @param json_generate_options [Hash] Options for {::JSON.generate}.
    # @return [PayloadConverter::Composite] Created payload converter.
    #
    # source://temporalio//lib/temporalio/converters/payload_converter.rb#24
    def new_with_defaults(json_parse_options: T.unsafe(nil), json_generate_options: T.unsafe(nil)); end
  end
end

# Encoding for +nil+ values for +binary/null+ encoding.
#
# source://temporalio//lib/temporalio/converters/payload_converter/binary_null.rb#10
class Temporalio::Converters::PayloadConverter::BinaryNull < Temporalio::Converters::PayloadConverter::Encoding
  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_null.rb#14
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_null.rb#28
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_null.rb#19
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/binary_null.rb#11
Temporalio::Converters::PayloadConverter::BinaryNull::ENCODING = T.let(T.unsafe(nil), String)

# Encoding for +ASCII_8BIT+ string values for +binary/plain+ encoding.
#
# source://temporalio//lib/temporalio/converters/payload_converter/binary_plain.rb#10
class Temporalio::Converters::PayloadConverter::BinaryPlain < Temporalio::Converters::PayloadConverter::Encoding
  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_plain.rb#14
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_plain.rb#29
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_plain.rb#19
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/binary_plain.rb#11
Temporalio::Converters::PayloadConverter::BinaryPlain::ENCODING = T.let(T.unsafe(nil), String)

# Encoding for Protobuf values for +binary/protobuf+ encoding.
#
# source://temporalio//lib/temporalio/converters/payload_converter/binary_protobuf.rb#11
class Temporalio::Converters::PayloadConverter::BinaryProtobuf < Temporalio::Converters::PayloadConverter::Encoding
  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_protobuf.rb#15
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_protobuf.rb#31
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/binary_protobuf.rb#20
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/binary_protobuf.rb#12
Temporalio::Converters::PayloadConverter::BinaryProtobuf::ENCODING = T.let(T.unsafe(nil), String)

# Payload converter that is a collection of {Encoding}s. When converting to a payload, it tries each encoding
# converter in order until one works. The encoding converter is expected to set the +encoding+ metadata which is
# then used to match to the proper encoding converter when converting back to a Ruby value.
#
# source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#13
class Temporalio::Converters::PayloadConverter::Composite < Temporalio::Converters::PayloadConverter
  # Create a payload converter with the given encoding converters processed in order.
  #
  # @param converters [Array<Encoding>] Encoding converters.
  # @return [Composite] a new instance of Composite
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#23
  def initialize(*converters); end

  # @return [Hash<String, Encoding>] Encoding converters processed in order.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#18
  def converters; end

  # Convert payload to Ruby value based on its +encoding+ metadata on the payload.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @raise [EncodingNotSet] If encoding not set on the metadata.
  # @raise [ConverterNotFound] If no converter found for the encoding.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#54
  def from_payload(payload); end

  # Convert Ruby value to a payload by going over each encoding converter in order until one can convert.
  #
  # @param value [Object] Ruby value to convert.
  # @raise [ConverterNotFound] If no converters can process the value.
  # @return [Api::Common::V1::Payload] Converted payload.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#37
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#14
class Temporalio::Converters::PayloadConverter::Composite::ConverterNotFound < Temporalio::Error; end

# source://temporalio//lib/temporalio/converters/payload_converter/composite.rb#15
class Temporalio::Converters::PayloadConverter::Composite::EncodingNotSet < Temporalio::Error; end

# Base class for encoding converters that can be used for {Composite} converters. Each converter has an {encoding}
# that should be set on the Payload metadata for values it can process. Implementers must implement {encoding}
#
# source://temporalio//lib/temporalio/converters/payload_converter/encoding.rb#8
class Temporalio::Converters::PayloadConverter::Encoding
  # @raise [NotImplementedError]
  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/encoding.rb#11
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @raise [NotImplementedError]
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/encoding.rb#29
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @raise [NotImplementedError]
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/encoding.rb#20
  def to_payload(value); end
end

# Encoding for all values for +json/plain+ encoding.
#
# source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#11
class Temporalio::Converters::PayloadConverter::JSONPlain < Temporalio::Converters::PayloadConverter::Encoding
  # Create JSONPlain converter.
  #
  # @param parse_options [Hash] Options for {::JSON.parse}.
  # @param generate_options [Hash] Options for {::JSON.generate}.
  # @return [JSONPlain] a new instance of JSONPlain
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#18
  def initialize(parse_options: T.unsafe(nil), generate_options: T.unsafe(nil)); end

  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#25
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#38
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#30
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/json_plain.rb#12
Temporalio::Converters::PayloadConverter::JSONPlain::ENCODING = T.let(T.unsafe(nil), String)

# Encoding for Protobuf values for +json/protobuf+ encoding.
#
# source://temporalio//lib/temporalio/converters/payload_converter/json_protobuf.rb#11
class Temporalio::Converters::PayloadConverter::JSONProtobuf < Temporalio::Converters::PayloadConverter::Encoding
  # @return [String] Encoding that will be put on the payload metadata if this encoding converter can handle the
  #   value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_protobuf.rb#15
  def encoding; end

  # Convert the payload to a Ruby value. The caller confirms the +encoding+ metadata matches {encoding}, so this
  # will error if it cannot convert.
  #
  # @param payload [Api::Common::V1::Payload] Payload to convert.
  # @return [Object] Converted Ruby value.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_protobuf.rb#30
  def from_payload(payload); end

  # Convert value to payload if this encoding converter can handle it, or return +nil+. If the converter can
  # handle it, the resulting payload must have +encoding+ metadata on the payload set to the value of {encoding}.
  #
  # @param value [Object] Ruby value to possibly convert.
  # @return [Api::Common::V1::Payload, nil] Converted payload if it can handle it, +nil+ otherwise.
  #
  # source://temporalio//lib/temporalio/converters/payload_converter/json_protobuf.rb#20
  def to_payload(value); end
end

# source://temporalio//lib/temporalio/converters/payload_converter/json_protobuf.rb#12
Temporalio::Converters::PayloadConverter::JSONProtobuf::ENCODING = T.let(T.unsafe(nil), String)

# Raw value wrapper that has the raw payload. When raw args are configured at implementation time, the inbound
# arguments will be instances of this class. When instances of this class are sent outbound or returned from
# inbound calls, the raw payload will be serialized instead of applying traditional conversion.
#
# source://temporalio//lib/temporalio/converters/raw_value.rb#8
class Temporalio::Converters::RawValue
  # Create a raw value.
  #
  # @param payload [Api::Common::V1::Payload] Payload.
  # @return [RawValue] a new instance of RawValue
  #
  # source://temporalio//lib/temporalio/converters/raw_value.rb#15
  def initialize(payload); end

  # @return [Api::Common::V1::Payload] Payload.
  #
  # source://temporalio//lib/temporalio/converters/raw_value.rb#10
  def payload; end
end

# Superclass for all Temporal errors
#
# source://temporalio//lib/temporalio/error.rb#7
class Temporalio::Error < StandardError
  class << self
    # source://temporalio//lib/temporalio/error.rb#19
    def _with_backtrace_and_cause(err, backtrace:, cause:); end

    # Whether the error represents some form of cancellation from an activity or workflow.
    #
    # @param error [Exception] Error to check.
    # @return [Boolean] True if some form of canceled, false otherwise.
    #
    # source://temporalio//lib/temporalio/error.rb#12
    def canceled?(error); end
  end
end

# Error raised on activity failure.
#
# source://temporalio//lib/temporalio/error/failure.rb#146
class Temporalio::Error::ActivityError < Temporalio::Error::Failure
  # @return [ActivityError] a new instance of ActivityError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#161
  def initialize(message, scheduled_event_id:, started_event_id:, identity:, activity_type:, activity_id:,
                 retry_state:)
  end

  # @return [String] Activity ID.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#156
  def activity_id; end

  # @return [String] Activity type name.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#154
  def activity_type; end

  # @return [String] Client/worker identity.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#152
  def identity; end

  # @return [RetryState, nil] Retry state.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#158
  def retry_state; end

  # @return [Integer] Scheduled event ID for this activity.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#148
  def scheduled_event_id; end

  # @return [Integer] Started event ID for this activity.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#150
  def started_event_id; end
end

# Error raised during workflow/activity execution.
#
# source://temporalio//lib/temporalio/error/failure.rb#33
class Temporalio::Error::ApplicationError < Temporalio::Error::Failure
  # Create an application error.
  #
  # @param message [String] Error message.
  # @param details [Array<Object, nil>] Error details.
  # @param type [String, nil] Error type.
  # @param non_retryable [Boolean] Whether this error should be considered non-retryable.
  # @param next_retry_delay [Float, nil] Specific amount of time to delay before next retry.
  # @return [ApplicationError] a new instance of ApplicationError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#56
  def initialize(message, *details, type: T.unsafe(nil), non_retryable: T.unsafe(nil), next_retry_delay: T.unsafe(nil))
  end

  # @return [Array<Object, nil>] User-defined details on the error.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#35
  def details; end

  # @return [Float, nil] Delay in seconds before the next activity retry attempt.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#47
  def next_retry_delay; end

  # whether the error was marked non-retryable upon creation by the user.
  #
  # @note This is not whether the error is non-retryable via other means such as retry policy. This is just
  # @return [Boolean] Whether the error was set as non-retryable when created.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#44
  def non_retryable; end

  # @return [Boolean] Inverse of {non_retryable}.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#65
  def retryable?; end

  # @return [String, nil] General error type.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#38
  def type; end
end

# Error that occurs when an async activity handle tries to heartbeat and the activity is marked as canceled.
#
# source://temporalio//lib/temporalio/error.rb#99
class Temporalio::Error::AsyncActivityCanceledError < Temporalio::Error
  # @return [AsyncActivityCanceledError] a new instance of AsyncActivityCanceledError
  #
  # source://temporalio//lib/temporalio/error.rb#101
  def initialize; end
end

# Error raised on workflow/activity cancellation.
#
# source://temporalio//lib/temporalio/error/failure.rb#71
class Temporalio::Error::CanceledError < Temporalio::Error::Failure
  # @return [CanceledError] a new instance of CanceledError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#75
  def initialize(message, details: T.unsafe(nil)); end

  # Returns the value of attribute details.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#72
  def details; end
end

# Error raised on child workflow failure.
#
# source://temporalio//lib/temporalio/error/failure.rb#181
class Temporalio::Error::ChildWorkflowError < Temporalio::Error::Failure
  # @return [ChildWorkflowError] a new instance of ChildWorkflowError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#198
  def initialize(message, namespace:, workflow_id:, run_id:, workflow_type:, initiated_event_id:, started_event_id:,
                 retry_state:)
  end

  # @return [Integer] Child workflow initiated event ID.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#191
  def initiated_event_id; end

  # @return [String] Child workflow namespace.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#183
  def namespace; end

  # @return [RetryState, nil] Retry state.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#195
  def retry_state; end

  # @return [String] Child workflow run ID.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#187
  def run_id; end

  # @return [Integer] Child workflow started event ID.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#193
  def started_event_id; end

  # @return [String] Child workflow ID.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#185
  def workflow_id; end

  # @return [String] Child workflow type name.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#189
  def workflow_type; end
end

# Base class for all Temporal serializable failures.
#
# source://temporalio//lib/temporalio/error/failure.rb#9
class Temporalio::Error::Failure < Temporalio::Error; end

# Error raised by a client for a general RPC failure.
#
# source://temporalio//lib/temporalio/error.rb#107
class Temporalio::Error::RPCError < Temporalio::Error
  # @return [RPCError] a new instance of RPCError
  #
  # source://temporalio//lib/temporalio/error.rb#112
  def initialize(message, code:, raw_grpc_status:); end

  # @return [Code] Status code for the error.
  #
  # source://temporalio//lib/temporalio/error.rb#109
  def code; end

  # @return [Api::Common::V1::GrpcStatus] Status of the gRPC call with details.
  #
  # source://temporalio//lib/temporalio/error.rb#119
  def grpc_status; end

  private

  # source://temporalio//lib/temporalio/error.rb#125
  def create_grpc_status; end
end

# Status code for RPC errors. These are gRPC status codes.
#
# source://temporalio//lib/temporalio/error.rb#132
module Temporalio::Error::RPCError::Code; end

# source://temporalio//lib/temporalio/error.rb#143
Temporalio::Error::RPCError::Code::ABORTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#139
Temporalio::Error::RPCError::Code::ALREADY_EXISTS = T.let(T.unsafe(nil), Integer)

# Intentionally one-L while gRPC is two-L
#
# source://temporalio//lib/temporalio/error.rb#134
Temporalio::Error::RPCError::Code::CANCELED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#148
Temporalio::Error::RPCError::Code::DATA_LOSS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#137
Temporalio::Error::RPCError::Code::DEADLINE_EXCEEDED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#142
Temporalio::Error::RPCError::Code::FAILED_PRECONDITION = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#146
Temporalio::Error::RPCError::Code::INTERNAL = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#136
Temporalio::Error::RPCError::Code::INVALID_ARGUMENT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#138
Temporalio::Error::RPCError::Code::NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#133
Temporalio::Error::RPCError::Code::OK = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#144
Temporalio::Error::RPCError::Code::OUT_OF_RANGE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#140
Temporalio::Error::RPCError::Code::PERMISSION_DENIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#141
Temporalio::Error::RPCError::Code::RESOURCE_EXHAUSTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#149
Temporalio::Error::RPCError::Code::UNAUTHENTICATED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#147
Temporalio::Error::RPCError::Code::UNAVAILABLE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#145
Temporalio::Error::RPCError::Code::UNIMPLEMENTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error.rb#135
Temporalio::Error::RPCError::Code::UNKNOWN = T.let(T.unsafe(nil), Integer)

# Current retry state of the workflow/activity during error.
#
# source://temporalio//lib/temporalio/error/failure.rb#135
module Temporalio::Error::RetryState; end

# source://temporalio//lib/temporalio/error/failure.rb#142
Temporalio::Error::RetryState::CANCEL_REQUESTED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#141
Temporalio::Error::RetryState::INTERNAL_SERVER_ERROR = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#136
Temporalio::Error::RetryState::IN_PROGRESS = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#139
Temporalio::Error::RetryState::MAXIMUM_ATTEMPTS_REACHED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#137
Temporalio::Error::RetryState::NON_RETRYABLE_FAILURE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#140
Temporalio::Error::RetryState::RETRY_POLICY_NOT_SET = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#138
Temporalio::Error::RetryState::TIMEOUT = T.let(T.unsafe(nil), Integer)

# Error when a schedule is already running.
#
# source://temporalio//lib/temporalio/error.rb#91
class Temporalio::Error::ScheduleAlreadyRunningError < Temporalio::Error
  # @return [ScheduleAlreadyRunningError] a new instance of ScheduleAlreadyRunningError
  #
  # source://temporalio//lib/temporalio/error.rb#93
  def initialize; end
end

# Error originating in the Temporal server.
#
# source://temporalio//lib/temporalio/error/failure.rb#118
class Temporalio::Error::ServerError < Temporalio::Error::Failure
  # @return [ServerError] a new instance of ServerError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#123
  def initialize(message, non_retryable:); end

  # @return [Boolean] Whether this error is non-retryable.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#120
  def non_retryable; end

  # @return [Boolean] Inverse of {non_retryable}.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#129
  def retryable?; end
end

# Error raised on workflow termination.
#
# source://temporalio//lib/temporalio/error/failure.rb#82
class Temporalio::Error::TerminatedError < Temporalio::Error::Failure
  # @return [TerminatedError] a new instance of TerminatedError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#87
  def initialize(message, details:); end

  # @return [Array<Object?>] User-defined details on the error.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#84
  def details; end
end

# Error raised on workflow/activity timeout.
#
# source://temporalio//lib/temporalio/error/failure.rb#94
class Temporalio::Error::TimeoutError < Temporalio::Error::Failure
  # @return [TimeoutError] a new instance of TimeoutError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#102
  def initialize(message, type:, last_heartbeat_details:); end

  # @return [Array<Object>] Last heartbeat details if this is for an activity heartbeat.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#99
  def last_heartbeat_details; end

  # @return [TimeoutType] Type of timeout error.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#96
  def type; end
end

# Type of timeout error.
#
# source://temporalio//lib/temporalio/error/failure.rb#109
module Temporalio::Error::TimeoutError::TimeoutType; end

# source://temporalio//lib/temporalio/error/failure.rb#113
Temporalio::Error::TimeoutError::TimeoutType::HEARTBEAT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#112
Temporalio::Error::TimeoutError::TimeoutType::SCHEDULE_TO_CLOSE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#111
Temporalio::Error::TimeoutError::TimeoutType::SCHEDULE_TO_START = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/error/failure.rb#110
Temporalio::Error::TimeoutError::TimeoutType::START_TO_CLOSE = T.let(T.unsafe(nil), Integer)

# Error raised by a client or workflow when a workflow execution has already started.
#
# source://temporalio//lib/temporalio/error/failure.rb#13
class Temporalio::Error::WorkflowAlreadyStartedError < Temporalio::Error::Failure
  # @return [WorkflowAlreadyStartedError] a new instance of WorkflowAlreadyStartedError
  #
  # source://temporalio//lib/temporalio/error/failure.rb#24
  def initialize(workflow_id:, workflow_type:, run_id:); end

  # @return [String, nil] Run ID of the already-started workflow if this was raised by the client.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#21
  def run_id; end

  # @return [String] ID of the already-started workflow.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#15
  def workflow_id; end

  # @return [String] Workflow type name of the already-started workflow.
  #
  # source://temporalio//lib/temporalio/error/failure.rb#18
  def workflow_type; end
end

# Error that occurs when a workflow was continued as new.
#
# source://temporalio//lib/temporalio/error.rb#44
class Temporalio::Error::WorkflowContinuedAsNewError < Temporalio::Error
  # @return [WorkflowContinuedAsNewError] a new instance of WorkflowContinuedAsNewError
  #
  # source://temporalio//lib/temporalio/error.rb#49
  def initialize(new_run_id:); end

  # @return [String] New execution run ID the workflow continued to.
  #
  # source://temporalio//lib/temporalio/error.rb#46
  def new_run_id; end
end

# Error that is returned from  when a workflow is unsuccessful.
#
# source://temporalio//lib/temporalio/error.rb#36
class Temporalio::Error::WorkflowFailedError < Temporalio::Error
  # @return [WorkflowFailedError] a new instance of WorkflowFailedError
  #
  # source://temporalio//lib/temporalio/error.rb#38
  def initialize(message = T.unsafe(nil)); end
end

# Error that occurs when a query fails.
#
# source://temporalio//lib/temporalio/error.rb#56
class Temporalio::Error::WorkflowQueryFailedError < Temporalio::Error; end

# Error that occurs when a query was rejected.
#
# source://temporalio//lib/temporalio/error.rb#60
class Temporalio::Error::WorkflowQueryRejectedError < Temporalio::Error
  # @return [WorkflowQueryRejectedError] a new instance of WorkflowQueryRejectedError
  #
  # source://temporalio//lib/temporalio/error.rb#65
  def initialize(status:); end

  # @return [Client::WorkflowExecutionStatus] Workflow execution status causing rejection.
  #
  # source://temporalio//lib/temporalio/error.rb#62
  def status; end
end

# Error that occurs when an update fails.
#
# source://temporalio//lib/temporalio/error.rb#72
class Temporalio::Error::WorkflowUpdateFailedError < Temporalio::Error
  # @return [WorkflowUpdateFailedError] a new instance of WorkflowUpdateFailedError
  #
  # source://temporalio//lib/temporalio/error.rb#74
  def initialize; end
end

# Error that occurs when update RPC call times out or is canceled.
#
# related to the client call itself.
#
# @note This is not related to any general concept of timing out or cancelling a running update, this is only
#
# source://temporalio//lib/temporalio/error.rb#83
class Temporalio::Error::WorkflowUpdateRPCTimeoutOrCanceledError < Temporalio::Error
  # @return [WorkflowUpdateRPCTimeoutOrCanceledError] a new instance of WorkflowUpdateRPCTimeoutOrCanceledError
  #
  # source://temporalio//lib/temporalio/error.rb#85
  def initialize; end
end

# source://temporalio//lib/temporalio/internal/bridge.rb#19
module Temporalio::Internal; end

# source://temporalio//lib/temporalio/internal/bridge.rb#20
module Temporalio::Internal::Bridge
  class << self
    # source://temporalio//lib/temporalio/internal/bridge.rb#21
    def assert_fiber_compatibility!; end

    # source://temporalio//lib/temporalio/internal/bridge.rb#28
    def fibers_supported; end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/activity_result/activity_result.rb#21
module Temporalio::Internal::Bridge::Api; end

# source://temporalio//lib/temporalio/internal/bridge/api/activity_result/activity_result.rb#22
module Temporalio::Internal::Bridge::Api::ActivityResult; end

class Temporalio::Internal::Bridge::Api::ActivityResult::ActivityExecutionResult < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::ActivityResult::ActivityResolution < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityResult::Cancellation < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityResult::DoBackoff < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityResult::Failure < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityResult::Success < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityResult::WillCompleteAsync < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/activity_task/activity_task.rb#22
module Temporalio::Internal::Bridge::Api::ActivityTask; end

module Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/activity_task/activity_task.rb#26
Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason::CANCELLED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/activity_task/activity_task.rb#26
Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason::NOT_FOUND = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/activity_task/activity_task.rb#26
Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason::TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/activity_task/activity_task.rb#26
Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason::WORKER_SHUTDOWN = T.let(T.unsafe(nil), Integer)

class Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityTask::Cancel < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ActivityTask::Start < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#21
module Temporalio::Internal::Bridge::Api::ChildWorkflow; end

class Temporalio::Internal::Bridge::Api::ChildWorkflow::Cancellation < Google::Protobuf::AbstractMessage; end

module Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowCancellationType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#28
Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowCancellationType::ABANDON = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#28
Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowCancellationType::TRY_CANCEL = T.let(T.unsafe(nil),
                                                                                                    Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#28
Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowCancellationType::WAIT_CANCELLATION_COMPLETED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#28
Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowCancellationType::WAIT_CANCELLATION_REQUESTED = T.let(
  T.unsafe(nil), Integer
)

class Temporalio::Internal::Bridge::Api::ChildWorkflow::ChildWorkflowResult < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::ChildWorkflow::Failure < Google::Protobuf::AbstractMessage; end

module Temporalio::Internal::Bridge::Api::ChildWorkflow::ParentClosePolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#26
Temporalio::Internal::Bridge::Api::ChildWorkflow::ParentClosePolicy::PARENT_CLOSE_POLICY_ABANDON = T.let(T.unsafe(nil),
                                                                                                         Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#26
Temporalio::Internal::Bridge::Api::ChildWorkflow::ParentClosePolicy::PARENT_CLOSE_POLICY_REQUEST_CANCEL = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#26
Temporalio::Internal::Bridge::Api::ChildWorkflow::ParentClosePolicy::PARENT_CLOSE_POLICY_TERMINATE = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#26
Temporalio::Internal::Bridge::Api::ChildWorkflow::ParentClosePolicy::PARENT_CLOSE_POLICY_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

module Temporalio::Internal::Bridge::Api::ChildWorkflow::StartChildWorkflowExecutionFailedCause
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#27
Temporalio::Internal::Bridge::Api::ChildWorkflow::StartChildWorkflowExecutionFailedCause::START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/child_workflow/child_workflow.rb#27
Temporalio::Internal::Bridge::Api::ChildWorkflow::StartChildWorkflowExecutionFailedCause::START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS = T.let(
  T.unsafe(nil), Integer
)

class Temporalio::Internal::Bridge::Api::ChildWorkflow::Success < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/common/common.rb#19
module Temporalio::Internal::Bridge::Api::Common; end

class Temporalio::Internal::Bridge::Api::Common::NamespacedWorkflowExecution < Google::Protobuf::AbstractMessage; end

module Temporalio::Internal::Bridge::Api::Common::VersioningIntent
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/common/common.rb#21
Temporalio::Internal::Bridge::Api::Common::VersioningIntent::COMPATIBLE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/common/common.rb#21
Temporalio::Internal::Bridge::Api::Common::VersioningIntent::DEFAULT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/common/common.rb#21
Temporalio::Internal::Bridge::Api::Common::VersioningIntent::UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/core_interface.rb#29
module Temporalio::Internal::Bridge::Api::CoreInterface; end

class Temporalio::Internal::Bridge::Api::CoreInterface::ActivityHeartbeat < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::CoreInterface::ActivitySlotInfo < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::CoreInterface::ActivityTaskCompletion < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::CoreInterface::LocalActivitySlotInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::CoreInterface::NexusSlotInfo < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::CoreInterface::WorkflowSlotInfo < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/external_data/external_data.rb#20
module Temporalio::Internal::Bridge::Api::ExternalData; end

class Temporalio::Internal::Bridge::Api::ExternalData::LocalActivityMarkerData < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::ExternalData::PatchedMarkerData < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/nexus/nexus.rb#23
module Temporalio::Internal::Bridge::Api::Nexus; end

class Temporalio::Internal::Bridge::Api::Nexus::CancelNexusTask < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::Nexus::NexusOperationResult < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::Nexus::NexusTask < Google::Protobuf::AbstractMessage; end

module Temporalio::Internal::Bridge::Api::Nexus::NexusTaskCancelReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/nexus/nexus.rb#28
Temporalio::Internal::Bridge::Api::Nexus::NexusTaskCancelReason::TIMED_OUT = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/nexus/nexus.rb#28
Temporalio::Internal::Bridge::Api::Nexus::NexusTaskCancelReason::WORKER_SHUTDOWN = T.let(T.unsafe(nil), Integer)

class Temporalio::Internal::Bridge::Api::Nexus::NexusTaskCompletion < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#29
module Temporalio::Internal::Bridge::Api::WorkflowActivation; end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::CancelWorkflow < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowActivation::DoUpdate < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowActivation::FireTimer < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::InitializeWorkflow < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::NotifyHasPatch < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowActivation::QueryWorkflow < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache < Google::Protobuf::AbstractMessage; end

module Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::CACHE_FULL = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::CACHE_MISS = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::FATAL = T.let(T.unsafe(nil),
                                                                                                      Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::LANG_FAIL = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::LANG_REQUESTED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::NONDETERMINISM = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::PAGINATION_OR_HISTORY_FETCH = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::TASK_NOT_FOUND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::UNHANDLED_COMMAND = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::UNSPECIFIED = T.let(
  T.unsafe(nil), Integer
)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_activation/workflow_activation.rb#51
Temporalio::Internal::Bridge::Api::WorkflowActivation::RemoveFromCache::EvictionReason::WORKFLOW_EXECUTION_ENDING = T.let(
  T.unsafe(nil), Integer
)

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveActivity < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveChildWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveChildWorkflowExecutionStart < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveChildWorkflowExecutionStartCancelled < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveChildWorkflowExecutionStartFailure < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveChildWorkflowExecutionStartSuccess < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveNexusOperation < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveNexusOperationStart < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveRequestCancelExternalWorkflow < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::ResolveSignalExternalWorkflow < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::SignalWorkflow < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowActivation::UpdateRandomSeed < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::WorkflowActivation < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowActivation::WorkflowActivationJob < Google::Protobuf::AbstractMessage
end

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_commands/workflow_commands.rb#27
module Temporalio::Internal::Bridge::Api::WorkflowCommands; end

module Temporalio::Internal::Bridge::Api::WorkflowCommands::ActivityCancellationType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_commands/workflow_commands.rb#52
Temporalio::Internal::Bridge::Api::WorkflowCommands::ActivityCancellationType::ABANDON = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_commands/workflow_commands.rb#52
Temporalio::Internal::Bridge::Api::WorkflowCommands::ActivityCancellationType::TRY_CANCEL = T.let(T.unsafe(nil),
                                                                                                  Integer)

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_commands/workflow_commands.rb#52
Temporalio::Internal::Bridge::Api::WorkflowCommands::ActivityCancellationType::WAIT_CANCELLATION_COMPLETED = T.let(
  T.unsafe(nil), Integer
)

class Temporalio::Internal::Bridge::Api::WorkflowCommands::CancelChildWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::CancelSignalWorkflow < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::CancelTimer < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::CancelWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::CompleteWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::ContinueAsNewWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::FailWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::ModifyWorkflowProperties < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::QueryResult < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowCommands::QuerySuccess < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::RequestCancelActivity < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::RequestCancelExternalWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::RequestCancelLocalActivity < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::RequestCancelNexusOperation < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::ScheduleActivity < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::ScheduleLocalActivity < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::ScheduleNexusOperation < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::SetPatchMarker < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::SignalExternalWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::StartChildWorkflowExecution < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::StartTimer < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowCommands::UpdateResponse < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::UpsertWorkflowSearchAttributes < Google::Protobuf::AbstractMessage
end

class Temporalio::Internal::Bridge::Api::WorkflowCommands::WorkflowCommand < Google::Protobuf::AbstractMessage; end

# source://temporalio//lib/temporalio/internal/bridge/api/workflow_completion/workflow_completion.rb#22
module Temporalio::Internal::Bridge::Api::WorkflowCompletion; end

class Temporalio::Internal::Bridge::Api::WorkflowCompletion::Failure < Google::Protobuf::AbstractMessage; end
class Temporalio::Internal::Bridge::Api::WorkflowCompletion::Success < Google::Protobuf::AbstractMessage; end

class Temporalio::Internal::Bridge::Api::WorkflowCompletion::WorkflowActivationCompletion < Google::Protobuf::AbstractMessage
end

# source://temporalio//lib/temporalio/internal/bridge/client.rb#8
class Temporalio::Internal::Bridge::Client
  # source://temporalio//lib/temporalio/internal/bridge/client.rb#63
  def _invoke_rpc(service:, rpc:, request:, response_class:, rpc_options:); end

  def async_invoke_rpc(*_arg0); end
  def update_api_key(_arg0); end
  def update_metadata(_arg0); end

  class << self
    def async_new(_arg0, _arg1, _arg2); end

    # source://temporalio//lib/temporalio/internal/bridge/client.rb#54
    def new(runtime, options); end
  end
end

class Temporalio::Internal::Bridge::Client::CancellationToken
  def cancel; end

  class << self
    def new; end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/client.rb#47
class Temporalio::Internal::Bridge::Client::HTTPConnectProxyOptions < Struct
  # Returns the value of attribute basic_auth_pass
  #
  # @return [Object] the current value of basic_auth_pass
  def basic_auth_pass; end

  # Sets the attribute basic_auth_pass
  #
  # @param value [Object] the value to set the attribute basic_auth_pass to.
  # @return [Object] the newly set value
  def basic_auth_pass=(_); end

  # Returns the value of attribute basic_auth_user
  #
  # @return [Object] the current value of basic_auth_user
  def basic_auth_user; end

  # Sets the attribute basic_auth_user
  #
  # @param value [Object] the value to set the attribute basic_auth_user to.
  # @return [Object] the newly set value
  def basic_auth_user=(_); end

  # Returns the value of attribute target_host
  #
  # @return [Object] the current value of target_host
  def target_host; end

  # Sets the attribute target_host
  #
  # @param value [Object] the value to set the attribute target_host to.
  # @return [Object] the newly set value
  def target_host=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/client.rb#41
class Temporalio::Internal::Bridge::Client::KeepAliveOptions < Struct
  # Returns the value of attribute interval
  #
  # @return [Object] the current value of interval
  def interval; end

  # Sets the attribute interval
  #
  # @param value [Object] the value to set the attribute interval to.
  # @return [Object] the newly set value
  def interval=(_); end

  # Returns the value of attribute timeout
  #
  # @return [Object] the current value of timeout
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value [Object] the value to set the attribute timeout to.
  # @return [Object] the newly set value
  def timeout=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/client.rb#9
class Temporalio::Internal::Bridge::Client::Options < Struct
  # Returns the value of attribute api_key
  #
  # @return [Object] the current value of api_key
  def api_key; end

  # Sets the attribute api_key
  #
  # @param value [Object] the value to set the attribute api_key to.
  # @return [Object] the newly set value
  def api_key=(_); end

  # Returns the value of attribute client_name
  #
  # @return [Object] the current value of client_name
  def client_name; end

  # Sets the attribute client_name
  #
  # @param value [Object] the value to set the attribute client_name to.
  # @return [Object] the newly set value
  def client_name=(_); end

  # Returns the value of attribute client_version
  #
  # @return [Object] the current value of client_version
  def client_version; end

  # Sets the attribute client_version
  #
  # @param value [Object] the value to set the attribute client_version to.
  # @return [Object] the newly set value
  def client_version=(_); end

  # Returns the value of attribute http_connect_proxy
  #
  # @return [Object] the current value of http_connect_proxy
  def http_connect_proxy; end

  # Sets the attribute http_connect_proxy
  #
  # @param value [Object] the value to set the attribute http_connect_proxy to.
  # @return [Object] the newly set value
  def http_connect_proxy=(_); end

  # Returns the value of attribute identity
  #
  # @return [Object] the current value of identity
  def identity; end

  # Sets the attribute identity
  #
  # @param value [Object] the value to set the attribute identity to.
  # @return [Object] the newly set value
  def identity=(_); end

  # Returns the value of attribute keep_alive
  #
  # @return [Object] the current value of keep_alive
  def keep_alive; end

  # Sets the attribute keep_alive
  #
  # @param value [Object] the value to set the attribute keep_alive to.
  # @return [Object] the newly set value
  def keep_alive=(_); end

  # Returns the value of attribute rpc_metadata
  #
  # @return [Object] the current value of rpc_metadata
  def rpc_metadata; end

  # Sets the attribute rpc_metadata
  #
  # @param value [Object] the value to set the attribute rpc_metadata to.
  # @return [Object] the newly set value
  def rpc_metadata=(_); end

  # Returns the value of attribute rpc_retry
  #
  # @return [Object] the current value of rpc_retry
  def rpc_retry; end

  # Sets the attribute rpc_retry
  #
  # @param value [Object] the value to set the attribute rpc_retry to.
  # @return [Object] the newly set value
  def rpc_retry=(_); end

  # Returns the value of attribute target_host
  #
  # @return [Object] the current value of target_host
  def target_host; end

  # Sets the attribute target_host
  #
  # @param value [Object] the value to set the attribute target_host to.
  # @return [Object] the newly set value
  def target_host=(_); end

  # Returns the value of attribute tls
  #
  # @return [Object] the current value of tls
  def tls; end

  # Sets the attribute tls
  #
  # @param value [Object] the value to set the attribute tls to.
  # @return [Object] the newly set value
  def tls=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Temporalio::Internal::Bridge::Client::RPCFailure < Temporalio::Internal::Bridge::Error
  def code; end
  def details; end
  def message; end
end

# source://temporalio//lib/temporalio/internal/bridge/client.rb#31
class Temporalio::Internal::Bridge::Client::RPCRetryOptions < Struct
  # Returns the value of attribute initial_interval
  #
  # @return [Object] the current value of initial_interval
  def initial_interval; end

  # Sets the attribute initial_interval
  #
  # @param value [Object] the value to set the attribute initial_interval to.
  # @return [Object] the newly set value
  def initial_interval=(_); end

  # Returns the value of attribute max_elapsed_time
  #
  # @return [Object] the current value of max_elapsed_time
  def max_elapsed_time; end

  # Sets the attribute max_elapsed_time
  #
  # @param value [Object] the value to set the attribute max_elapsed_time to.
  # @return [Object] the newly set value
  def max_elapsed_time=(_); end

  # Returns the value of attribute max_interval
  #
  # @return [Object] the current value of max_interval
  def max_interval; end

  # Sets the attribute max_interval
  #
  # @param value [Object] the value to set the attribute max_interval to.
  # @return [Object] the newly set value
  def max_interval=(_); end

  # Returns the value of attribute max_retries
  #
  # @return [Object] the current value of max_retries
  def max_retries; end

  # Sets the attribute max_retries
  #
  # @param value [Object] the value to set the attribute max_retries to.
  # @return [Object] the newly set value
  def max_retries=(_); end

  # Returns the value of attribute multiplier
  #
  # @return [Object] the current value of multiplier
  def multiplier; end

  # Sets the attribute multiplier
  #
  # @param value [Object] the value to set the attribute multiplier to.
  # @return [Object] the newly set value
  def multiplier=(_); end

  # Returns the value of attribute randomization_factor
  #
  # @return [Object] the current value of randomization_factor
  def randomization_factor; end

  # Sets the attribute randomization_factor
  #
  # @param value [Object] the value to set the attribute randomization_factor to.
  # @return [Object] the newly set value
  def randomization_factor=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

Temporalio::Internal::Bridge::Client::SERVICE_CLOUD = T.let(T.unsafe(nil), Integer)
Temporalio::Internal::Bridge::Client::SERVICE_HEALTH = T.let(T.unsafe(nil), Integer)
Temporalio::Internal::Bridge::Client::SERVICE_OPERATOR = T.let(T.unsafe(nil), Integer)
Temporalio::Internal::Bridge::Client::SERVICE_TEST = T.let(T.unsafe(nil), Integer)
Temporalio::Internal::Bridge::Client::SERVICE_WORKFLOW = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/internal/bridge/client.rb#23
class Temporalio::Internal::Bridge::Client::TLSOptions < Struct
  # Returns the value of attribute client_cert
  #
  # @return [Object] the current value of client_cert
  def client_cert; end

  # Sets the attribute client_cert
  #
  # @param value [Object] the value to set the attribute client_cert to.
  # @return [Object] the newly set value
  def client_cert=(_); end

  # Returns the value of attribute client_private_key
  #
  # @return [Object] the current value of client_private_key
  def client_private_key; end

  # Sets the attribute client_private_key
  #
  # @param value [Object] the value to set the attribute client_private_key to.
  # @return [Object] the newly set value
  def client_private_key=(_); end

  # Returns the value of attribute domain
  #
  # @return [Object] the current value of domain
  def domain; end

  # Sets the attribute domain
  #
  # @param value [Object] the value to set the attribute domain to.
  # @return [Object] the newly set value
  def domain=(_); end

  # Returns the value of attribute server_root_ca_cert
  #
  # @return [Object] the current value of server_root_ca_cert
  def server_root_ca_cert; end

  # Sets the attribute server_root_ca_cert
  #
  # @param value [Object] the value to set the attribute server_root_ca_cert to.
  # @return [Object] the newly set value
  def server_root_ca_cert=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Temporalio::Internal::Bridge::Error < StandardError; end

class Temporalio::Internal::Bridge::Metric
  def record_value(_arg0, _arg1); end

  class << self
    def new(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5); end
  end
end

class Temporalio::Internal::Bridge::Metric::Attributes
  def with_additional(_arg0); end
end

class Temporalio::Internal::Bridge::Metric::Meter
  def default_attributes; end

  class << self
    def new(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#6
class Temporalio::Internal::Bridge::Runtime
  def run_command_loop; end

  class << self
    def new(_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#18
class Temporalio::Internal::Bridge::Runtime::LoggingOptions < Struct
  # Returns the value of attribute forward_to
  #
  # @return [Object] the current value of forward_to
  def forward_to; end

  # Sets the attribute forward_to
  #
  # @param value [Object] the value to set the attribute forward_to to.
  # @return [Object] the newly set value
  def forward_to=(_); end

  # Returns the value of attribute log_filter
  #
  # @return [Object] the current value of log_filter
  def log_filter; end

  # Sets the attribute log_filter
  #
  # @param value [Object] the value to set the attribute log_filter to.
  # @return [Object] the newly set value
  def log_filter=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#24
class Temporalio::Internal::Bridge::Runtime::MetricsOptions < Struct
  # Returns the value of attribute attach_service_name
  #
  # @return [Object] the current value of attach_service_name
  def attach_service_name; end

  # Sets the attribute attach_service_name
  #
  # @param value [Object] the value to set the attribute attach_service_name to.
  # @return [Object] the newly set value
  def attach_service_name=(_); end

  # Returns the value of attribute buffered_with_size
  #
  # @return [Object] the current value of buffered_with_size
  def buffered_with_size; end

  # Sets the attribute buffered_with_size
  #
  # @param value [Object] the value to set the attribute buffered_with_size to.
  # @return [Object] the newly set value
  def buffered_with_size=(_); end

  # Returns the value of attribute global_tags
  #
  # @return [Object] the current value of global_tags
  def global_tags; end

  # Sets the attribute global_tags
  #
  # @param value [Object] the value to set the attribute global_tags to.
  # @return [Object] the newly set value
  def global_tags=(_); end

  # Returns the value of attribute metric_prefix
  #
  # @return [Object] the current value of metric_prefix
  def metric_prefix; end

  # Sets the attribute metric_prefix
  #
  # @param value [Object] the value to set the attribute metric_prefix to.
  # @return [Object] the newly set value
  def metric_prefix=(_); end

  # Returns the value of attribute opentelemetry
  #
  # @return [Object] the current value of opentelemetry
  def opentelemetry; end

  # Sets the attribute opentelemetry
  #
  # @param value [Object] the value to set the attribute opentelemetry to.
  # @return [Object] the newly set value
  def opentelemetry=(_); end

  # Returns the value of attribute prometheus
  #
  # @return [Object] the current value of prometheus
  def prometheus; end

  # Sets the attribute prometheus
  #
  # @param value [Object] the value to set the attribute prometheus to.
  # @return [Object] the newly set value
  def prometheus=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#34
class Temporalio::Internal::Bridge::Runtime::OpenTelemetryMetricsOptions < Struct
  # Returns the value of attribute durations_as_seconds
  #
  # @return [Object] the current value of durations_as_seconds
  def durations_as_seconds; end

  # Sets the attribute durations_as_seconds
  #
  # @param value [Object] the value to set the attribute durations_as_seconds to.
  # @return [Object] the newly set value
  def durations_as_seconds=(_); end

  # Returns the value of attribute headers
  #
  # @return [Object] the current value of headers
  def headers; end

  # Sets the attribute headers
  #
  # @param value [Object] the value to set the attribute headers to.
  # @return [Object] the newly set value
  def headers=(_); end

  # Returns the value of attribute metric_periodicity
  #
  # @return [Object] the current value of metric_periodicity
  def metric_periodicity; end

  # Sets the attribute metric_periodicity
  #
  # @param value [Object] the value to set the attribute metric_periodicity to.
  # @return [Object] the newly set value
  def metric_periodicity=(_); end

  # Returns the value of attribute metric_temporality_delta
  #
  # @return [Object] the current value of metric_temporality_delta
  def metric_temporality_delta; end

  # Sets the attribute metric_temporality_delta
  #
  # @param value [Object] the value to set the attribute metric_temporality_delta to.
  # @return [Object] the newly set value
  def metric_temporality_delta=(_); end

  # Returns the value of attribute url
  #
  # @return [Object] the current value of url
  def url; end

  # Sets the attribute url
  #
  # @param value [Object] the value to set the attribute url to.
  # @return [Object] the newly set value
  def url=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#7
class Temporalio::Internal::Bridge::Runtime::Options < Struct
  # Returns the value of attribute telemetry
  #
  # @return [Object] the current value of telemetry
  def telemetry; end

  # Sets the attribute telemetry
  #
  # @param value [Object] the value to set the attribute telemetry to.
  # @return [Object] the newly set value
  def telemetry=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#43
class Temporalio::Internal::Bridge::Runtime::PrometheusMetricsOptions < Struct
  # Returns the value of attribute bind_address
  #
  # @return [Object] the current value of bind_address
  def bind_address; end

  # Sets the attribute bind_address
  #
  # @param value [Object] the value to set the attribute bind_address to.
  # @return [Object] the newly set value
  def bind_address=(_); end

  # Returns the value of attribute counters_total_suffix
  #
  # @return [Object] the current value of counters_total_suffix
  def counters_total_suffix; end

  # Sets the attribute counters_total_suffix
  #
  # @param value [Object] the value to set the attribute counters_total_suffix to.
  # @return [Object] the newly set value
  def counters_total_suffix=(_); end

  # Returns the value of attribute durations_as_seconds
  #
  # @return [Object] the current value of durations_as_seconds
  def durations_as_seconds; end

  # Sets the attribute durations_as_seconds
  #
  # @param value [Object] the value to set the attribute durations_as_seconds to.
  # @return [Object] the newly set value
  def durations_as_seconds=(_); end

  # Returns the value of attribute unit_suffix
  #
  # @return [Object] the current value of unit_suffix
  def unit_suffix; end

  # Sets the attribute unit_suffix
  #
  # @param value [Object] the value to set the attribute unit_suffix to.
  # @return [Object] the newly set value
  def unit_suffix=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/runtime.rb#12
class Temporalio::Internal::Bridge::Runtime::TelemetryOptions < Struct
  # Returns the value of attribute logging
  #
  # @return [Object] the current value of logging
  def logging; end

  # Sets the attribute logging
  #
  # @param value [Object] the value to set the attribute logging to.
  # @return [Object] the newly set value
  def logging=(_); end

  # Returns the value of attribute metrics
  #
  # @return [Object] the current value of metrics
  def metrics; end

  # Sets the attribute metrics
  #
  # @param value [Object] the value to set the attribute metrics to.
  # @return [Object] the newly set value
  def metrics=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module Temporalio::Internal::Bridge::Testing; end

class Temporalio::Internal::Bridge::Testing::EphemeralServer
  def async_shutdown(_arg0); end
  def target; end

  class << self
    def async_start_dev_server(_arg0, _arg1, _arg2); end
    def async_start_test_server(_arg0, _arg1, _arg2); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/worker.rb#8
class Temporalio::Internal::Bridge::Worker
  def async_complete_activity_task(_arg0, _arg1); end
  def async_complete_workflow_activation(_arg0, _arg1, _arg2); end
  def async_validate(_arg0); end

  # source://temporalio//lib/temporalio/internal/bridge/worker.rb#70
  def complete_activity_task(proto); end

  # source://temporalio//lib/temporalio/internal/bridge/worker.rb#77
  def complete_activity_task_in_background(proto); end

  def initiate_shutdown; end
  def record_activity_heartbeat(_arg0); end
  def replace_client(_arg0); end

  # source://temporalio//lib/temporalio/internal/bridge/worker.rb#63
  def validate; end

  class << self
    def async_finalize_all(_arg0, _arg1); end
    def async_poll_all(_arg0, _arg1); end

    # source://temporalio//lib/temporalio/internal/bridge/worker.rb#56
    def finalize_shutdown_all(workers); end

    def new(_arg0, _arg1); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/worker.rb#9
class Temporalio::Internal::Bridge::Worker::Options < Struct
  # Returns the value of attribute activity
  #
  # @return [Object] the current value of activity
  def activity; end

  # Sets the attribute activity
  #
  # @param value [Object] the value to set the attribute activity to.
  # @return [Object] the newly set value
  def activity=(_); end

  # Returns the value of attribute build_id
  #
  # @return [Object] the current value of build_id
  def build_id; end

  # Sets the attribute build_id
  #
  # @param value [Object] the value to set the attribute build_id to.
  # @return [Object] the newly set value
  def build_id=(_); end

  # Returns the value of attribute default_heartbeat_throttle_interval
  #
  # @return [Object] the current value of default_heartbeat_throttle_interval
  def default_heartbeat_throttle_interval; end

  # Sets the attribute default_heartbeat_throttle_interval
  #
  # @param value [Object] the value to set the attribute default_heartbeat_throttle_interval to.
  # @return [Object] the newly set value
  def default_heartbeat_throttle_interval=(_); end

  # Returns the value of attribute graceful_shutdown_period
  #
  # @return [Object] the current value of graceful_shutdown_period
  def graceful_shutdown_period; end

  # Sets the attribute graceful_shutdown_period
  #
  # @param value [Object] the value to set the attribute graceful_shutdown_period to.
  # @return [Object] the newly set value
  def graceful_shutdown_period=(_); end

  # Returns the value of attribute identity_override
  #
  # @return [Object] the current value of identity_override
  def identity_override; end

  # Sets the attribute identity_override
  #
  # @param value [Object] the value to set the attribute identity_override to.
  # @return [Object] the newly set value
  def identity_override=(_); end

  # Returns the value of attribute max_cached_workflows
  #
  # @return [Object] the current value of max_cached_workflows
  def max_cached_workflows; end

  # Sets the attribute max_cached_workflows
  #
  # @param value [Object] the value to set the attribute max_cached_workflows to.
  # @return [Object] the newly set value
  def max_cached_workflows=(_); end

  # Returns the value of attribute max_concurrent_activity_task_polls
  #
  # @return [Object] the current value of max_concurrent_activity_task_polls
  def max_concurrent_activity_task_polls; end

  # Sets the attribute max_concurrent_activity_task_polls
  #
  # @param value [Object] the value to set the attribute max_concurrent_activity_task_polls to.
  # @return [Object] the newly set value
  def max_concurrent_activity_task_polls=(_); end

  # Returns the value of attribute max_concurrent_workflow_task_polls
  #
  # @return [Object] the current value of max_concurrent_workflow_task_polls
  def max_concurrent_workflow_task_polls; end

  # Sets the attribute max_concurrent_workflow_task_polls
  #
  # @param value [Object] the value to set the attribute max_concurrent_workflow_task_polls to.
  # @return [Object] the newly set value
  def max_concurrent_workflow_task_polls=(_); end

  # Returns the value of attribute max_heartbeat_throttle_interval
  #
  # @return [Object] the current value of max_heartbeat_throttle_interval
  def max_heartbeat_throttle_interval; end

  # Sets the attribute max_heartbeat_throttle_interval
  #
  # @param value [Object] the value to set the attribute max_heartbeat_throttle_interval to.
  # @return [Object] the newly set value
  def max_heartbeat_throttle_interval=(_); end

  # Returns the value of attribute max_task_queue_activities_per_second
  #
  # @return [Object] the current value of max_task_queue_activities_per_second
  def max_task_queue_activities_per_second; end

  # Sets the attribute max_task_queue_activities_per_second
  #
  # @param value [Object] the value to set the attribute max_task_queue_activities_per_second to.
  # @return [Object] the newly set value
  def max_task_queue_activities_per_second=(_); end

  # Returns the value of attribute max_worker_activities_per_second
  #
  # @return [Object] the current value of max_worker_activities_per_second
  def max_worker_activities_per_second; end

  # Sets the attribute max_worker_activities_per_second
  #
  # @param value [Object] the value to set the attribute max_worker_activities_per_second to.
  # @return [Object] the newly set value
  def max_worker_activities_per_second=(_); end

  # Returns the value of attribute namespace
  #
  # @return [Object] the current value of namespace
  def namespace; end

  # Sets the attribute namespace
  #
  # @param value [Object] the value to set the attribute namespace to.
  # @return [Object] the newly set value
  def namespace=(_); end

  # Returns the value of attribute no_remote_activities
  #
  # @return [Object] the current value of no_remote_activities
  def no_remote_activities; end

  # Sets the attribute no_remote_activities
  #
  # @param value [Object] the value to set the attribute no_remote_activities to.
  # @return [Object] the newly set value
  def no_remote_activities=(_); end

  # Returns the value of attribute nondeterminism_as_workflow_fail
  #
  # @return [Object] the current value of nondeterminism_as_workflow_fail
  def nondeterminism_as_workflow_fail; end

  # Sets the attribute nondeterminism_as_workflow_fail
  #
  # @param value [Object] the value to set the attribute nondeterminism_as_workflow_fail to.
  # @return [Object] the newly set value
  def nondeterminism_as_workflow_fail=(_); end

  # Returns the value of attribute nondeterminism_as_workflow_fail_for_types
  #
  # @return [Object] the current value of nondeterminism_as_workflow_fail_for_types
  def nondeterminism_as_workflow_fail_for_types; end

  # Sets the attribute nondeterminism_as_workflow_fail_for_types
  #
  # @param value [Object] the value to set the attribute nondeterminism_as_workflow_fail_for_types to.
  # @return [Object] the newly set value
  def nondeterminism_as_workflow_fail_for_types=(_); end

  # Returns the value of attribute nonsticky_to_sticky_poll_ratio
  #
  # @return [Object] the current value of nonsticky_to_sticky_poll_ratio
  def nonsticky_to_sticky_poll_ratio; end

  # Sets the attribute nonsticky_to_sticky_poll_ratio
  #
  # @param value [Object] the value to set the attribute nonsticky_to_sticky_poll_ratio to.
  # @return [Object] the newly set value
  def nonsticky_to_sticky_poll_ratio=(_); end

  # Returns the value of attribute sticky_queue_schedule_to_start_timeout
  #
  # @return [Object] the current value of sticky_queue_schedule_to_start_timeout
  def sticky_queue_schedule_to_start_timeout; end

  # Sets the attribute sticky_queue_schedule_to_start_timeout
  #
  # @param value [Object] the value to set the attribute sticky_queue_schedule_to_start_timeout to.
  # @return [Object] the newly set value
  def sticky_queue_schedule_to_start_timeout=(_); end

  # Returns the value of attribute task_queue
  #
  # @return [Object] the current value of task_queue
  def task_queue; end

  # Sets the attribute task_queue
  #
  # @param value [Object] the value to set the attribute task_queue to.
  # @return [Object] the newly set value
  def task_queue=(_); end

  # Returns the value of attribute tuner
  #
  # @return [Object] the current value of tuner
  def tuner; end

  # Sets the attribute tuner
  #
  # @param value [Object] the value to set the attribute tuner to.
  # @return [Object] the newly set value
  def tuner=(_); end

  # Returns the value of attribute use_worker_versioning
  #
  # @return [Object] the current value of use_worker_versioning
  def use_worker_versioning; end

  # Sets the attribute use_worker_versioning
  #
  # @param value [Object] the value to set the attribute use_worker_versioning to.
  # @return [Object] the newly set value
  def use_worker_versioning=(_); end

  # Returns the value of attribute workflow
  #
  # @return [Object] the current value of workflow
  def workflow; end

  # Sets the attribute workflow
  #
  # @param value [Object] the value to set the attribute workflow to.
  # @return [Object] the newly set value
  def workflow=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/worker.rb#34
class Temporalio::Internal::Bridge::Worker::TunerOptions < Struct
  # Returns the value of attribute activity_slot_supplier
  #
  # @return [Object] the current value of activity_slot_supplier
  def activity_slot_supplier; end

  # Sets the attribute activity_slot_supplier
  #
  # @param value [Object] the value to set the attribute activity_slot_supplier to.
  # @return [Object] the newly set value
  def activity_slot_supplier=(_); end

  # Returns the value of attribute local_activity_slot_supplier
  #
  # @return [Object] the current value of local_activity_slot_supplier
  def local_activity_slot_supplier; end

  # Sets the attribute local_activity_slot_supplier
  #
  # @param value [Object] the value to set the attribute local_activity_slot_supplier to.
  # @return [Object] the newly set value
  def local_activity_slot_supplier=(_); end

  # Returns the value of attribute workflow_slot_supplier
  #
  # @return [Object] the current value of workflow_slot_supplier
  def workflow_slot_supplier; end

  # Sets the attribute workflow_slot_supplier
  #
  # @param value [Object] the value to set the attribute workflow_slot_supplier to.
  # @return [Object] the newly set value
  def workflow_slot_supplier=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/worker.rb#47
class Temporalio::Internal::Bridge::Worker::TunerResourceBasedSlotSupplierOptions < Struct
  # Returns the value of attribute max_slots
  #
  # @return [Object] the current value of max_slots
  def max_slots; end

  # Sets the attribute max_slots
  #
  # @param value [Object] the value to set the attribute max_slots to.
  # @return [Object] the newly set value
  def max_slots=(_); end

  # Returns the value of attribute min_slots
  #
  # @return [Object] the current value of min_slots
  def min_slots; end

  # Sets the attribute min_slots
  #
  # @param value [Object] the value to set the attribute min_slots to.
  # @return [Object] the newly set value
  def min_slots=(_); end

  # Returns the value of attribute ramp_throttle
  #
  # @return [Object] the current value of ramp_throttle
  def ramp_throttle; end

  # Sets the attribute ramp_throttle
  #
  # @param value [Object] the value to set the attribute ramp_throttle to.
  # @return [Object] the newly set value
  def ramp_throttle=(_); end

  # Returns the value of attribute target_cpu_usage
  #
  # @return [Object] the current value of target_cpu_usage
  def target_cpu_usage; end

  # Sets the attribute target_cpu_usage
  #
  # @param value [Object] the value to set the attribute target_cpu_usage to.
  # @return [Object] the newly set value
  def target_cpu_usage=(_); end

  # Returns the value of attribute target_mem_usage
  #
  # @return [Object] the current value of target_mem_usage
  def target_mem_usage; end

  # Sets the attribute target_mem_usage
  #
  # @param value [Object] the value to set the attribute target_mem_usage to.
  # @return [Object] the newly set value
  def target_mem_usage=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/bridge/worker.rb#41
class Temporalio::Internal::Bridge::Worker::TunerSlotSupplierOptions < Struct
  # Returns the value of attribute fixed_size
  #
  # @return [Object] the current value of fixed_size
  def fixed_size; end

  # Sets the attribute fixed_size
  #
  # @param value [Object] the value to set the attribute fixed_size to.
  # @return [Object] the newly set value
  def fixed_size=(_); end

  # Returns the value of attribute resource_based
  #
  # @return [Object] the current value of resource_based
  def resource_based; end

  # Sets the attribute resource_based
  #
  # @param value [Object] the value to set the attribute resource_based to.
  # @return [Object] the newly set value
  def resource_based=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/client/implementation.rb#26
module Temporalio::Internal::Client; end

# source://temporalio//lib/temporalio/internal/client/implementation.rb#27
class Temporalio::Internal::Client::Implementation < Temporalio::Client::Interceptor::Outbound
  # @return [Implementation] a new instance of Implementation
  #
  # source://temporalio//lib/temporalio/internal/client/implementation.rb#43
  def initialize(client); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#449
  def backfill_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#349
  def cancel_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#607
  def complete_async_activity(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#128
  def count_workflows(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#384
  def create_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#465
  def delete_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#477
  def describe_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#147
  def describe_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#634
  def fail_async_activity(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#161
  def fetch_workflow_history_events(input); end

  # @raise [Error::AsyncActivityCanceledError]
  #
  # source://temporalio//lib/temporalio/internal/client/implementation.rb#578
  def heartbeat_async_activity(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#425
  def list_schedules(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#107
  def list_workflows(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#491
  def pause_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#316
  def poll_workflow_update(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#205
  def query_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#671
  def report_cancellation_async_activity(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#186
  def signal_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#48
  def start_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#241
  def start_workflow_update(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#366
  def terminate_workflow(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#505
  def trigger_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#523
  def unpause_schedule(input); end

  # source://temporalio//lib/temporalio/internal/client/implementation.rb#537
  def update_schedule(input); end

  class << self
    # source://temporalio//lib/temporalio/internal/client/implementation.rb#28
    def with_default_rpc_options(user_rpc_options); end
  end
end

# source://temporalio//lib/temporalio/internal/metric.rb#9
class Temporalio::Internal::Metric < Temporalio::Metric
  # @return [Metric] a new instance of Metric
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#12
  def initialize(metric_type:, name:, description:, unit:, value_type:, bridge:, bridge_attrs:); end

  # Returns the value of attribute description.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#10
  def description; end

  # Returns the value of attribute metric_type.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#10
  def metric_type; end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#10
  def name; end

  # source://temporalio//lib/temporalio/internal/metric.rb#22
  def record(value, additional_attributes: T.unsafe(nil)); end

  # Returns the value of attribute unit.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#10
  def unit; end

  # Returns the value of attribute value_type.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#10
  def value_type; end

  # source://temporalio//lib/temporalio/internal/metric.rb#28
  def with_additional_attributes(additional_attributes); end
end

# source://temporalio//lib/temporalio/internal/metric.rb#40
class Temporalio::Internal::Metric::Meter < Temporalio::Metric::Meter
  # @return [Meter] a new instance of Meter
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#48
  def initialize(bridge, bridge_attrs); end

  # source://temporalio//lib/temporalio/internal/metric.rb#53
  def create_metric(metric_type, name, description: T.unsafe(nil), unit: T.unsafe(nil), value_type: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/metric.rb#71
  def with_additional_attributes(additional_attributes); end

  class << self
    # source://temporalio//lib/temporalio/internal/metric.rb#41
    def create_from_runtime(runtime); end
  end
end

# source://temporalio//lib/temporalio/internal/metric.rb#76
class Temporalio::Internal::Metric::NullMeter < Temporalio::Metric::Meter
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [NullMeter] a new instance of NullMeter
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#79
  def initialize; end

  # source://temporalio//lib/temporalio/internal/metric.rb#82
  def create_metric(metric_type, name, description: T.unsafe(nil), unit: T.unsafe(nil), value_type: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/metric.rb#98
  def with_additional_attributes(_additional_attributes); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/metric.rb#103
class Temporalio::Internal::Metric::NullMetric < Temporalio::Metric
  # @return [NullMetric] a new instance of NullMetric
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#106
  def initialize(metric_type:, name:, description:, unit:, value_type:); end

  # Returns the value of attribute description.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#104
  def description; end

  # Returns the value of attribute metric_type.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#104
  def metric_type; end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#104
  def name; end

  # source://temporalio//lib/temporalio/internal/metric.rb#114
  def record(value, additional_attributes: T.unsafe(nil)); end

  # Returns the value of attribute unit.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#104
  def unit; end

  # Returns the value of attribute value_type.
  #
  # source://temporalio//lib/temporalio/internal/metric.rb#104
  def value_type; end

  # source://temporalio//lib/temporalio/internal/metric.rb#116
  def with_additional_attributes(_additional_attributes); end
end

# source://temporalio//lib/temporalio/internal/proto_utils.rb#7
module Temporalio::Internal::ProtoUtils
  class << self
    # source://temporalio//lib/temporalio/internal/proto_utils.rb#97
    def convert_from_payload_array(converter, payloads); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#103
    def convert_to_payload_array(converter, values); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#16
    def duration_to_seconds(duration); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#88
    def enum_to_int(enum_mod, enum_val, zero_means_nil: T.unsafe(nil)); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#71
    def headers_from_proto(headers, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#75
    def headers_from_proto_map(headers, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#59
    def headers_to_proto(headers, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#65
    def headers_to_proto_hash(headers, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#53
    def memo_from_proto(memo, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#41
    def memo_to_proto(hash, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#47
    def memo_to_proto_hash(hash, converter); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#8
    def seconds_to_duration(seconds_numeric); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#84
    def string_or(str, default = T.unsafe(nil)); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#26
    def time_to_timestamp(time); end

    # source://temporalio//lib/temporalio/internal/proto_utils.rb#32
    def timestamp_to_time(timestamp); end
  end
end

# source://temporalio//lib/temporalio/internal/proto_utils.rb#109
class Temporalio::Internal::ProtoUtils::LazyMemo
  # @return [LazyMemo] a new instance of LazyMemo
  #
  # source://temporalio//lib/temporalio/internal/proto_utils.rb#110
  def initialize(raw_memo, converter); end

  # source://temporalio//lib/temporalio/internal/proto_utils.rb#115
  def get; end
end

# source://temporalio//lib/temporalio/internal/proto_utils.rb#121
class Temporalio::Internal::ProtoUtils::LazySearchAttributes
  # @return [LazySearchAttributes] a new instance of LazySearchAttributes
  #
  # source://temporalio//lib/temporalio/internal/proto_utils.rb#122
  def initialize(raw_search_attributes); end

  # source://temporalio//lib/temporalio/internal/proto_utils.rb#126
  def get; end
end

# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#14
module Temporalio::Internal::Worker; end

# Worker for handling activity tasks. Upon overarching worker shutdown, {wait_all_complete} should be used to wait
# for the activities to complete.
#
# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#17
class Temporalio::Internal::Worker::ActivityWorker
  # @return [ActivityWorker] a new instance of ActivityWorker
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#22
  def initialize(worker:, bridge_worker:); end

  # Returns the value of attribute bridge_worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#20
  def bridge_worker; end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#160
  def execute_activity(task_token, defn, start); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#63
  def get_running_activity(task_token); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#143
  def handle_cancel_task(task_token, cancel); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#93
  def handle_start_task(task_token, start); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#82
  def handle_task(task); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#69
  def remove_running_activity(task_token); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#239
  def run_activity(activity, input); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#57
  def set_running_activity(task_token, activity); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#76
  def wait_all_complete; end

  # Returns the value of attribute worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#20
  def worker; end
end

# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#336
class Temporalio::Internal::Worker::ActivityWorker::InboundImplementation < Temporalio::Worker::Interceptor::Activity::Inbound
  # @return [InboundImplementation] a new instance of InboundImplementation
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#337
  def initialize(worker); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#349
  def execute(input); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#342
  def init(outbound); end
end

# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#18
Temporalio::Internal::Worker::ActivityWorker::LOG_TASKS = T.let(T.unsafe(nil), FalseClass)

# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#354
class Temporalio::Internal::Worker::ActivityWorker::OutboundImplementation < Temporalio::Worker::Interceptor::Activity::Outbound
  # @return [OutboundImplementation] a new instance of OutboundImplementation
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#355
  def initialize(worker); end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#360
  def heartbeat(input); end
end

# source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#294
class Temporalio::Internal::Worker::ActivityWorker::RunningActivity < Temporalio::Activity::Context
  # @return [RunningActivity] a new instance of RunningActivity
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#298
  def initialize(info:, cancellation:, worker_shutdown_cancellation:, payload_converter:, logger:,
                 runtime_metric_meter:)
  end

  # Returns the value of attribute _outbound_impl.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#296
  def _outbound_impl; end

  # Sets the attribute _outbound_impl
  #
  # @param value the value to set the attribute _outbound_impl to.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#296
  def _outbound_impl=(_arg0); end

  # Returns the value of attribute _server_requested_cancel.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#296
  def _server_requested_cancel; end

  # Sets the attribute _server_requested_cancel
  #
  # @param value the value to set the attribute _server_requested_cancel to.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#296
  def _server_requested_cancel=(_arg0); end

  # Returns the value of attribute cancellation.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#295
  def cancellation; end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#316
  def heartbeat(*details); end

  # Returns the value of attribute info.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#295
  def info; end

  # Returns the value of attribute logger.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#295
  def logger; end

  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#325
  def metric_meter; end

  # Returns the value of attribute payload_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#295
  def payload_converter; end

  # Returns the value of attribute worker_shutdown_cancellation.
  #
  # source://temporalio//lib/temporalio/internal/worker/activity_worker.rb#295
  def worker_shutdown_cancellation; end
end

# Primary worker (re)actor-style event handler. This handles multiple workers, receiving events from the bridge,
# and handling a user block.
#
# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#11
class Temporalio::Internal::Worker::MultiRunner
  # @return [MultiRunner] a new instance of MultiRunner
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#12
  def initialize(workers:, shutdown_signals:); end

  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#28
  def apply_thread_or_fiber_block(&); end

  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#56
  def apply_workflow_activation_complete(workflow_worker:, activation_completion:, encoded:); end

  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#52
  def apply_workflow_activation_decoded(workflow_worker:, activation:); end

  # Clarify this is the only thread-safe function here
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#67
  def initiate_shutdown; end

  # Intentionally not an enumerable/enumerator since stop semantics are
  # caller determined
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#88
  def next_event; end

  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#62
  def raise_in_thread_or_fiber_block(error); end

  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#78
  def wait_complete_and_finalize_shutdown; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#119
class Temporalio::Internal::Worker::MultiRunner::Event; end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#178
class Temporalio::Internal::Worker::MultiRunner::Event::AllPollersShutDown < Temporalio::Internal::Worker::MultiRunner::Event
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#190
class Temporalio::Internal::Worker::MultiRunner::Event::BlockFailure < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [BlockFailure] a new instance of BlockFailure
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#193
  def initialize(error:); end

  # Returns the value of attribute error.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#191
  def error; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#182
class Temporalio::Internal::Worker::MultiRunner::Event::BlockSuccess < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [BlockSuccess] a new instance of BlockSuccess
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#185
  def initialize(result:); end

  # Returns the value of attribute result.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#183
  def result; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#130
class Temporalio::Internal::Worker::MultiRunner::Event::PollFailure < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [PollFailure] a new instance of PollFailure
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#133
  def initialize(worker:, worker_type:, error:); end

  # Returns the value of attribute error.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#131
  def error; end

  # Returns the value of attribute worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#131
  def worker; end

  # Returns the value of attribute worker_type.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#131
  def worker_type; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#120
class Temporalio::Internal::Worker::MultiRunner::Event::PollSuccess < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [PollSuccess] a new instance of PollSuccess
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#123
  def initialize(worker:, worker_type:, bytes:); end

  # Returns the value of attribute bytes.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#121
  def bytes; end

  # Returns the value of attribute worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#121
  def worker; end

  # Returns the value of attribute worker_type.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#121
  def worker_type; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#169
class Temporalio::Internal::Worker::MultiRunner::Event::PollerShutDown < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [PollerShutDown] a new instance of PollerShutDown
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#172
  def initialize(worker:, worker_type:); end

  # Returns the value of attribute worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#170
  def worker; end

  # Returns the value of attribute worker_type.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#170
  def worker_type; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#198
class Temporalio::Internal::Worker::MultiRunner::Event::ShutdownSignalReceived < Temporalio::Internal::Worker::MultiRunner::Event
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#149
class Temporalio::Internal::Worker::MultiRunner::Event::WorkflowActivationComplete < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [WorkflowActivationComplete] a new instance of WorkflowActivationComplete
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#152
  def initialize(workflow_worker:, activation_completion:, encoded:, completion_complete_queue:); end

  # Returns the value of attribute activation_completion.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#150
  def activation_completion; end

  # Returns the value of attribute completion_complete_queue.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#150
  def completion_complete_queue; end

  # Returns the value of attribute encoded.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#150
  def encoded; end

  # Returns the value of attribute workflow_worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#150
  def workflow_worker; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#160
class Temporalio::Internal::Worker::MultiRunner::Event::WorkflowActivationCompletionComplete < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [WorkflowActivationCompletionComplete] a new instance of WorkflowActivationCompletionComplete
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#163
  def initialize(run_id:, error:); end

  # Returns the value of attribute error.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#161
  def error; end

  # Returns the value of attribute run_id.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#161
  def run_id; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#140
class Temporalio::Internal::Worker::MultiRunner::Event::WorkflowActivationDecoded < Temporalio::Internal::Worker::MultiRunner::Event
  # @return [WorkflowActivationDecoded] a new instance of WorkflowActivationDecoded
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#143
  def initialize(workflow_worker:, activation:); end

  # Returns the value of attribute activation.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#141
  def activation; end

  # Returns the value of attribute workflow_worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#141
  def workflow_worker; end
end

# source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#202
class Temporalio::Internal::Worker::MultiRunner::InjectEventForTesting < Temporalio::Error
  # @return [InjectEventForTesting] a new instance of InjectEventForTesting
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#205
  def initialize(event); end

  # Returns the value of attribute event.
  #
  # source://temporalio//lib/temporalio/internal/worker/multi_runner.rb#203
  def event; end
end

# Instance of a user workflow. This is the instance with all state needed to run the workflow and is expected to
# be cached by the worker for sticky execution.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#10
class Temporalio::Internal::Worker::WorkflowInstance
  # @return [WorkflowInstance] a new instance of WorkflowInstance
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#60
  def initialize(details); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#146
  def activate(activation); end

  # @raise [Workflow::InvalidWorkflowStateError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#151
  def add_command(command); end

  # Returns the value of attribute cancellation.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def cancellation; end

  # Returns the value of attribute context.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def context; end

  # Returns the value of attribute context_frozen.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def context_frozen; end

  # Returns the value of attribute continue_as_new_suggested.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def continue_as_new_suggested; end

  # Returns the value of attribute current_history_length.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def current_history_length; end

  # Returns the value of attribute current_history_size.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def current_history_size; end

  # Returns the value of attribute disable_eager_activity_execution.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def disable_eager_activity_execution; end

  # Returns the value of attribute failure_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def failure_converter; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#178
  def illegal_call_tracing_disabled(&); end

  # Returns the value of attribute in_progress_handlers.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def in_progress_handlers; end

  # Returns the value of attribute info.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def info; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#157
  def instance; end

  # Returns the value of attribute logger.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def logger; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#168
  def memo; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#201
  def metric_meter; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#173
  def now; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#182
  def patch(patch_id:, deprecated:); end

  # Returns the value of attribute payload_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def payload_converter; end

  # Returns the value of attribute pending_activities.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_activities; end

  # Returns the value of attribute pending_child_workflow_starts.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_child_workflow_starts; end

  # Returns the value of attribute pending_child_workflows.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_child_workflows; end

  # Returns the value of attribute pending_external_cancels.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_external_cancels; end

  # Returns the value of attribute pending_external_signals.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_external_signals; end

  # Returns the value of attribute pending_timers.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def pending_timers; end

  # Returns the value of attribute query_handlers.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def query_handlers; end

  # Returns the value of attribute random.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def random; end

  # Returns the value of attribute replaying.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def replaying; end

  # Returns the value of attribute scheduler.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def scheduler; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#161
  def search_attributes; end

  # Returns the value of attribute signal_handlers.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def signal_handlers; end

  # Returns the value of attribute update_handlers.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#53
  def update_handlers; end

  private

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#226
  def activate_internal(activation); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#308
  def apply(job); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#383
  def apply_query(job); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#350
  def apply_signal(job); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#437
  def apply_update(job); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#630
  def convert_args(payload_array:, method_name:, raw_args:, ignore_first_param: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#621
  def convert_handler_args(payload_array:, defn:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#288
  def create_instance; end

  # @return [Boolean]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#608
  def failure_exception?(err); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#561
  def on_top_level_exception(err); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#215
  def run_in_scheduler(&); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#526
  def run_workflow; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#542
  def schedule(top_level: T.unsafe(nil), handler_exec: T.unsafe(nil), &_arg2); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#674
  def scoped_logger_info; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#690
  def warn_on_any_unfinished_handlers; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#614
  def with_context_frozen(&); end

  class << self
    # source://temporalio//lib/temporalio/internal/worker/workflow_instance.rb#36
    def new_completion_with_failure(run_id:, error:, failure_converter:, payload_converter:); end
  end
end

# Implementation of the child workflow handle.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#12
class Temporalio::Internal::Worker::WorkflowInstance::ChildWorkflowHandle < Temporalio::Workflow::ChildWorkflowHandle
  # @return [ChildWorkflowHandle] a new instance of ChildWorkflowHandle
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#15
  def initialize(id:, first_execution_run_id:, instance:, cancellation:, cancel_callback_key:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#42
  def _resolve(resolution); end

  # Returns the value of attribute first_execution_run_id.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#13
  def first_execution_run_id; end

  # Returns the value of attribute id.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#13
  def id; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#24
  def result; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/child_workflow_handle.rb#47
  def signal(signal, *args, cancellation: T.unsafe(nil)); end
end

# Context for all workflow calls. All calls in the {Workflow} class should call a method on this class and then
# this class can delegate the call as needed to other parts of the workflow instance system.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#18
class Temporalio::Internal::Worker::WorkflowInstance::Context
  # @return [Context] a new instance of Context
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#19
  def initialize(instance); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#291
  def _cancel_external_workflow(id:, run_id:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#297
  def _outbound=(outbound); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#301
  def _signal_child_workflow(id:, signal:, args:, cancellation:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#313
  def _signal_external_workflow(id:, run_id:, signal:, args:, cancellation:); end

  # @return [Boolean]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#23
  def all_handlers_finished?; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#27
  def cancellation; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#31
  def continue_as_new_suggested; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#35
  def current_history_length; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#39
  def current_history_size; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#43
  def current_update_info; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#47
  def deprecate_patch(patch_id); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#51
  def execute_activity(activity, *args, task_queue:, schedule_to_close_timeout:, schedule_to_start_timeout:,
                       start_to_close_timeout:, heartbeat_timeout:, retry_policy:, cancellation:, cancellation_type:, activity_id:, disable_eager_execution:)
  end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#84
  def execute_local_activity(activity, *args, schedule_to_close_timeout:, schedule_to_start_timeout:,
                             start_to_close_timeout:, retry_policy:, local_retry_threshold:, cancellation:, cancellation_type:, activity_id:)
  end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#113
  def external_workflow_handle(workflow_id, run_id: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#117
  def illegal_call_tracing_disabled(&); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#121
  def info; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#125
  def initialize_continue_as_new_error(error); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#131
  def logger; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#135
  def memo; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#139
  def metric_meter; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#143
  def now; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#147
  def patched(patch_id); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#151
  def payload_converter; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#155
  def query_handlers; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#159
  def random; end

  # @return [Boolean]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#163
  def replaying?; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#167
  def search_attributes; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#171
  def signal_handlers; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#175
  def sleep(duration, summary:, cancellation:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#185
  def start_child_workflow(workflow, *args, id:, task_queue:, cancellation:, cancellation_type:, parent_close_policy:,
                           execution_timeout:, run_timeout:, task_timeout:, id_reuse_policy:, retry_policy:, cron_schedule:, memo:, search_attributes:)
  end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#224
  def timeout(duration, exception_class, *exception_args, summary:, &_arg4); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#246
  def update_handlers; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#250
  def upsert_memo(hash); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#272
  def upsert_search_attributes(*updates); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/context.rb#287
  def wait_condition(cancellation:, &_arg1); end
end

# Details needed to instantiate a {WorkflowInstance}.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#8
class Temporalio::Internal::Worker::WorkflowInstance::Details
  # @return [Details] a new instance of Details
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#13
  def initialize(namespace:, task_queue:, definition:, initial_activation:, logger:, metric_meter:, payload_converter:,
                 failure_converter:, interceptors:, disable_eager_activity_execution:, illegal_calls:, workflow_failure_exception_types:)
  end

  # Returns the value of attribute definition.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def definition; end

  # Returns the value of attribute disable_eager_activity_execution.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def disable_eager_activity_execution; end

  # Returns the value of attribute failure_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def failure_converter; end

  # Returns the value of attribute illegal_calls.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def illegal_calls; end

  # Returns the value of attribute initial_activation.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def initial_activation; end

  # Returns the value of attribute interceptors.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def interceptors; end

  # Returns the value of attribute logger.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def logger; end

  # Returns the value of attribute metric_meter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def metric_meter; end

  # Returns the value of attribute namespace.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def namespace; end

  # Returns the value of attribute payload_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def payload_converter; end

  # Returns the value of attribute task_queue.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def task_queue; end

  # Returns the value of attribute workflow_failure_exception_types.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/details.rb#9
  def workflow_failure_exception_types; end
end

# Implementation of the external workflow handle.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#12
class Temporalio::Internal::Worker::WorkflowInstance::ExternalWorkflowHandle < Temporalio::Workflow::ExternalWorkflowHandle
  # @return [ExternalWorkflowHandle] a new instance of ExternalWorkflowHandle
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#15
  def initialize(id:, run_id:, instance:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#25
  def cancel; end

  # Returns the value of attribute id.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#13
  def id; end

  # Returns the value of attribute run_id.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#13
  def run_id; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/external_workflow_handle.rb#21
  def signal(signal, *args, cancellation: T.unsafe(nil)); end
end

# Delegator to a hash that does not allow external mutations. Used for memo.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/externally_immutable_hash.rb#8
class Temporalio::Internal::Worker::WorkflowInstance::ExternallyImmutableHash < SimpleDelegator
  # @return [ExternallyImmutableHash] a new instance of ExternallyImmutableHash
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/externally_immutable_hash.rb#9
  def initialize(initial_hash); end

  # @yield [new_hash]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/externally_immutable_hash.rb#13
  def _update(&); end
end

# Representation of a currently-executing handler. Used to track whether any handlers are still running and warn
# on workflow complete as needed.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_execution.rb#9
class Temporalio::Internal::Worker::WorkflowInstance::HandlerExecution
  # @return [HandlerExecution] a new instance of HandlerExecution
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_execution.rb#12
  def initialize(name:, update_id:, unfinished_policy:); end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_execution.rb#10
  def name; end

  # Returns the value of attribute unfinished_policy.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_execution.rb#10
  def unfinished_policy; end

  # Returns the value of attribute update_id.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_execution.rb#10
  def update_id; end
end

# Hash for handlers that notifies when one is added. Only `[]=` and `store` can be used to mutate it.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_hash.rb#8
class Temporalio::Internal::Worker::WorkflowInstance::HandlerHash < SimpleDelegator
  # @return [HandlerHash] a new instance of HandlerHash
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_hash.rb#9
  def initialize(initial_frozen_hash, definition_class, &); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_hash.rb#15
  def []=(name, definition); end

  # steep:ignore:start
  #
  # @raise [ArgumentError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/handler_hash.rb#20
  def store(name, definition); end
end

# Class that installs {::TracePoint} to disallow illegal calls.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/illegal_call_tracer.rb#10
class Temporalio::Internal::Worker::WorkflowInstance::IllegalCallTracer
  # Illegal calls are Hash[String, :all | Hash[Symbol, Bool]]
  #
  # @return [IllegalCallTracer] a new instance of IllegalCallTracer
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/illegal_call_tracer.rb#37
  def initialize(illegal_calls); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/illegal_call_tracer.rb#85
  def disable(&); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/illegal_call_tracer.rb#74
  def enable(&); end

  class << self
    # source://temporalio//lib/temporalio/internal/worker/workflow_instance/illegal_call_tracer.rb#11
    def frozen_validated_illegal_calls(illegal_calls); end
  end
end

# Root implementation of the inbound interceptor.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#12
class Temporalio::Internal::Worker::WorkflowInstance::InboundImplementation < Temporalio::Worker::Interceptor::Workflow::Inbound
  # @return [InboundImplementation] a new instance of InboundImplementation
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#13
  def initialize(instance); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#22
  def execute(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#30
  def handle_query(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#26
  def handle_signal(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#38
  def handle_update(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#18
  def init(outbound); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#34
  def validate_update(input); end

  private

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/inbound_implementation.rb#44
  def invoke_handler(name, input, to_invoke: T.unsafe(nil)); end
end

# Root implementation of the outbound interceptor.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#18
class Temporalio::Internal::Worker::WorkflowInstance::OutboundImplementation < Temporalio::Worker::Interceptor::Workflow::Outbound
  # @return [OutboundImplementation] a new instance of OutboundImplementation
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#19
  def initialize(instance); end

  # @raise [Error::CanceledError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#228
  def _signal_external_workflow(id:, run_id:, child:, signal:, args:, cancellation:, headers:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#29
  def cancel_external_workflow(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#54
  def execute_activity(input); end

  # If this doesn't raise, it returns success | DoBackoff
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#155
  def execute_activity_once(local:, cancellation:, last_local_backoff:, &_arg3); end

  # @raise [Error::CanceledError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#134
  def execute_activity_with_local_backoffs(local:, cancellation:, &_arg2); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#94
  def execute_local_activity(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#200
  def initialize_continue_as_new_error(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#204
  def signal_child_workflow(input); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#216
  def signal_external_workflow(input); end

  # @raise [ArgumentError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#275
  def sleep(input); end

  # @raise [Error::CanceledError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/outbound_implementation.rb#332
  def start_child_workflow(input); end
end

# Wrapper for a scoped logger that does not log on replay.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_logger.rb#11
class Temporalio::Internal::Worker::WorkflowInstance::ReplaySafeLogger < Temporalio::ScopedLogger
  # @return [ReplaySafeLogger] a new instance of ReplaySafeLogger
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_logger.rb#12
  def initialize(logger:, instance:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_logger.rb#25
  def add(*_arg0, **_arg1, &); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_logger.rb#18
  def replay_safety_disabled(&); end
end

# Wrapper for a metric that does not log on replay.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#10
class Temporalio::Internal::Worker::WorkflowInstance::ReplaySafeMetric < SimpleDelegator
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#11
  def record(value, additional_attributes: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#17
  def with_additional_attributes(additional_attributes); end
end

# source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#21
class Temporalio::Internal::Worker::WorkflowInstance::ReplaySafeMetric::Meter < SimpleDelegator
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#22
  def create_metric(metric_type, name, description: T.unsafe(nil), unit: T.unsafe(nil), value_type: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/replay_safe_metric.rb#32
  def with_additional_attributes(additional_attributes); end
end

# Deterministic {::Fiber::Scheduler} implementation.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#15
class Temporalio::Internal::Worker::WorkflowInstance::Scheduler
  # @return [Scheduler] a new instance of Scheduler
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#16
  def initialize(instance); end

  # Fiber::Scheduler methods
  #
  # Note, we do not implement many methods here such as io_read and
  # such. While it might seem to make sense to implement them and
  # raise, we actually want to default to the blocking behavior of them
  # not being present. This is so advanced things like logging still
  # work inside of workflows. So we only implement the bare minimum.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#103
  def block(_blocker, timeout = T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#120
  def close; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#24
  def context; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#124
  def fiber(&); end

  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#139
  def io_wait(io, events, timeout); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#144
  def kernel_sleep(duration = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#148
  def process_wait(pid, flags); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#28
  def run_until_all_yielded; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#84
  def stack_trace; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#152
  def timeout_after(duration, exception_class, *exception_arguments, &); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#156
  def unblock(_blocker, fiber); end

  # @raise [Workflow::InvalidWorkflowStateError]
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_instance/scheduler.rb#55
  def wait_condition(cancellation:, &block); end
end

# Worker for handling workflow activations. Most activation work is delegated to the workflow executor.
#
# source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#15
class Temporalio::Internal::Worker::WorkflowWorker
  # @return [WorkflowWorker] a new instance of WorkflowWorker
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#36
  def initialize(worker:, bridge_worker:, workflow_definitions:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#83
  def handle_activation(runner:, activation:, decoded:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#102
  def handle_activation_complete(runner:, activation_completion:, encoded:, completion_complete_queue:); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#118
  def on_shutdown_complete; end

  private

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#134
  def apply_codec_on_payload_visit(payload_or_payloads, &); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#124
  def decode_activation(runner, activation); end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#129
  def encode_activation_completion(runner, activation_completion); end

  class << self
    # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#16
    def workflow_definitions(workflows); end
  end
end

# source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#147
class Temporalio::Internal::Worker::WorkflowWorker::State
  # @return [State] a new instance of State
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#152
  def initialize(workflow_definitions:, bridge_worker:, logger:, metric_meter:, data_converter:, deadlock_timeout:,
                 illegal_calls:, namespace:, task_queue:, disable_eager_activity_execution:, workflow_interceptors:, workflow_failure_exception_types:)
  end

  # Returns the value of attribute bridge_worker.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def bridge_worker; end

  # Returns the value of attribute data_converter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def data_converter; end

  # Returns the value of attribute deadlock_timeout.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def deadlock_timeout; end

  # Returns the value of attribute disable_eager_activity_execution.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def disable_eager_activity_execution; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#189
  def evict_all; end

  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#185
  def evict_running_workflow(run_id); end

  # This can never be called at the same time for the same run ID on the same state object
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#175
  def get_or_create_running_workflow(run_id, &); end

  # Returns the value of attribute illegal_calls.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def illegal_calls; end

  # Returns the value of attribute logger.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def logger; end

  # Returns the value of attribute metric_meter.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def metric_meter; end

  # Returns the value of attribute namespace.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def namespace; end

  # Returns the value of attribute task_queue.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def task_queue; end

  # Returns the value of attribute workflow_definitions.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def workflow_definitions; end

  # Returns the value of attribute workflow_failure_exception_types.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def workflow_failure_exception_types; end

  # Returns the value of attribute workflow_interceptors.
  #
  # source://temporalio//lib/temporalio/internal/worker/workflow_worker.rb#148
  def workflow_interceptors; end
end

# Metric that can be recorded from a metric meter. This is obtained via {Meter.create_metric}. The metric meter is
# obtained via workflow environment, activity context, or from the {Runtime} if in neither of those. This class is
# effectively abstract and will fail if `initialize` is attempted.
#
# source://temporalio//lib/temporalio/metric.rb#9
class Temporalio::Metric
  # @raise [NotImplementedError]
  # @return [Metric] a new instance of Metric
  #
  # source://temporalio//lib/temporalio/metric.rb#11
  def initialize; end

  # @raise [NotImplementedError]
  # @return [String, nil] Metric description.
  #
  # source://temporalio//lib/temporalio/metric.rb#47
  def description; end

  # @raise [NotImplementedError]
  # @return [:counter, :histogram, :gauge] Metric type.
  #
  # source://temporalio//lib/temporalio/metric.rb#37
  def metric_type; end

  # @raise [NotImplementedError]
  # @return [String] Metric name.
  #
  # source://temporalio//lib/temporalio/metric.rb#42
  def name; end

  # Record a value for the metric. For counters, this adds to any existing. For histograms, this records into proper
  # buckets. For gauges, this sets the value. The value type must match the expectation.
  #
  # @param value [Numeric] Value to record. For counters and duration-based histograms, this value cannot be negative.
  # @param additional_attributes [Hash{String, Symbol => String, Integer, Float, Boolean}, nil] Additional attributes
  #   on this specific record. For better performance for attribute reuse, users are encouraged to use
  #   {with_additional_attributes} to make a copy of this metric with those attributes.
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/metric.rb#22
  def record(value, additional_attributes: T.unsafe(nil)); end

  # @raise [NotImplementedError]
  # @return [String, nil] Metric unit.
  #
  # source://temporalio//lib/temporalio/metric.rb#52
  def unit; end

  # @raise [NotImplementedError]
  # @return [:integer, :float, :duration] Metric value type.
  #
  # source://temporalio//lib/temporalio/metric.rb#57
  def value_type; end

  # Create a copy of this metric but with the given additional attributes. This is more performant than providing
  # attributes on each {record} call.
  #
  # @param additional_attributes [Hash{String, Symbol => String, Integer, Float, Boolean}] Attributes to set on the
  #   resulting metric.
  # @raise [NotImplementedError]
  # @return [Metric] Copy of this metric with the additional attributes.
  #
  # source://temporalio//lib/temporalio/metric.rb#32
  def with_additional_attributes(additional_attributes); end
end

# Meter for creating metrics to record values on. This is obtained via workflow environment, activity context, or
# from the {Runtime} if in neither of those. This class is effectively abstract and will fail if `initialize` is
# attempted.
#
# source://temporalio//lib/temporalio/metric.rb#64
class Temporalio::Metric::Meter
  # @raise [NotImplementedError]
  # @return [Meter] a new instance of Meter
  #
  # source://temporalio//lib/temporalio/metric.rb#71
  def initialize; end

  # Create a new metric. Only certain metric types are accepted and only value types can work with certain metric
  # types.
  #
  # @param metric_type [:counter, :histogram, :gauge] Metric type. Counters can only have `:integer` value types,
  #   histograms can have `:integer`, `:float`, or :duration` value types, and gauges can have `:integer` or
  #   `:float` value types.
  # @param name [String] Metric name.
  # @param description [String, nil] Metric description.
  # @param unit [String, nil] Metric unit.
  # @param value_type [:integer, :float, :duration] Metric value type. `:integer` works for all metric types,
  #   `:float` works for `:histogram` and `:gauge` metric types, and `:duration` only works for `:histogram` metric
  #   types.
  # @raise [NotImplementedError]
  # @return [Metric] Created metric.
  #
  # source://temporalio//lib/temporalio/metric.rb#88
  def create_metric(metric_type, name, description: T.unsafe(nil), unit: T.unsafe(nil), value_type: T.unsafe(nil)); end

  # Create a copy of this meter but with the given additional attributes. This is more performant than providing
  # attributes on each {record} call.
  #
  # @param additional_attributes [Hash{String, Symbol => String, Integer, Float, Boolean}] Attributes to set on the
  #   resulting meter.
  # @raise [NotImplementedError]
  # @return [Meter] Copy of this meter with the additional attributes.
  #
  # source://temporalio//lib/temporalio/metric.rb#104
  def with_additional_attributes(additional_attributes); end

  class << self
    # @return [Meter] A no-op instance of {Meter}.
    #
    # source://temporalio//lib/temporalio/metric.rb#66
    def null; end
  end
end

# Options for retrying workflows and activities.
#
# source://temporalio//lib/temporalio/retry_policy.rb#26
class Temporalio::RetryPolicy < Data
  # Create retry policy.
  #
  # @param initial_interval [Float] Backoff interval in seconds for the first retry. Default 1.0.
  # @param backoff_coefficient [Float] Coefficient to multiply previous backoff interval by to get new interval.
  #   Default 2.0.
  # @param max_interval [Float, nil] Maximum backoff interval in seconds between retries. Default 100x
  #   `initial_interval`.
  # @param max_attempts [Integer] Maximum number of attempts. If `0`, the default, there is no maximum.
  # @param non_retryable_error_types [Array<String>, nil] List of error types that are not retryable.
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://temporalio//lib/temporalio/retry_policy.rb#47
  def initialize(initial_interval: T.unsafe(nil), backoff_coefficient: T.unsafe(nil), max_interval: T.unsafe(nil),
                 max_attempts: T.unsafe(nil), non_retryable_error_types: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/retry_policy.rb#58
  def _to_proto; end

  # @return [Float] Coefficient to multiply previous backoff interval by to get new interval. Default 2.0.
  def backoff_coefficient; end

  # @return [Float] Backoff interval in seconds for the first retry. Default 1.0.
  def initial_interval; end

  # @return [Integer] Maximum number of attempts. If `0`, the default, there is no maximum.
  def max_attempts; end

  # @return [Float, nil] Maximum backoff interval in seconds between retries. Default 100x `initial_interval`.
  def max_interval; end

  # @return [Array<String>, nil] List of error types that are not retryable.
  def non_retryable_error_types; end

  class << self
    def [](*_arg0); end

    # source://temporalio//lib/temporalio/retry_policy.rb#28
    def _from_proto(raw_policy); end

    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Runtime for Temporal Ruby SDK.
#
# Only one global {Runtime} needs to exist. Users are encouraged to use {default}. To configure it, create a runtime
# before any clients are created, and set it via {default=}. Every time a new runtime is created, a new internal Rust
# thread pool is created.
#
# source://temporalio//lib/temporalio/runtime.rb#14
class Temporalio::Runtime
  # Create new Runtime. For most users, this should only be done once globally. In addition to creating a Rust thread
  # pool, this also consumes a Ruby thread for its lifetime.
  #
  # @param telemetry [TelemetryOptions] Telemetry options to set.
  # @return [Runtime] a new instance of Runtime
  #
  # source://temporalio//lib/temporalio/runtime.rb#297
  def initialize(telemetry: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/runtime.rb#310
  def _core_runtime; end

  # @return [Metric::Meter] Metric meter that can create and record metric values.
  #
  # source://temporalio//lib/temporalio/runtime.rb#291
  def metric_meter; end

  class << self
    # Default runtime, lazily created upon first access. If needing a different default, make sure it is updated via
    # {default=} before this is called (either directly or as a parameter to something like {Client}).
    #
    # @return [Runtime] Default runtime.
    #
    # source://temporalio//lib/temporalio/runtime.rb#276
    def default; end

    # Set the default runtime. Must be called before {default} accessed.
    #
    # @param runtime [Runtime] Runtime to set as default.
    # @raise If default has already been accessed.
    #
    # source://temporalio//lib/temporalio/runtime.rb#284
    def default=(runtime); end
  end
end

# Logging filter options for Core.
#
# source://temporalio//lib/temporalio/runtime.rb#91
class Temporalio::Runtime::LoggingFilterOptions < Data
  # Create logging filter options.
  #
  # @param core_level ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR'] Log level for Core log messages.
  # @return [LoggingFilterOptions] a new instance of LoggingFilterOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#96
  def initialize(core_level: T.unsafe(nil), other_level: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/runtime.rb#101
  def _to_bridge; end

  # @return ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR'] Log level for Core log messages.
  def core_level; end

  # @return ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR'] Log level for other Rust log messages.
  def other_level; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Logging options for runtime telemetry.
#
# source://temporalio//lib/temporalio/runtime.rb#57
class Temporalio::Runtime::LoggingOptions < Data
  # Create logging options
  #
  # @param log_filter [LoggingFilterOptions, String] Logging filter for Core.
  # @return [LoggingOptions] a new instance of LoggingOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#61
  def initialize(log_filter: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/runtime.rb#66
  def _to_bridge; end

  # @return [LoggingFilterOptions, String] Logging filter for Core, default is new {LoggingFilterOptions} with no
  #   parameters.
  def log_filter; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Metrics options for runtime telemetry. Either {opentelemetry} or {prometheus} required, but not both.
#
# source://temporalio//lib/temporalio/runtime.rb#129
class Temporalio::Runtime::MetricsOptions < Data
  # Create metrics options. Either `opentelemetry` or `prometheus` required, but not both.
  #
  # @param opentelemetry [OpenTelemetryMetricsOptions, nil] OpenTelemetry options if using OpenTelemetry. This is
  #   mutually exclusive with `prometheus`.
  # @param prometheus [PrometheusMetricsOptions, nil] Prometheus options if using Prometheus. This is mutually
  #   exclusive with `opentelemetry`.
  # @param attach_service_name [Boolean] Whether to put the service_name on every metric.
  # @param global_tags [Hash<String, String>, nil] Resource tags to be applied to all metrics.
  # @param metric_prefix [String, nil] Prefix to put on every Temporal metric. If unset, defaults to `temporal_`.
  # @return [MetricsOptions] a new instance of MetricsOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#139
  def initialize(opentelemetry: T.unsafe(nil), prometheus: T.unsafe(nil), attach_service_name: T.unsafe(nil),
                 global_tags: T.unsafe(nil), metric_prefix: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/runtime.rb#150
  def _to_bridge; end

  # @return [Boolean] Whether to put the service_name on every metric.
  def attach_service_name; end

  # @return [Hash<String, String>, nil] Resource tags to be applied to all metrics.
  def global_tags; end

  # @return [String, nil] Prefix to put on every Temporal metric. If unset, defaults to `temporal_`.
  def metric_prefix; end

  # @return [OpenTelemetryMetricsOptions, nil] OpenTelemetry options if using OpenTelemetry. This is mutually
  #   exclusive with +prometheus+.
  def opentelemetry; end

  # @return [PrometheusMetricsOptions, nil] Prometheus options if using Prometheus. This is mutually exclusive with
  #   +opentelemetry+.
  def prometheus; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Options for exporting metrics to OpenTelemetry.
#
# source://temporalio//lib/temporalio/runtime.rb#184
class Temporalio::Runtime::OpenTelemetryMetricsOptions < Data
  # Create OpenTelemetry options.
  #
  # @param url [String] URL for OpenTelemetry endpoint.
  # @param headers [Hash<String, String>, nil] Headers for OpenTelemetry endpoint.
  # @param metric_periodicity [Float, nil] How frequently metrics should be exported, unset uses internal default.
  # @param metric_temporality [MetricTemporality] How frequently metrics should be exported.
  # @param durations_as_seconds [Boolean] Whether to use float seconds instead of integer milliseconds for
  #   durations.
  # @return [OpenTelemetryMetricsOptions] a new instance of OpenTelemetryMetricsOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#199
  def initialize(url:, headers: T.unsafe(nil), metric_periodicity: T.unsafe(nil), metric_temporality: T.unsafe(nil),
                 durations_as_seconds: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/runtime.rb#210
  def _to_bridge; end

  # @return [Boolean] Whether to use float seconds instead of integer milliseconds for durations, default is
  #   +false+.
  def durations_as_seconds; end

  # @return [Hash<String, String>, nil] Headers for OpenTelemetry endpoint.
  def headers; end

  # @return [Float, nil] How frequently metrics should be exported, unset uses internal default.
  def metric_periodicity; end

  # @return [MetricTemporality] How frequently metrics should be exported, default is
  #   {MetricTemporality::CUMULATIVE}.
  def metric_temporality; end

  # @return [String] URL for OpenTelemetry endpoint.
  def url; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# OpenTelemetry metric temporality.
#
# source://temporalio//lib/temporalio/runtime.rb#186
module Temporalio::Runtime::OpenTelemetryMetricsOptions::MetricTemporality; end

# source://temporalio//lib/temporalio/runtime.rb#187
Temporalio::Runtime::OpenTelemetryMetricsOptions::MetricTemporality::CUMULATIVE = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/runtime.rb#188
Temporalio::Runtime::OpenTelemetryMetricsOptions::MetricTemporality::DELTA = T.let(T.unsafe(nil), Integer)

# Options for exporting metrics to Prometheus.
#
# source://temporalio//lib/temporalio/runtime.rb#243
class Temporalio::Runtime::PrometheusMetricsOptions < Data
  # Create Prometheus options.
  #
  # @param bind_address [String] Address to bind to for Prometheus endpoint.
  # @param counters_total_suffix [Boolean] If `true`, all counters will include a `_total` suffix.
  # @param unit_suffix [Boolean] If `true`, all histograms will include the unit in their name as a suffix.
  # @param durations_as_seconds [Boolean] Whether to use float seconds instead of integer milliseconds for
  #   durations.
  # @return [PrometheusMetricsOptions] a new instance of PrometheusMetricsOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#251
  def initialize(bind_address:, counters_total_suffix: T.unsafe(nil), unit_suffix: T.unsafe(nil),
                 durations_as_seconds: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/runtime.rb#261
  def _to_bridge; end

  # @return [String] Address to bind to for Prometheus endpoint.
  def bind_address; end

  # @return [Boolean] If `true`, all counters will include a `_total` suffix.
  def counters_total_suffix; end

  # @return [Boolean] Whether to use float seconds instead of integer milliseconds for durations.
  def durations_as_seconds; end

  # @return [Boolean] If `true`, all histograms will include the unit in their name as a suffix.
  def unit_suffix; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Telemetry options for the runtime.
#
# source://temporalio//lib/temporalio/runtime.rb#27
class Temporalio::Runtime::TelemetryOptions < Data
  # Create telemetry options.
  #
  # @param logging [LoggingOptions, nil] Logging options, default is new {LoggingOptions} with no parameters. Can be
  #   set to nil to disable logging.
  # @param metrics [MetricsOptions, nil] Metrics options.
  # @return [TelemetryOptions] a new instance of TelemetryOptions
  #
  # source://temporalio//lib/temporalio/runtime.rb#33
  def initialize(logging: T.unsafe(nil), metrics: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/runtime.rb#38
  def _to_bridge; end

  # @return [LoggingOptions, nil] Logging options, default is new {LoggingOptions} with no parameters. Can be set
  #   to nil to disable logging.
  def logging; end

  # @return [MetricsOptions, nil] Metrics options.
  def metrics; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Implementation via delegator to {::Logger} that puts scoped values on the log message and appends them to the log
# message.
#
# source://temporalio//lib/temporalio/scoped_logger.rb#9
class Temporalio::ScopedLogger < SimpleDelegator
  # @see Logger.add
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#19
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # @see Logger.debug
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#46
  def debug(progname = T.unsafe(nil), &); end

  # Returns the value of attribute disable_scoped_values.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#16
  def disable_scoped_values; end

  # Sets the attribute disable_scoped_values
  #
  # @param value the value to set the attribute disable_scoped_values to.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#16
  def disable_scoped_values=(_arg0); end

  # @see Logger.error
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#61
  def error(progname = T.unsafe(nil), &); end

  # @see Logger.fatal
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#66
  def fatal(progname = T.unsafe(nil), &); end

  # @see Logger.info
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#51
  def info(progname = T.unsafe(nil), &); end

  # @see Logger.add
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#19
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # @return [Boolean] Whether the scoped value appending is disabled.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#12
  def scoped_values_getter; end

  # @return [Boolean] Whether the scoped value appending is disabled.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#12
  def scoped_values_getter=(_arg0); end

  # @see Logger.unknown
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#71
  def unknown(progname = T.unsafe(nil), &); end

  # @see Logger.warn
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#56
  def warn(progname = T.unsafe(nil), &); end
end

# Scoped log message wrapping original log message.
#
# source://temporalio//lib/temporalio/scoped_logger.rb#76
class Temporalio::ScopedLogger::LogMessage
  # @return [LogMessage] a new instance of LogMessage
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#84
  def initialize(message, scoped_values); end

  # @return [String] Message with scoped values appended.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#90
  def inspect; end

  # @return [Object] Original log message.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#78
  def message; end

  # @return [Object] Scoped values.
  #
  # source://temporalio//lib/temporalio/scoped_logger.rb#81
  def scoped_values; end
end

# Collection of typed search attributes.
#
# This is represented as a mapping of {SearchAttributes::Key} to object values. This is not a hash though it does have
# a few hash-like methods and can be converted to a hash via {#to_h}. In some situations, such as in workflows, this
# class is immutable for outside use.
#
# source://temporalio//lib/temporalio/search_attributes.rb#11
class Temporalio::SearchAttributes
  # Create a search attribute collection.
  #
  # @param existing [SearchAttributes, Hash<Key, Object>, nil] Existing collection. This can be another
  #   {SearchAttributes} instance or a {::Hash}.
  # @return [SearchAttributes] a new instance of SearchAttributes
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#159
  def initialize(existing = T.unsafe(nil)); end

  # Get a search attribute value for a key.
  #
  # @param key [Key, String, Symbol] The key to find. If this is a {Key}, it will use key equality (i.e. name and
  #   type) to search. If this is a {::String}, the type is not checked when finding the proper key.
  # @return [Object, nil] Value if found or `nil` if not.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#195
  def [](key); end

  # Set a search attribute value for a key. This will replace any existing value for the {Key#name }regardless of
  # {Key#type}.
  #
  # @param key [Key] A key to set. This must be a {Key} and the value must be proper for the {Key#type}.
  # @param value [Object, nil] The value to set. If `nil`, the key is removed. The value must be proper for the `key`.
  # @raise [ArgumentError]
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#177
  def []=(key, value); end

  # source://temporalio//lib/temporalio/search_attributes.rb#294
  def _assert_mutations_enabled; end

  # source://temporalio//lib/temporalio/search_attributes.rb#299
  def _disable_mutations=(value); end

  # source://temporalio//lib/temporalio/search_attributes.rb#284
  def _to_proto; end

  # source://temporalio//lib/temporalio/search_attributes.rb#289
  def _to_proto_hash; end

  # Delete a search attribute key
  #
  # @param key [Key, String, Symbol] The key to delete. Regardless of whether this is a {Key} or a {::String}, the key
  #   with the matching name will be deleted. This means a {Key} with a matching name but different type may be
  #   deleted.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#212
  def delete(key); end

  # @return [SearchAttributes] Copy of the search attributes.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#238
  def dup; end

  # Like {::Hash#each}.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#228
  def each(&); end

  # @return [Boolean] Whether the set of attributes is empty.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#245
  def empty?; end

  # @return [Integer] Number of attributes.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#250
  def length; end

  # @return [Integer] Number of attributes.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#250
  def size; end

  # @return [Hash<Key, Object>] Copy of the search attributes as a hash.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#233
  def to_h; end

  # Return a new search attributes collection with updates applied.
  #
  # @param updates [Update] Updates created via {Key#value_set} or {Key#value_unset}.
  # @return [SearchAttributes] New collection.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#260
  def update(*updates); end

  # Update this search attribute collection with given updates.
  #
  # @param updates [Update] Updates created via {Key#value_set} or {Key#value_unset}.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#270
  def update!(*updates); end

  class << self
    # source://temporalio//lib/temporalio/search_attributes.rb#115
    def _from_proto(proto, disable_mutations: T.unsafe(nil), never_nil: T.unsafe(nil)); end

    # source://temporalio//lib/temporalio/search_attributes.rb#144
    def _to_proto_pair(key, value); end

    # source://temporalio//lib/temporalio/search_attributes.rb#136
    def _value_from_payload(payload); end
  end
end

# Type for a search attribute key/value.
#
# @see https://docs.temporal.io/visibility#supported-types
#
# source://temporalio//lib/temporalio/search_attributes.rb#306
module Temporalio::SearchAttributes::IndexedValueType; end

# Boolean type, values must be {::TrueClass} or {::FalseClass}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#320
Temporalio::SearchAttributes::IndexedValueType::BOOLEAN = T.let(T.unsafe(nil), Integer)

# Float type, values must be {::Float} or {::Integer}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#317
Temporalio::SearchAttributes::IndexedValueType::FLOAT = T.let(T.unsafe(nil), Integer)

# Integer type, values must be {::Integer}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#314
Temporalio::SearchAttributes::IndexedValueType::INTEGER = T.let(T.unsafe(nil), Integer)

# Keyword type, values must be {::String}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#311
Temporalio::SearchAttributes::IndexedValueType::KEYWORD = T.let(T.unsafe(nil), Integer)

# Keyword list type, values must be {::Array<String>}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#326
Temporalio::SearchAttributes::IndexedValueType::KEYWORD_LIST = T.let(T.unsafe(nil), Integer)

# source://temporalio//lib/temporalio/search_attributes.rb#329
Temporalio::SearchAttributes::IndexedValueType::PROTO_NAMES = T.let(T.unsafe(nil), Hash)

# source://temporalio//lib/temporalio/search_attributes.rb#340
Temporalio::SearchAttributes::IndexedValueType::PROTO_VALUES = T.let(T.unsafe(nil), Hash)

# Text type, values must be {::String}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#308
Temporalio::SearchAttributes::IndexedValueType::TEXT = T.let(T.unsafe(nil), Integer)

# Time type, values must be {::Time}.
#
# source://temporalio//lib/temporalio/search_attributes.rb#323
Temporalio::SearchAttributes::IndexedValueType::TIME = T.let(T.unsafe(nil), Integer)

# Key for a search attribute.
#
# source://temporalio//lib/temporalio/search_attributes.rb#13
class Temporalio::SearchAttributes::Key
  # @raise [ArgumentError]
  # @return [Key] a new instance of Key
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#20
  def initialize(name, type); end

  # @return [Boolean] Check equality.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#28
  def ==(other); end

  # @return [Boolean] Check equality.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#28
  def eql?(other); end

  # @return [Integer] Hash
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#35
  def hash; end

  # @return [String] Name of the search attribute.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#15
  def name; end

  # @return [IndexedValueType] Type of the search attribute.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#18
  def type; end

  # Validate that the given value matches the expected {#type}.
  #
  # @raise [TypeError] The value does not have the proper type.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#42
  def validate_value(value); end

  # Create an updated that sets the given value for this key.
  #
  # @param value [Object] Value to update. Must be the proper type for the key.
  # @raise [ArgumentError]
  # @return [Update] Created update.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#74
  def value_set(value); end

  # Create an updated that unsets the key.
  #
  # @return [Update] Created update.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#83
  def value_unset; end
end

# Search attribute update that can be separately applied.
#
# source://temporalio//lib/temporalio/search_attributes.rb#89
class Temporalio::SearchAttributes::Update
  # Create an update. Users may find it easier to use {Key#value_set} and {Key#value_unset} instead.
  #
  # @param key [Key] Key to update.
  # @param value [Object, nil] Value to update to or nil to remove the value.
  # @raise [ArgumentError]
  # @return [Update] a new instance of Update
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#100
  def initialize(key, value); end

  # source://temporalio//lib/temporalio/search_attributes.rb#109
  def _to_proto_pair; end

  # @return [Key] Key this update applies to.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#91
  def key; end

  # @return [Object, nil] Value to update or `nil` to remove the key.
  #
  # source://temporalio//lib/temporalio/search_attributes.rb#94
  def value; end
end

# source://temporalio//lib/temporalio/version.rb#4
Temporalio::VERSION = T.let(T.unsafe(nil), String)

# Worker for processing activities and workflows on a task queue.
#
# Workers are created for a task queue and the items they can run. Then {run} is used for running a single worker, or
# {run_all} is used for a collection of workers. These can wait until a block is complete or a {Cancellation} is
# canceled.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#4
class Temporalio::Worker
  # Create a new worker. At least one activity or workflow must be present.
  #
  # @param client [Client] Client for this worker.
  # @param task_queue [String] Task queue for this worker.
  # @param activities [Array<Activity::Definition, Class<Activity::Definition>, Activity::Definition::Info>] Activities for this worker.
  # @param workflows [Array<Class<Workflow::Definition>>] Workflows for this worker.
  # @param tuner [Tuner] Tuner that controls the amount of concurrent activities/workflows that run at a time.
  # @param activity_executors [Hash<Symbol, Worker::ActivityExecutor>] Executors that activities can run within.
  # @param workflow_executor [WorkflowExecutor] Workflow executor that workflow tasks run within. This must be a
  #   {WorkflowExecutor::ThreadPool} currently.
  # @param interceptors [Array<Interceptor::Activity, Interceptor::Workflow>] Interceptors specific to this worker.
  #   Note, interceptors set on the client that include the {Interceptor::Activity} or {Interceptor::Workflow} module
  #   are automatically included here, so no need to specify them again.
  # @param build_id [String] Unique identifier for the current runtime. This is best set as a unique value
  #   representing all code and should change only when code does. This can be something like a git commit hash. If
  #   unset, default is hash of known Ruby code.
  # @param identity [String, nil] Override the identity for this worker. If unset, client identity is used.
  # @param logger [Logger] Logger to override client logger with. Default is the client logger.
  # @param max_cached_workflows [Integer] Number of workflows held in cache for use by sticky task queue. If set to 0,
  #   workflow caching and sticky queuing are disabled.
  # @param max_concurrent_workflow_task_polls [Integer] Maximum number of concurrent poll workflow task requests we
  #   will perform at a time on this worker's task queue.
  # @param nonsticky_to_sticky_poll_ratio [Float] `max_concurrent_workflow_task_polls` * this number = the number of
  #   max pollers that will be allowed for the nonsticky queue when sticky tasks are enabled. If both defaults are
  #   used, the sticky queue will allow 4 max pollers while the nonsticky queue will allow one. The minimum for either
  #   poller is 1, so if `max_concurrent_workflow_task_polls` is 1 and sticky queues are enabled, there will be 2
  #   concurrent polls.
  # @param max_concurrent_activity_task_polls [Integer] Maximum number of concurrent poll activity task requests we
  #   will perform at a time on this worker's task queue.
  # @param no_remote_activities [Boolean] If true, this worker will only handle workflow tasks and local activities,
  #   it will not poll for activity tasks.
  # @param sticky_queue_schedule_to_start_timeout [Float] How long a workflow task is allowed to sit on the sticky
  #   queue before it is timed out and moved to the non-sticky queue where it may be picked up by any worker.
  # @param max_heartbeat_throttle_interval [Float] Longest interval for throttling activity heartbeats.
  # @param default_heartbeat_throttle_interval [Float] Default interval for throttling activity heartbeats in case
  #   per-activity heartbeat timeout is unset. Otherwise, it's the per-activity heartbeat timeout * 0.8.
  # @param max_activities_per_second [Float, nil] Limits the number of activities per second that this worker will
  #   process. The worker will not poll for new activities if by doing so it might receive and execute an activity
  #   which would cause it to exceed this limit.
  # @param max_task_queue_activities_per_second [Float, nil] Sets the maximum number of activities per second the task
  #   queue will dispatch, controlled server-side. Note that this only takes effect upon an activity poll request. If
  #   multiple workers on the same queue have different values set, they will thrash with the last poller winning.
  # @param graceful_shutdown_period [Float] Amount of time after shutdown is called that activities are given to
  #   complete before their tasks are canceled.
  # @param use_worker_versioning [Boolean] If true, the `build_id` argument must be specified, and this worker opts
  #   into the worker versioning feature. This ensures it only receives workflow tasks for workflows which it claims
  #   to be compatible with. For more information, see https://docs.temporal.io/workers#worker-versioning.
  # @param disable_eager_activity_execution [Boolean] If true, disables eager activity execution. Eager activity
  #   execution is an optimization on some servers that sends activities back to the same worker as the calling
  #   workflow if they can run there. This should be set to true for `max_task_queue_activities_per_second` to work
  #   and in a future version of this API may be implied as such (i.e. this setting will be ignored if that setting is
  #   set).
  # @param illegal_workflow_calls [Hash<String, [:all, Array<Symbol>]>] Set of illegal workflow calls that are
  #   considered unsafe/non-deterministic and will raise if seen. The key of the hash is the fully qualified string
  #   class name (no leading `::`). The value is either `:all` which means any use of the class, or an array of
  #   symbols for methods on the class that cannot be used. The methods refer to either instance or class methods,
  #   there is no way to differentiate at this time.
  # @param workflow_failure_exception_types [Array<Class<Exception>>] Workflow failure exception types. This is the
  #   set of exception types that, if a workflow-thrown exception extends, will cause the workflow/update to fail
  #   instead of suspending the workflow via task failure. These are applied in addition to the
  #   `workflow_failure_exception_type` on the workflow definition class itself. If {::Exception} is set, it
  #   effectively will fail a workflow/update in all user exception cases.
  # @param workflow_payload_codec_thread_pool [ThreadPool, nil] Thread pool to run payload codec encode/decode within.
  #   This is required if a payload codec exists and the worker is not fiber based. Codecs can potentially block
  #   execution which is why they need to be run in the background.
  # @param debug_mode [Boolean] If true, deadlock detection is disabled. Deadlock detection will fail workflow tasks
  #   if they block the thread for too long. This defaults to true if the `TEMPORAL_DEBUG` environment variable is
  #   `true` or `1`.
  # @raise [ArgumentError]
  # @return [Worker] a new instance of Worker
  #
  # source://temporalio//lib/temporalio/worker.rb#349
  def initialize(client:, task_queue:, activities: T.unsafe(nil), workflows: T.unsafe(nil), tuner: T.unsafe(nil),
                 activity_executors: T.unsafe(nil), workflow_executor: T.unsafe(nil), interceptors: T.unsafe(nil), build_id: T.unsafe(nil), identity: T.unsafe(nil), logger: T.unsafe(nil), max_cached_workflows: T.unsafe(nil), max_concurrent_workflow_task_polls: T.unsafe(nil), nonsticky_to_sticky_poll_ratio: T.unsafe(nil), max_concurrent_activity_task_polls: T.unsafe(nil), no_remote_activities: T.unsafe(nil), sticky_queue_schedule_to_start_timeout: T.unsafe(nil), max_heartbeat_throttle_interval: T.unsafe(nil), default_heartbeat_throttle_interval: T.unsafe(nil), max_activities_per_second: T.unsafe(nil), max_task_queue_activities_per_second: T.unsafe(nil), graceful_shutdown_period: T.unsafe(nil), use_worker_versioning: T.unsafe(nil), disable_eager_activity_execution: T.unsafe(nil), illegal_workflow_calls: T.unsafe(nil), workflow_failure_exception_types: T.unsafe(nil), workflow_payload_codec_thread_pool: T.unsafe(nil), debug_mode: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/worker.rb#542
  def _activity_interceptors; end

  # source://temporalio//lib/temporalio/worker.rb#537
  def _bridge_worker; end

  # source://temporalio//lib/temporalio/worker.rb#525
  def _initiate_shutdown; end

  # source://temporalio//lib/temporalio/worker.rb#552
  def _on_poll_bytes(runner, worker_type, bytes); end

  # source://temporalio//lib/temporalio/worker.rb#568
  def _on_shutdown_complete; end

  # source://temporalio//lib/temporalio/worker.rb#532
  def _wait_all_complete; end

  # source://temporalio//lib/temporalio/worker.rb#520
  def _worker_shutdown_cancellation; end

  # source://temporalio//lib/temporalio/worker.rb#547
  def _workflow_interceptors; end

  # @return [Options] Frozen options for this client which has the same attributes as {initialize}.
  #
  # source://temporalio//lib/temporalio/worker.rb#278
  def options; end

  # Run this worker until cancellation or optional block completes. When the cancellation or block is complete, the
  # worker is shut down. This will return the block result if everything successful or raise an error if not.
  #
  # Upon shutdown (either via cancellation, block completion, or worker fatal error), the worker immediately stops
  # accepting new work. Then, after an optional grace period, all activities are canceled. This call then waits for
  # every activity and workflow task to complete before returning.
  #
  # @param cancellation [Cancellation] Cancellation that can be canceled to shut down this worker.
  # @param shutdown_signals [Array] Signals to trap and cause worker shutdown.
  # @param raise_in_block_on_shutdown [Exception, nil] Exception to {::Thread.raise} or {::Fiber.raise} if a block is
  #   present and still running on shutdown. If nil, `raise` is not used.
  # @param wait_block_complete [Boolean] If block given and shutdown caused by something else (e.g. cancellation
  #   canceled), whether to wait on the block to complete before returning.
  # @return [Object] Return value of the block or nil of no block given.
  # @yield Optional block. This will be run in a new background thread or fiber. Worker will shut down upon completion
  #   of this and, assuming no other failures, return/bubble success/exception of the block.
  #
  # source://temporalio//lib/temporalio/worker.rb#509
  def run(cancellation: T.unsafe(nil), shutdown_signals: T.unsafe(nil), raise_in_block_on_shutdown: T.unsafe(nil),
          wait_block_complete: T.unsafe(nil), &block)
  end

  # @return [String] Task queue set on the worker options.
  #
  # source://temporalio//lib/temporalio/worker.rb#489
  def task_queue; end

  private

  # source://temporalio//lib/temporalio/worker.rb#575
  def to_bridge_slot_supplier_options(slot_supplier); end

  class << self
    # source://temporalio//lib/temporalio/worker.rb#68
    def _load_default_build_id; end

    # @return [String] Memoized default build ID. This default value is built as a checksum of all of the loaded Ruby
    #   source files in `$LOADED_FEATURES`. Users may prefer to set the build ID to a better representation of the
    #   source.
    #
    # source://temporalio//lib/temporalio/worker.rb#63
    def default_build_id; end

    # @return [Hash<String, [:all, Array<Symbol>]>] Default, immutable set illegal calls used for the
    #   `illegal_workflow_calls` worker option. See the documentation of that option for more details.
    #
    # source://temporalio//lib/temporalio/worker.rb#232
    def default_illegal_workflow_calls; end

    # Run all workers until cancellation or optional block completes. When the cancellation or block is complete, the
    # workers are shut down. This will return the block result if everything successful or raise an error if not. See
    # {run} for details on how worker shutdown works.
    #
    # @param workers [Array<Worker>] Workers to run.
    # @param cancellation [Cancellation] Cancellation that can be canceled to shut down all workers.
    # @param shutdown_signals [Array] Signals to trap and cause worker shutdown.
    # @param raise_in_block_on_shutdown [Exception, nil] Exception to {::Thread.raise} or {::Fiber.raise} if a block is
    #   present and still running on shutdown. If nil, `raise` is not used.
    # @param wait_block_complete [Boolean] If block given and shutdown caused by something else (e.g. cancellation
    #   canceled), whether to wait on the block to complete before returning.
    # @raise [ArgumentError]
    # @return [Object] Return value of the block or nil of no block given.
    # @yield Optional block. This will be run in a new background thread or fiber. Workers will shut down upon
    #   completion of this and, assuming no other failures, return/bubble success/exception of the block.
    #
    # source://temporalio//lib/temporalio/worker.rb#102
    def run_all(*workers, cancellation: T.unsafe(nil), shutdown_signals: T.unsafe(nil),
                raise_in_block_on_shutdown: T.unsafe(nil), wait_block_complete: T.unsafe(nil), &block)
    end
  end
end

# Base class to be extended by activity executor implementations. Most users will not use this, but rather keep with
# the two defaults of thread pool and fiber executors.
#
# source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#8
class Temporalio::Worker::ActivityExecutor
  # @raise [NotImplementedError]
  # @return [Activity::Context, nil] Get the current activity context. This is called by users from inside the
  #   activity. Implementers must implement this.
  #
  # source://temporalio//lib/temporalio/worker/activity_executor.rb#40
  def activity_context; end

  # Execute the given block in the executor. The block is built to never raise and need no arguments. Implementers
  # must implement this.
  #
  # @param defn [Activity::Definition::Info] Activity definition info.
  # @raise [NotImplementedError]
  # @yield Block to execute.
  #
  # source://temporalio//lib/temporalio/worker/activity_executor.rb#34
  def execute_activity(defn, &); end

  # Initialize an activity. This is called on worker initialize for every activity that will use this executor. This
  # allows executor implementations to do eager validation based on the definition. This does not have to be
  # implemented and the default is a no-op.
  #
  # @param defn [Activity::Definition::Info] Activity definition info.
  #
  # source://temporalio//lib/temporalio/worker/activity_executor.rb#25
  def initialize_activity(defn); end

  # Set the current activity context (or unset if nil). This is called by the system from within the block given to
  # {execute_activity} with a context before user code is executed and with nil after user code is complete.
  # Implementers must implement this.
  #
  # @param defn [Activity::Definition::Info] Activity definition info.
  # @param context [Activity::Context, nil] The value to set.
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/worker/activity_executor.rb#50
  def set_activity_context(defn, context); end

  class << self
    # @return [Hash<Symbol, ActivityExecutor>] Default set of executors (immutable).
    #
    # source://temporalio//lib/temporalio/worker/activity_executor.rb#12
    def defaults; end
  end
end

# Activity executor for scheduling activites as fibers.
#
# source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#10
class Temporalio::Worker::ActivityExecutor::Fiber
  # @see ActivityExecutor.activity_context
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#31
  def activity_context; end

  # @see ActivityExecutor.initialize_activity
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#26
  def execute_activity(_defn, &); end

  # @raise [ArgumentError]
  # @see ActivityExecutor.initialize_activity
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#17
  def initialize_activity(defn); end

  # @see ActivityExecutor.set_activity_context
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#36
  def set_activity_context(defn, context); end

  class << self
    # @return [Fiber] Default/shared Fiber executor instance.
    #
    # source://temporalio//lib/temporalio/worker/activity_executor/fiber.rb#12
    def default; end
  end
end

# Activity executor for scheduling activities in their own thread using {Worker::ThreadPool}.
#
# source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#9
class Temporalio::Worker::ActivityExecutor::ThreadPool < Temporalio::Worker::ActivityExecutor
  # Create a new thread pool executor.
  #
  # @param thread_pool [Worker::ThreadPool] Thread pool to use.
  # @return [ThreadPool] a new instance of ThreadPool
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#18
  def initialize(thread_pool = T.unsafe(nil)); end

  # @see ActivityExecutor.activity_context
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#28
  def activity_context; end

  # @see ActivityExecutor.execute_activity
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#23
  def execute_activity(_defn, &); end

  # @see ActivityExecutor.set_activity_context
  #
  # source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#33
  def set_activity_context(defn, context); end

  class << self
    # @return [ThreadPool] Default/shared thread pool executor using default thread pool.
    #
    # source://temporalio//lib/temporalio/worker/activity_executor/thread_pool.rb#11
    def default; end
  end
end

# source://temporalio//lib/temporalio/worker/interceptor.rb#5
module Temporalio::Worker::Interceptor; end

# Mixin for intercepting activity worker work. Clases that `include` may implement their own {intercept_activity}
# that returns their own instance of {Inbound}.
#
# @note Input classes herein may get new required fields added and therefore the constructors of the Input classes
#   may change in backwards incompatible ways. Users should not try to construct Input classes themselves.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#11
module Temporalio::Worker::Interceptor::Activity
  # Method called when intercepting an activity. This is called when starting an activity attempt.
  #
  # @param next_interceptor [Inbound] Next interceptor in the chain that should be called. This is usually passed
  #   to {Inbound} constructor.
  # @return [Inbound] Interceptor to be called for activity calls.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#17
  def intercept_activity(next_interceptor); end
end

# Input for {Inbound.execute}.
class Temporalio::Worker::Interceptor::Activity::ExecuteInput < Data
  def args; end
  def headers; end
  def proc; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.heartbeat}.
class Temporalio::Worker::Interceptor::Activity::HeartbeatInput < Data
  def details; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Inbound interceptor for intercepting inbound activity calls. This should be extended by users needing to
# intercept activities.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#30
class Temporalio::Worker::Interceptor::Activity::Inbound
  # Initialize inbound with the next interceptor in the chain.
  #
  # @param next_interceptor [Inbound] Next interceptor in the chain.
  # @return [Inbound] a new instance of Inbound
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#37
  def initialize(next_interceptor); end

  # Execute an activity and return result or raise exception. Next interceptor in chain (i.e. `super`) will
  # perform the execution.
  #
  # @param input [ExecuteInput] Input information.
  # @return [Object] Activity result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#55
  def execute(input); end

  # Initialize the outbound interceptor. This should be extended by users to return their own {Outbound}
  # implementation that wraps the parameter here.
  #
  # @param outbound [Outbound] Next outbound interceptor in the chain.
  # @return [Outbound] Outbound activity interceptor.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#46
  def init(outbound); end

  # @return [Inbound] Next interceptor in the chain.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#32
  def next_interceptor; end
end

# Outbound interceptor for intercepting outbound activity calls. This should be extended by users needing to
# intercept activity calls.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#67
class Temporalio::Worker::Interceptor::Activity::Outbound
  # Initialize outbound with the next interceptor in the chain.
  #
  # @param next_interceptor [Outbound] Next interceptor in the chain.
  # @return [Outbound] a new instance of Outbound
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#74
  def initialize(next_interceptor); end

  # Issue a heartbeat.
  #
  # @param input [HeartbeatInput] Input information.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#81
  def heartbeat(input); end

  # @return [Outbound] Next interceptor in the chain.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#69
  def next_interceptor; end
end

# Mixin for intercepting workflow worker work. Classes that `include` may implement their own {intercept_workflow}
# that returns their own instance of {Inbound}.
#
# @note Input classes herein may get new required fields added and therefore the constructors of the Input classes
#   may change in backwards incompatible ways. Users should not try to construct Input classes themselves.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#92
module Temporalio::Worker::Interceptor::Workflow
  # Method called when intercepting a workflow. This is called when creating a workflow instance.
  #
  # @param next_interceptor [Inbound] Next interceptor in the chain that should be called. This is usually passed
  #   to {Inbound} constructor.
  # @return [Inbound] Interceptor to be called for workflow calls.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#98
  def intercept_workflow(next_interceptor); end
end

# Input for {Outbound.cancel_external_workflow}.
class Temporalio::Worker::Interceptor::Workflow::CancelExternalWorkflowInput < Data
  def id; end
  def run_id; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.execute_activity}.
class Temporalio::Worker::Interceptor::Workflow::ExecuteActivityInput < Data
  def activity; end
  def activity_id; end
  def args; end
  def cancellation; end
  def cancellation_type; end
  def disable_eager_execution; end
  def headers; end
  def heartbeat_timeout; end
  def retry_policy; end
  def schedule_to_close_timeout; end
  def schedule_to_start_timeout; end
  def start_to_close_timeout; end
  def task_queue; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Inbound.execute}.
class Temporalio::Worker::Interceptor::Workflow::ExecuteInput < Data
  def args; end
  def headers; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.execute_local_activity}.
class Temporalio::Worker::Interceptor::Workflow::ExecuteLocalActivityInput < Data
  def activity; end
  def activity_id; end
  def args; end
  def cancellation; end
  def cancellation_type; end
  def headers; end
  def local_retry_threshold; end
  def retry_policy; end
  def schedule_to_close_timeout; end
  def schedule_to_start_timeout; end
  def start_to_close_timeout; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Inbound.handle_query}.
class Temporalio::Worker::Interceptor::Workflow::HandleQueryInput < Data
  def args; end
  def definition; end
  def headers; end
  def id; end
  def query; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Inbound.handle_signal}.
class Temporalio::Worker::Interceptor::Workflow::HandleSignalInput < Data
  def args; end
  def definition; end
  def headers; end
  def signal; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Inbound.validate_update} and {Inbound.handle_update}.
class Temporalio::Worker::Interceptor::Workflow::HandleUpdateInput < Data
  def args; end
  def definition; end
  def headers; end
  def id; end
  def update; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Inbound interceptor for intercepting inbound workflow calls. This should be extended by users needing to
# intercept workflows.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#136
class Temporalio::Worker::Interceptor::Workflow::Inbound
  # Initialize inbound with the next interceptor in the chain.
  #
  # @param next_interceptor [Inbound] Next interceptor in the chain.
  # @return [Inbound] a new instance of Inbound
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#143
  def initialize(next_interceptor); end

  # Execute a workflow and return result or raise exception. Next interceptor in chain (i.e. `super`) will
  # perform the execution.
  #
  # @param input [ExecuteInput] Input information.
  # @return [Object] Workflow result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#161
  def execute(input); end

  # Handle a workflow query and return result or raise exception. Next interceptor in chain (i.e. `super`) will
  # perform the handling.
  #
  # @param input [HandleQueryInput] Input information.
  # @return [Object] Query result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#177
  def handle_query(input); end

  # Handle a workflow signal. Next interceptor in chain (i.e. `super`) will perform the handling.
  #
  # @param input [HandleSignalInput] Input information.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#168
  def handle_signal(input); end

  # Handle a workflow update and return result or raise exception. Next interceptor in chain (i.e. `super`) will
  # perform the handling.
  #
  # @param input [HandleUpdateInput] Input information.
  # @return [Object] Update result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#193
  def handle_update(input); end

  # Initialize the outbound interceptor. This should be extended by users to return their own {Outbound}
  # implementation that wraps the parameter here.
  #
  # @param outbound [Outbound] Next outbound interceptor in the chain.
  # @return [Outbound] Outbound workflow interceptor.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#152
  def init(outbound); end

  # @return [Inbound] Next interceptor in the chain.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#138
  def next_interceptor; end

  # Validate a workflow update. Next interceptor in chain (i.e. `super`) will perform the validation.
  #
  # @param input [HandleUpdateInput] Input information.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#184
  def validate_update(input); end
end

# Input for {Outbound.initialize_continue_as_new_error}.
class Temporalio::Worker::Interceptor::Workflow::InitializeContinueAsNewErrorInput < Data
  def error; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Outbound interceptor for intercepting outbound workflow calls. This should be extended by users needing to
# intercept workflow calls.
#
# source://temporalio//lib/temporalio/worker/interceptor.rb#289
class Temporalio::Worker::Interceptor::Workflow::Outbound
  # Initialize outbound with the next interceptor in the chain.
  #
  # @param next_interceptor [Outbound] Next interceptor in the chain.
  # @return [Outbound] a new instance of Outbound
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#296
  def initialize(next_interceptor); end

  # Cancel external workflow.
  #
  # @param input [CancelExternalWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#303
  def cancel_external_workflow(input); end

  # Execute activity.
  #
  # @param input [ExecuteActivityInput] Input.
  # @return [Object] Activity result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#311
  def execute_activity(input); end

  # Execute local activity.
  #
  # @param input [ExecuteLocalActivityInput] Input.
  # @return [Object] Activity result.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#319
  def execute_local_activity(input); end

  # Initialize continue as new error.
  #
  # @param input [InitializeContinueAsNewErrorInput] Input.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#326
  def initialize_continue_as_new_error(input); end

  # @return [Outbound] Next interceptor in the chain.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#291
  def next_interceptor; end

  # Signal child workflow.
  #
  # @param input [SignalChildWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#333
  def signal_child_workflow(input); end

  # Signal external workflow.
  #
  # @param input [SignalExternalWorkflowInput] Input.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#340
  def signal_external_workflow(input); end

  # Sleep.
  #
  # @param input [SleepInput] Input.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#347
  def sleep(input); end

  # Start child workflow.
  #
  # @param input [StartChildWorkflowInput] Input.
  # @return [Workflow::ChildWorkflowHandle] Child workflow handle.
  #
  # source://temporalio//lib/temporalio/worker/interceptor.rb#355
  def start_child_workflow(input); end
end

# Input for {Outbound.signal_child_workflow}.
class Temporalio::Worker::Interceptor::Workflow::SignalChildWorkflowInput < Data
  def args; end
  def cancellation; end
  def headers; end
  def id; end
  def signal; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.signal_external_workflow}.
class Temporalio::Worker::Interceptor::Workflow::SignalExternalWorkflowInput < Data
  def args; end
  def cancellation; end
  def headers; end
  def id; end
  def run_id; end
  def signal; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.sleep}.
class Temporalio::Worker::Interceptor::Workflow::SleepInput < Data
  def cancellation; end
  def duration; end
  def summary; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Input for {Outbound.start_child_workflow}.
class Temporalio::Worker::Interceptor::Workflow::StartChildWorkflowInput < Data
  def args; end
  def cancellation; end
  def cancellation_type; end
  def cron_schedule; end
  def execution_timeout; end
  def headers; end
  def id; end
  def id_reuse_policy; end
  def memo; end
  def parent_close_policy; end
  def retry_policy; end
  def run_timeout; end
  def search_attributes; end
  def task_queue; end
  def task_timeout; end
  def workflow; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Options as returned from {options} for `**to_h` splat use in {initialize}. See {initialize} for details.
#
# source://temporalio//lib/temporalio/worker.rb#58
class Temporalio::Worker::Options < Data
  def activities; end
  def activity_executors; end
  def build_id; end
  def client; end
  def debug_mode; end
  def default_heartbeat_throttle_interval; end
  def disable_eager_activity_execution; end
  def graceful_shutdown_period; end
  def identity; end
  def illegal_workflow_calls; end
  def interceptors; end
  def logger; end
  def max_activities_per_second; end
  def max_cached_workflows; end
  def max_concurrent_activity_task_polls; end
  def max_concurrent_workflow_task_polls; end
  def max_heartbeat_throttle_interval; end
  def max_task_queue_activities_per_second; end
  def no_remote_activities; end
  def nonsticky_to_sticky_poll_ratio; end
  def sticky_queue_schedule_to_start_timeout; end
  def task_queue; end
  def tuner; end
  def use_worker_versioning; end
  def workflow_executor; end
  def workflow_failure_exception_types; end
  def workflow_payload_codec_thread_pool; end
  def workflows; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# Implementation of a thread pool. This implementation is a stripped down form of Concurrent Ruby's
# `CachedThreadPool`.
#
# source://temporalio//lib/temporalio/worker/thread_pool.rb#12
class Temporalio::Worker::ThreadPool
  # Create a new thread pool that creates threads as needed.
  #
  # @param max_threads [Integer, nil] Maximum number of thread workers to create, or nil for unlimited max.
  # @param idle_timeout [Float] Number of seconds before a thread worker with no work should be stopped. Note,
  #   the check of whether a thread worker is idle is only done on each new {execute} call.
  # @return [ThreadPool] a new instance of ThreadPool
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#28
  def initialize(max_threads: T.unsafe(nil), idle_timeout: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#112
  def _ready_worker(worker, last_message); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#107
  def _remove_busy_worker(worker); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#117
  def _worker_died(worker); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#122
  def _worker_task_completed; end

  # @return [Integer] The number of threads that are actively executing tasks.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#71
  def active_count; end

  # @return [Integer] The number of tasks that have been completed by the pool since construction.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#66
  def completed_task_count; end

  # Execute the given block in a thread. The block should be built to never raise and need no arguments.
  #
  # @yield Block to execute.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#47
  def execute(&); end

  # Kill each thread. This should not be called until all workers using this executor are complete. This does not
  # need to be called at all on program exit (e.g. for the global default).
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#97
  def kill; end

  # @return [Integer] The largest number of threads that have been created in the pool since construction.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#56
  def largest_length; end

  # @return [Integer] The number of threads currently in the pool.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#76
  def length; end

  # @return [Integer] The number of tasks in the queue awaiting execution.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#81
  def queue_length; end

  # @return [Integer] The number of tasks that have been scheduled for execution on the pool since construction.
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#61
  def scheduled_task_count; end

  # Gracefully shutdown each thread when it is done with its current task. This should not be called until all
  # workers using this executor are complete. This does not need to be called at all on program exit (e.g. for the
  # global default).
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#88
  def shutdown; end

  private

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#143
  def locked_add_busy_worker; end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#128
  def locked_assign_worker(&); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#139
  def locked_enqueue(&); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#152
  def locked_prune_pool; end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#172
  def locked_ready_worker(worker, last_message); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#168
  def locked_remove_busy_worker(worker); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#181
  def locked_worker_died(worker); end

  class << self
    # source://temporalio//lib/temporalio/worker/thread_pool.rb#19
    def _monotonic_time; end

    # @return [ThreadPool] Default/shared thread pool instance with unlimited max threads.
    #
    # source://temporalio//lib/temporalio/worker/thread_pool.rb#14
    def default; end
  end
end

# source://temporalio//lib/temporalio/worker/thread_pool.rb#188
class Temporalio::Worker::ThreadPool::Worker
  # @return [Worker] a new instance of Worker
  #
  # source://temporalio//lib/temporalio/worker/thread_pool.rb#189
  def initialize(pool, id); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#219
  def <<(block); end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#229
  def kill; end

  # source://temporalio//lib/temporalio/worker/thread_pool.rb#224
  def stop; end
end

# Worker tuner that allows for dynamic customization of some aspects of worker configuration.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#6
class Temporalio::Worker::Tuner
  # Create a tuner from 3 slot suppliers.
  #
  # @param workflow_slot_supplier [SlotSupplier] Slot supplier for workflows.
  # @param activity_slot_supplier [SlotSupplier] Slot supplier for activities.
  # @param local_activity_slot_supplier [SlotSupplier] Slot supplier for local activities.
  # @return [Tuner] a new instance of Tuner
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#140
  def initialize(workflow_slot_supplier:, activity_slot_supplier:, local_activity_slot_supplier:); end

  # @return [SlotSupplier] Slot supplier for activities.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#130
  def activity_slot_supplier; end

  # @return [SlotSupplier] Slot supplier for local activities.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#133
  def local_activity_slot_supplier; end

  # @return [SlotSupplier] Slot supplier for workflows.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#127
  def workflow_slot_supplier; end

  class << self
    # Create a fixed-size tuner with the provided number of slots.
    #
    # @param workflow_slots [Integer] Maximum number of workflow task slots.
    # @param activity_slots [Integer] Maximum number of activity slots.
    # @param local_activity_slots [Integer] Maximum number of local activity slots.
    # @return [Tuner] Created tuner.
    #
    # source://temporalio//lib/temporalio/worker/tuner.rb#81
    def create_fixed(workflow_slots: T.unsafe(nil), activity_slots: T.unsafe(nil), local_activity_slots: T.unsafe(nil))
    end

    # Create a resource-based tuner with the provided options.
    #
    # @param target_memory_usage [Float] A value between 0 and 1 that represents the target (system) memory usage.
    #   It's not recommended to set this higher than 0.8, since how much memory a workflow may use is not predictable,
    #   and you don't want to encounter OOM errors.
    # @param target_cpu_usage [Float] A value between 0 and 1 that represents the target (system) CPU usage. This can
    #   be set to 1.0 if desired, but it's recommended to leave some headroom for other processes.
    # @param workflow_options [ResourceBasedSlotOptions] Resource-based options for workflow slot supplier.
    # @param activity_options [ResourceBasedSlotOptions] Resource-based options for activity slot supplier.
    # @param local_activity_options [ResourceBasedSlotOptions] Resource-based options for local activity slot
    #   supplier.
    # @return [Tuner] Created tuner.
    #
    # source://temporalio//lib/temporalio/worker/tuner.rb#105
    def create_resource_based(target_memory_usage:, target_cpu_usage:, workflow_options: T.unsafe(nil),
                              activity_options: T.unsafe(nil), local_activity_options: T.unsafe(nil))
    end
  end
end

# Options for a specific slot type being used with {SlotSupplier::ResourceBased}.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#68
class Temporalio::Worker::Tuner::ResourceBasedSlotOptions < Struct
  # @return [Integer, nil] Maximum amount of slots permitted. Defaults to 500.
  def max_slots; end

  # @return [Integer, nil] Maximum amount of slots permitted. Defaults to 500.
  def max_slots=(_); end

  # @return [Integer, nil] Amount of slots that will be issued regardless of any other checks. Defaults to 5 for
  #   workflows and 1 for activities.
  def min_slots; end

  # @return [Integer, nil] Amount of slots that will be issued regardless of any other checks. Defaults to 5 for
  #   workflows and 1 for activities.
  def min_slots=(_); end

  # @return [Float, nil] Minimum time we will wait (after passing the minimum slots number) between handing out
  #   new slots in seconds. Defaults to 0 for workflows and 0.05 for activities.
  #
  #   This value matters because how many resources a task will use cannot be determined ahead of time, and thus
  #   the system should wait to see how much resources are used before issuing more slots.
  def ramp_throttle; end

  # @return [Float, nil] Minimum time we will wait (after passing the minimum slots number) between handing out
  #   new slots in seconds. Defaults to 0 for workflows and 0.05 for activities.
  #
  #   This value matters because how many resources a task will use cannot be determined ahead of time, and thus
  #   the system should wait to see how much resources are used before issuing more slots.
  def ramp_throttle=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Options for {create_resource_based} or {SlotSupplier::ResourceBased}.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#49
class Temporalio::Worker::Tuner::ResourceBasedTunerOptions < Struct
  # @return [Float] A value between 0 and 1 that represents the target (system) CPU usage. This can be set to 1.0
  #   if desired, but it's recommended to leave some headroom for other processes.
  def target_cpu_usage; end

  # @return [Float] A value between 0 and 1 that represents the target (system) CPU usage. This can be set to 1.0
  #   if desired, but it's recommended to leave some headroom for other processes.
  def target_cpu_usage=(_); end

  # @return [Float] A value between 0 and 1 that represents the target (system) memory usage. It's not recommended
  #   to set this higher than 0.8, since how much memory a workflow may use is not predictable, and you don't want
  #   to encounter OOM errors.
  def target_memory_usage; end

  # @return [Float] A value between 0 and 1 that represents the target (system) memory usage. It's not recommended
  #   to set this higher than 0.8, since how much memory a workflow may use is not predictable, and you don't want
  #   to encounter OOM errors.
  def target_memory_usage=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Slot supplier used for reserving slots for execution. Currently the only implementations allowed are {Fixed} and
# {ResourceBased}.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#9
class Temporalio::Worker::Tuner::SlotSupplier; end

# A fixed-size slot supplier that will never issue more than a fixed number of slots.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#11
class Temporalio::Worker::Tuner::SlotSupplier::Fixed < Temporalio::Worker::Tuner::SlotSupplier
  # Create fixed-size slot supplier.
  #
  # @param slots [Integer] The maximum number of slots that can be issued.
  # @return [Fixed] a new instance of Fixed
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#18
  def initialize(slots); end

  # @return [Integer] The maximum number of slots that can be issued.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#13
  def slots; end
end

# A slot supplier that will dynamically adjust the number of slots based on resource usage.
#
# @note WARNING: This API is experimental.
#
# source://temporalio//lib/temporalio/worker/tuner.rb#26
class Temporalio::Worker::Tuner::SlotSupplier::ResourceBased < Temporalio::Worker::Tuner::SlotSupplier
  # Create a reosurce-based slot supplier.
  #
  # @param tuner_options [ResourceBasedTunerOptions] General tuner options.
  # @param slot_options [ResourceBasedSlotOptions] Slot-supplier-specific tuner options.
  # @return [ResourceBased] a new instance of ResourceBased
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#33
  def initialize(tuner_options:, slot_options:); end

  # Returns the value of attribute slot_options.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#27
  def slot_options; end

  # Returns the value of attribute tuner_options.
  #
  # source://temporalio//lib/temporalio/worker/tuner.rb#27
  def tuner_options; end
end

# Workflow executor that executes workflow tasks. Unlike {ActivityExecutor}, this class is not meant for user
# implementation. The only implementation that is currently accepted is {WorkflowExecutor::ThreadPool}.
#
# source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#16
class Temporalio::Worker::WorkflowExecutor
  # @return [WorkflowExecutor] a new instance of WorkflowExecutor
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor.rb#11
  def initialize; end

  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor.rb#21
  def _activate(activation, worker_state, &); end

  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor.rb#16
  def _validate_worker(worker, worker_state); end
end

# Thread pool implementation of {WorkflowExecutor}.
#
# Users should use {default} unless they have specific needs to change the thread pool or max threads.
#
# source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#20
class Temporalio::Worker::WorkflowExecutor::ThreadPool < Temporalio::Worker::WorkflowExecutor
  # Create a thread pool executor. Most users may prefer {default}.
  #
  # @param max_threads [Integer] Maximum number of threads to use concurrently.
  # @param thread_pool [Worker::ThreadPool] Thread pool to use.
  # @return [ThreadPool] a new instance of ThreadPool
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#30
  def initialize(max_threads: T.unsafe(nil), thread_pool: T.unsafe(nil)); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#44
  def _activate(activation, worker_state, &); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#74
  def _remove_workflow(worker_state, run_id); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#69
  def _thread_pool; end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#39
  def _validate_worker(worker, worker_state); end

  class << self
    # @return [ThreadPool] Default executor that lazily constructs an instance with default values.
    #
    # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#22
    def default; end
  end
end

# Error raised when a processing a workflow task takes more than the expected amount of time.
#
# source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#226
class Temporalio::Worker::WorkflowExecutor::ThreadPool::DeadlockError < Exception; end

# source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#90
class Temporalio::Worker::WorkflowExecutor::ThreadPool::Worker
  # @return [Worker] a new instance of Worker
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#95
  def initialize(executor); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#103
  def enqueue_activation(activation, worker_state, &); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#108
  def shutdown; end

  # Returns the value of attribute workflow_count.
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#93
  def workflow_count; end

  # Sets the attribute workflow_count
  #
  # @param value the value to set the attribute workflow_count to.
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#93
  def workflow_count=(_arg0); end

  private

  # @yield [completion]
  #
  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#132
  def activate(activation, worker_state, &); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#183
  def create_instance(initial_activation, worker_state); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#217
  def evict(worker_state, run_id); end

  # source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#114
  def run; end
end

# source://temporalio//lib/temporalio/worker/workflow_executor/thread_pool.rb#91
Temporalio::Worker::WorkflowExecutor::ThreadPool::Worker::LOG_ACTIVATIONS = T.let(T.unsafe(nil), FalseClass)

# Module with all class-methods that can be made from a workflow. Methods on this module cannot be used outside of a
# workflow with the obvious exception of {in_workflow?}. This module is not meant to be included or mixed in.
#
# source://temporalio//lib/temporalio/workflow/activity_cancellation_type.rb#6
module Temporalio::Workflow
  class << self
    # @raise [Error]
    #
    # source://temporalio//lib/temporalio/workflow.rb#427
    def _current; end

    # source://temporalio//lib/temporalio/workflow.rb#435
    def _current_or_nil; end

    # @return [Boolean] Whether all update and signal handlers have finished executing. Consider waiting on this
    #   condition before workflow return or continue-as-new, to prevent interruption of in-progress handlers by workflow
    #   return: `Temporalio::Workflow.wait_condition { Temporalio::Workflow.all_handlers_finished? }``
    #
    # source://temporalio//lib/temporalio/workflow.rb#24
    def all_handlers_finished?; end

    # @return [Cancellation] Cancellation for the workflow. This is canceled when a workflow cancellation request is
    #   received. This is the default cancellation for most workflow calls.
    #
    # source://temporalio//lib/temporalio/workflow.rb#30
    def cancellation; end

    # @return [Boolean] Whether continue as new is suggested. This value is the current continue-as-new suggestion up
    #   until the current task. Note, this value may not be up to date when accessed in a query. When continue as new is
    #   suggested is based on server-side configuration.
    #
    # source://temporalio//lib/temporalio/workflow.rb#37
    def continue_as_new_suggested; end

    # @return [Integer] Current number of events in history. This value is the current history event count up until the
    #   current task. Note, this value may not be up to date when accessed in a query.
    #
    # source://temporalio//lib/temporalio/workflow.rb#43
    def current_history_length; end

    # @return [Integer] Current history size in bytes. This value is the current history size up until the current task.
    #   Note, this value may not be up to date when accessed in a query.
    #
    # source://temporalio//lib/temporalio/workflow.rb#49
    def current_history_size; end

    # @return [UpdateInfo] Current update info if this code is running inside an update. This is set via a Fiber-local
    #   storage so it is only visible to the current handler fiber.
    #
    # source://temporalio//lib/temporalio/workflow.rb#55
    def current_update_info; end

    # Mark a patch as deprecated.
    #
    # This marks a workflow that had {patched} in a previous version of the code as no longer applicable because all
    # workflows that use the old code path are done and will never be queried again. Therefore the old code path is
    # removed as well.
    #
    # @param patch_id [Symbol, String] Patch ID.
    #
    # source://temporalio//lib/temporalio/workflow.rb#66
    def deprecate_patch(patch_id); end

    # Execute an activity and return its result. Either `start_to_close_timeout` or `schedule_to_close_timeout` _must_
    # be set. The `heartbeat_timeout` should be set for any non-immediately-completing activity so it can receive
    # cancellation. To run an activity in the background, use a {Future}.
    #
    # @note Using an already-canceled cancellation may give a different exception than canceling after started. Use
    #   {Error.canceled?} to check if the exception is a cancellation either way.
    # @param activity [Class<Activity::Definition>, Symbol, String] Activity definition class or activity name.
    # @param args [Array<Object>] Arguments to the activity.
    # @param task_queue [String] Task queue to run the activity on. Defaults to the current workflow's task queue.
    # @param schedule_to_close_timeout [Float, nil] Max amount of time the activity can take from first being scheduled
    #   to being completed before it times out. This is inclusive of all retries.
    # @param schedule_to_start_timeout [Float, nil] Max amount of time the activity can take to be started from first
    #   being scheduled.
    # @param start_to_close_timeout [Float, nil] Max amount of time a single activity run can take from when it starts
    #   to when it completes. This is per retry.
    # @param heartbeat_timeout [Float, nil] How frequently an activity must invoke heartbeat while running before it is
    #   considered timed out. This also affects how heartbeats are throttled, see general heartbeating documentation.
    # @param retry_policy [RetryPolicy] How an activity is retried on failure. If unset, a server-defined default is
    #   used. Set maximum attempts to 1 to disable retries.
    # @param cancellation [Cancellation] Cancellation to apply to the activity. How cancellation is treated is based on
    #   `cancellation_type`. This defaults to the workflow's cancellation, but may need to be overridden with a
    #   new/detached one if an activity is being run in an `ensure` after workflow cancellation.
    # @param cancellation_type [ActivityCancellationType] How the activity is treated when it is canceled from the
    #   workflow.
    # @param activity_id [String, nil] Optional unique identifier for the activity. This is an advanced setting that
    #   should not be set unless users are sure they need to. Contact Temporal before setting this value.
    # @param disable_eager_execution [Boolean] Whether eager execution is disabled. Eager activity execution is an
    #   optimization on some servers that sends activities back to the same worker as the calling workflow if they can
    #   run there. If `false` (the default), eager execution may still be disabled at the worker level or may not be
    #   requested due to lack of available slots.
    # @raise [Error::ActivityError] Activity failed (and retry was disabled or exhausted).
    # @raise [Error::CanceledError] Activity was canceled before started. When canceled after started (and not
    #   waited-then-swallowed), instead this canceled error is the cause of a {Error::ActivityError}.
    # @return [Object] Result of the activity.
    #
    # source://temporalio//lib/temporalio/workflow.rb#106
    #
    # NOTE: Manually removed due to arity issues, see README
    # def execute_activity(activity, *args, task_queue: T.unsafe(nil), schedule_to_close_timeout: T.unsafe(nil),
    #                     schedule_to_start_timeout: T.unsafe(nil), start_to_close_timeout: T.unsafe(nil), heartbeat_timeout: T.unsafe(nil), retry_policy: T.unsafe(nil), cancellation: T.unsafe(nil), cancellation_type: T.unsafe(nil), activity_id: T.unsafe(nil), disable_eager_execution: T.unsafe(nil))
    # end

    # Shortcut for {start_child_workflow} + {ChildWorkflowHandle.result}. See those two calls for more details.
    #
    # source://temporalio//lib/temporalio/workflow.rb#128
    def execute_child_workflow(workflow, *args, id: T.unsafe(nil), task_queue: T.unsafe(nil),
                               cancellation: T.unsafe(nil), cancellation_type: T.unsafe(nil), parent_close_policy: T.unsafe(nil), execution_timeout: T.unsafe(nil), run_timeout: T.unsafe(nil), task_timeout: T.unsafe(nil), id_reuse_policy: T.unsafe(nil), retry_policy: T.unsafe(nil), cron_schedule: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil))
    end

    # Execute an activity locally in this same workflow task and return its result. This should usually only be used for
    # short/simple activities where the result performance matters. Either `start_to_close_timeout` or
    # `schedule_to_close_timeout` _must_ be set. To run an activity in the background, use a {Future}.
    #
    # @note Using an already-canceled cancellation may give a different exception than canceling after started. Use
    #   {Error.canceled?} to check if the exception is a cancellation either way.
    # @param activity [Class<Activity::Definition>, Symbol, String] Activity definition class or name.
    # @param args [Array<Object>] Arguments to the activity.
    # @param schedule_to_close_timeout [Float, nil] Max amount of time the activity can take from first being scheduled
    #   to being completed before it times out. This is inclusive of all retries.
    # @param schedule_to_start_timeout [Float, nil] Max amount of time the activity can take to be started from first
    #   being scheduled.
    # @param start_to_close_timeout [Float, nil] Max amount of time a single activity run can take from when it starts
    #   to when it completes. This is per retry.
    # @param retry_policy [RetryPolicy] How an activity is retried on failure. If unset, a server-defined default is
    #   used. Set maximum attempts to 1 to disable retries.
    # @param local_retry_threshold [Float, nil] If the activity is retrying and backoff would exceed this value, a timer
    #   is scheduled and the activity is retried after. Otherwise, backoff will happen internally within the task.
    #   Defaults to 1 minute.
    # @param cancellation [Cancellation] Cancellation to apply to the activity. How cancellation is treated is based on
    #   `cancellation_type`. This defaults to the workflow's cancellation, but may need to be overridden with a
    #   new/detached one if an activity is being run in an `ensure` after workflow cancellation.
    # @param cancellation_type [ActivityCancellationType] How the activity is treated when it is canceled from the
    #   workflow.
    # @param activity_id [String, nil] Optional unique identifier for the activity. This is an advanced setting that
    #   should not be set unless users are sure they need to. Contact Temporal before setting this value.
    # @raise [Error::ActivityError] Activity failed (and retry was disabled or exhausted).
    # @raise [Error::CanceledError] Activity was canceled before started. When canceled after started (and not
    #   waited-then-swallowed), instead this canceled error is the cause of a {Error::ActivityError}.
    # @return [Object] Result of the activity.
    #
    # source://temporalio//lib/temporalio/workflow.rb#184
    def execute_local_activity(activity, *args, schedule_to_close_timeout: T.unsafe(nil),
                               schedule_to_start_timeout: T.unsafe(nil), start_to_close_timeout: T.unsafe(nil), retry_policy: T.unsafe(nil), local_retry_threshold: T.unsafe(nil), cancellation: T.unsafe(nil), cancellation_type: T.unsafe(nil), activity_id: T.unsafe(nil))
    end

    # Get a handle to an external workflow for canceling and issuing signals.
    #
    # @param workflow_id [String] Workflow ID.
    # @param run_id [String, nil] Optional, specific run ID.
    # @return [ExternalWorkflowHandle] External workflow handle.
    #
    # source://temporalio//lib/temporalio/workflow.rb#209
    def external_workflow_handle(workflow_id, run_id: T.unsafe(nil)); end

    # @return [Boolean] Whether the current code is executing in a workflow.
    #
    # source://temporalio//lib/temporalio/workflow.rb#214
    def in_workflow?; end

    # @return [Info] Information about the current workflow.
    #
    # source://temporalio//lib/temporalio/workflow.rb#219
    def info; end

    # @return [Logger] Logger for the workflow. This is a scoped logger that automatically appends workflow details to
    #   every log and takes care not to log during replay.
    #
    # source://temporalio//lib/temporalio/workflow.rb#225
    def logger; end

    # @return [Hash{String, Symbol => Object}] Memo for the workflow. This is a read-only view of the memo. To update
    #   the memo, use {upsert_memo}. This always returns the same instance and updates are reflected on the returned
    #   instance, so it is not technically frozen.
    #
    # source://temporalio//lib/temporalio/workflow.rb#232
    def memo; end

    # @return [Metric::Meter] Metric meter to create metrics on. This metric meter already contains some
    #   workflow-specific attributes and takes care not to apply metrics during replay.
    #
    # source://temporalio//lib/temporalio/workflow.rb#238
    def metric_meter; end

    # @return [Time] Current UTC time for this workflow. This creates and returns a new {::Time} instance every time it
    #   is invoked, it is not the same instance continually mutated.
    #
    # source://temporalio//lib/temporalio/workflow.rb#244
    def now; end

    # Patch a workflow.
    #
    # When called, this will only return true if code should take the newer path which means this is either not
    # replaying or is replaying and has seen this patch before. Results for successive calls to this function for the
    # same ID and workflow are memoized. Use {deprecate_patch} when all workflows are done and will never be queried
    # again. The old code path can be removed at that time too.
    #
    # @param patch_id [Symbol, String] Patch ID.
    # @return [Boolean] True if this should take the newer patch, false if it should take the old path.
    #
    # source://temporalio//lib/temporalio/workflow.rb#257
    def patched(patch_id); end

    # @return [Converters::PayloadConverter] Payload converter for the workflow.
    #
    # source://temporalio//lib/temporalio/workflow.rb#262
    def payload_converter; end

    # @return [Hash<String, Definition::Query>] Query handlers for this workflow. This hash is mostly immutable except
    #   for `[]=` (and `store`) which can be used to set a new handler, or can be set with `nil` to remove a handler.
    #   For most use cases, defining a handler as a `workflow_query` method is best.
    #
    # source://temporalio//lib/temporalio/workflow.rb#269
    def query_handlers; end

    # @return [Random] Deterministic instance of {::Random} for use in a workflow. This instance should be accessed each
    #   time needed, not stored. This instance may be recreated with a different seed in special cases (e.g. workflow
    #   reset). Do not use any other randomization inside workflow code.
    #
    # source://temporalio//lib/temporalio/workflow.rb#276
    def random; end

    # @return [SearchAttributes] Search attributes for the workflow. This is a read-only view of the attributes. To
    #   update the attributes, use {upsert_search_attributes}. This always returns the same instance and updates are
    #   reflected on the returned instance, so it is not technically frozen.
    #
    # source://temporalio//lib/temporalio/workflow.rb#283
    def search_attributes; end

    # @return [Hash<String, Definition::Signal>] Signal handlers for this workflow. This hash is mostly immutable except
    #   for `[]=` (and `store`) which can be used to set a new handler, or can be set with `nil` to remove a handler.
    #   For most use cases, defining a handler as a `workflow_signal` method is best.
    #
    # source://temporalio//lib/temporalio/workflow.rb#290
    def signal_handlers; end

    # Sleep in a workflow for the given time.
    #
    # @param duration [Float, nil] Time to sleep in seconds. `nil` represents infinite, which does not start a timer and
    #   just waits for cancellation. `0` is assumed to be 1 millisecond and still results in a server-side timer. This
    #   value cannot be negative. Since Temporal timers are server-side, timer resolution may not end up as precise as
    #   system timers.
    # @param summary [String, nil] A simple string identifying this timer that may be visible in UI/CLI. While it can be
    #   normal text, it is best to treat as a timer ID.
    # @param cancellation [Cancellation] Cancellation for this timer.
    # @raise [Error::CanceledError] Sleep canceled.
    #
    # source://temporalio//lib/temporalio/workflow.rb#304
    def sleep(duration, summary: T.unsafe(nil), cancellation: T.unsafe(nil)); end

    # Start a child workflow and return the handle.
    #
    # @param workflow [Class<Workflow::Definition>, Symbol, String] Workflow definition class or workflow name.
    # @param args [Array<Object>] Arguments to the workflow.
    # @param id [String] Unique identifier for the workflow execution. Defaults to a new UUID from {random}.
    # @param task_queue [String] Task queue to run the workflow on. Defaults to the current workflow's task queue.
    # @param cancellation [Cancellation] Cancellation to apply to the child workflow. How cancellation is treated is
    #   based on `cancellation_type`. This defaults to the workflow's cancellation.
    # @param cancellation_type [ChildWorkflowCancellationType] How the child workflow will react to cancellation.
    # @param parent_close_policy [ParentClosePolicy] How to handle the child workflow when the parent workflow closes.
    # @param execution_timeout [Float, nil] Total workflow execution timeout in seconds including retries and continue
    #   as new.
    # @param run_timeout [Float, nil] Timeout of a single workflow run inseconds.
    # @param task_timeout [Float, nil] Timeout of a single workflow task in seconds.
    # @param id_reuse_policy [WorkflowIDReusePolicy] How already-existing IDs are treated.
    # @param retry_policy [RetryPolicy, nil] Retry policy for the workflow.
    # @param cron_schedule [String, nil] Cron schedule. Users should use schedules instead of this.
    # @param memo [Hash{String, Symbol => Object}, nil] Memo for the workflow.
    # @param search_attributes [SearchAttributes, nil] Search attributes for the workflow.
    # @raise [Error::WorkflowAlreadyStartedError] Workflow already exists for the ID.
    # @raise [Error::CanceledError] Starting of the child was canceled.
    # @return [ChildWorkflowHandle] Workflow handle to the started workflow.
    #
    # source://temporalio//lib/temporalio/workflow.rb#331
    def start_child_workflow(workflow, *args, id: T.unsafe(nil), task_queue: T.unsafe(nil),
                             cancellation: T.unsafe(nil), cancellation_type: T.unsafe(nil), parent_close_policy: T.unsafe(nil), execution_timeout: T.unsafe(nil), run_timeout: T.unsafe(nil), task_timeout: T.unsafe(nil), id_reuse_policy: T.unsafe(nil), retry_policy: T.unsafe(nil), cron_schedule: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil))
    end

    # Run the block until the timeout is reached. This is backed by {sleep}. This does not accept cancellation because
    # it is expected the block within will properly handle/bubble cancellation.
    #
    # @param duration [Float, nil] Duration for the timeout. This is backed by {sleep} so see that method for details.
    # @param exception_class [Class<Exception>] Exception to raise on timeout. Defaults to {::Timeout::Error} like
    #   {::Timeout.timeout}. Note that {::Timeout::Error} is considered a workflow failure exception, not a task failure
    #   exception.
    # @param message [String] Message to use for timeout exception. Defaults to "execution expired" like
    #   {::Timeout.timeout}.
    # @param summary [String] Timer summer for the timer created by this timeout. This is backed by {sleep} so see that
    #   method for details.
    # @raise [Exception] Upon timeout, raises whichever class is set in `exception_class` with the message of `message`.
    # @return [Object] The result of the block.
    # @yield Block to run with a timeout.
    #
    # source://temporalio//lib/temporalio/workflow.rb#370
    def timeout(duration, exception_class = T.unsafe(nil), message = T.unsafe(nil), summary: T.unsafe(nil), &_arg4); end

    # @return [Hash<String, Definition::Update>] Update handlers for this workflow. This hash is mostly immutable except
    #   for `[]=` (and `store`) which can be used to set a new handler, or can be set with `nil` to remove a handler.
    #   For most use cases, defining a handler as a `workflow_update` method is best.
    #
    # source://temporalio//lib/temporalio/workflow.rb#383
    def update_handlers; end

    # Issue updates to the workflow memo.
    #
    # @param hash [Hash{String, Symbol => Object, nil}] Updates to apply. Value can be `nil` to effectively remove the
    #   memo value.
    #
    # source://temporalio//lib/temporalio/workflow.rb#391
    def upsert_memo(hash); end

    # Issue updates to the workflow search attributes.
    #
    # @param updates [Array<SearchAttributes::Update>] Updates to apply. Note these are {SearchAttributes::Update}
    #   objects which are created via {SearchAttributes::Key.value_set} and {SearchAttributes::Key.value_unset} methods.
    #
    # source://temporalio//lib/temporalio/workflow.rb#399
    def upsert_search_attributes(*updates); end

    # Wait for the given block to return a "truthy" value (i.e. any value other than `false` or `nil`). The block must
    # be side-effect free since it may be invoked frequently during event loop iteration. To timeout a wait, {timeout}
    # can be used. This cannot be used in side-effect-free contexts such as `initialize`, queries, or update validators.
    #
    # This is very commonly used to wait on a value to be set by a handler, e.g.
    # `Temporalio::Workflow.wait_condition { @some_value }`. Special care was taken to only wake up a single wait
    # condition when it evaluates to true. Therefore if multiple wait conditions are waiting on the same thing, only one
    # is awoken at a time, which means the code immediately following that wait condition can change the variable before
    # other wait conditions are evaluated. This is a useful property for building mutexes/semaphores.
    #
    # @param cancellation [Cancellation, nil] Cancellation to cancel the wait. This defaults to the workflow's
    #   cancellation.
    # @raise [Error::CanceledError] Wait was canceled.
    # @return [Object] Truthy value returned from the block.
    # @yield Block that is run many times to test for truthiness.
    # @yieldreturn [Object] Value to check whether truthy or falsy.
    #
    # source://temporalio//lib/temporalio/workflow.rb#420
    def wait_condition(cancellation: T.unsafe(nil), &_arg1); end
  end
end

# Cancellation types for activities.
#
# source://temporalio//lib/temporalio/workflow/activity_cancellation_type.rb#8
module Temporalio::Workflow::ActivityCancellationType; end

# Do not request cancellation of the activity and immediately report cancellation to the workflow.
#
# source://temporalio//lib/temporalio/workflow/activity_cancellation_type.rb#17
Temporalio::Workflow::ActivityCancellationType::ABANDON = T.let(T.unsafe(nil), Integer)

# Initiate a cancellation request and immediately report cancellation to the workflow.
#
# source://temporalio//lib/temporalio/workflow/activity_cancellation_type.rb#10
Temporalio::Workflow::ActivityCancellationType::TRY_CANCEL = T.let(T.unsafe(nil), Integer)

# Wait for activity cancellation completion. Note that activity must heartbeat to receive a cancellation
# notification. This can block the cancellation for a long time if activity doesn't heartbeat or chooses to ignore
# the cancellation request.
#
# source://temporalio//lib/temporalio/workflow/activity_cancellation_type.rb#14
Temporalio::Workflow::ActivityCancellationType::WAIT_CANCELLATION_COMPLETED = T.let(T.unsafe(nil), Integer)

# Cancellation types for child workflows.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_cancellation_type.rb#8
module Temporalio::Workflow::ChildWorkflowCancellationType; end

# Do not request cancellation of the child workflow if already scheduled.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_cancellation_type.rb#10
Temporalio::Workflow::ChildWorkflowCancellationType::ABANDON = T.let(T.unsafe(nil), Integer)

# Initiate a cancellation request and immediately report cancellation to the parent.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_cancellation_type.rb#12
Temporalio::Workflow::ChildWorkflowCancellationType::TRY_CANCEL = T.let(T.unsafe(nil), Integer)

# Wait for child cancellation completion.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_cancellation_type.rb#14
Temporalio::Workflow::ChildWorkflowCancellationType::WAIT_CANCELLATION_COMPLETED = T.let(T.unsafe(nil), Integer)

# Request cancellation of the child and wait for confirmation that the request was received.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_cancellation_type.rb#17
Temporalio::Workflow::ChildWorkflowCancellationType::WAIT_CANCELLATION_REQUESTED = T.let(T.unsafe(nil), Integer)

# Handle for interacting with a child workflow.
#
# This is created via {Workflow.start_child_workflow}, it is never instantiated directly.
#
# source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#8
class Temporalio::Workflow::ChildWorkflowHandle
  # @raise [NotImplementedError]
  # @return [ChildWorkflowHandle] a new instance of ChildWorkflowHandle
  #
  # source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#10
  def initialize; end

  # @raise [NotImplementedError]
  # @return [String] Run ID for the workflow.
  #
  # source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#20
  def first_execution_run_id; end

  # @raise [NotImplementedError]
  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#15
  def id; end

  # Wait for the result.
  #
  # @raise [Error::ChildWorkflowError] Workflow failed with +cause+ as the cause.
  # @return [Object] Result of the child workflow.
  #
  # source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#29
  def result; end

  # Signal the child workflow.
  #
  # @param signal [Workflow::Definition::Signal, Symbol, String] Signal definition or name.
  # @param args [Array<Object>] Signal args.
  # @param cancellation [Cancellation] Cancellation for canceling the signalling.
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/workflow/child_workflow_handle.rb#38
  def signal(signal, *args, cancellation: T.unsafe(nil)); end
end

# Error that is raised by a workflow out of the primary workflow method to issue a continue-as-new.
#
# source://temporalio//lib/temporalio/workflow.rb#464
class Temporalio::Workflow::ContinueAsNewError < Temporalio::Error
  # Create a continue as new error.
  #
  # @param args [Array<Object>] Arguments for the new workflow.
  # @param workflow [Class<Workflow::Definition>, String, Symbol, nil] Workflow definition class or workflow name.
  #   If unset/nil, the current workflow is used.
  # @param task_queue [String, nil] Task queue for the workflow. If unset/nil, the current workflow task queue is
  #   used.
  # @param run_timeout [Float, nil] Timeout of a single workflow run in seconds. The default is _not_ carried over
  #   from the current workflow.
  # @param task_timeout [Float, nil] Timeout of a single workflow task in seconds. The default is _not_ carried over
  #   from the current workflow.
  # @param retry_policy [RetryPolicy, nil] Retry policy for the workflow. If unset/nil, the current workflow retry
  #   policy is used.
  # @param memo [Hash{String, Symbol => Object}, nil] Memo for the workflow. If unset/nil, the current workflow memo
  #   is used.
  # @param search_attributes [SearchAttributes, nil] Search attributes for the workflow. If unset/nil, the current
  #   workflow search attributes are used.
  # @param headers [Hash<String, Object>] Headers for the workflow. The default is _not_ carried over from the
  #   current workflow.
  # @return [ContinueAsNewError] a new instance of ContinueAsNewError
  #
  # source://temporalio//lib/temporalio/workflow.rb#487
  def initialize(*args, workflow: T.unsafe(nil), task_queue: T.unsafe(nil), run_timeout: T.unsafe(nil),
                 task_timeout: T.unsafe(nil), retry_policy: T.unsafe(nil), memo: T.unsafe(nil), search_attributes: T.unsafe(nil), headers: T.unsafe(nil))
  end

  # Returns the value of attribute args.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def args; end

  # Sets the attribute args
  #
  # @param value the value to set the attribute args to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def args=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def headers=(_arg0); end

  # Returns the value of attribute memo.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def memo; end

  # Sets the attribute memo
  #
  # @param value the value to set the attribute memo to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def memo=(_arg0); end

  # Returns the value of attribute retry_policy.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def retry_policy; end

  # Sets the attribute retry_policy
  #
  # @param value the value to set the attribute retry_policy to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def retry_policy=(_arg0); end

  # Returns the value of attribute run_timeout.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def run_timeout; end

  # Sets the attribute run_timeout
  #
  # @param value the value to set the attribute run_timeout to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def run_timeout=(_arg0); end

  # Returns the value of attribute search_attributes.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def search_attributes; end

  # Sets the attribute search_attributes
  #
  # @param value the value to set the attribute search_attributes to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def search_attributes=(_arg0); end

  # Returns the value of attribute task_queue.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def task_queue; end

  # Sets the attribute task_queue
  #
  # @param value the value to set the attribute task_queue to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def task_queue=(_arg0); end

  # Returns the value of attribute task_timeout.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def task_timeout; end

  # Sets the attribute task_timeout
  #
  # @param value the value to set the attribute task_timeout to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def task_timeout=(_arg0); end

  # Returns the value of attribute workflow.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def workflow; end

  # Sets the attribute workflow
  #
  # @param value the value to set the attribute workflow to.
  #
  # source://temporalio//lib/temporalio/workflow.rb#465
  def workflow=(_arg0); end
end

# Base class for all workflows.
#
# Workflows are instances of this class and must implement {execute}. Inside the workflow code, class methods on
# {Workflow} can be used.
#
# By default, the workflow is named as its unqualified class name. This can be customized with {workflow_name}.
#
# source://temporalio//lib/temporalio/workflow/definition.rb#14
class Temporalio::Workflow::Definition
  # Execute the workflow. This is the primary workflow method. The workflow is completed when this method completes.
  # This must be implemented by all workflows.
  #
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#390
  #
  # NOTE: Manually removed due to arity issues, see README
  # def execute(*args); end

  class << self
    # source://temporalio//lib/temporalio/workflow/definition.rb#300
    def _build_workflow_definition; end

    # source://temporalio//lib/temporalio/workflow/definition.rb#276
    def _workflow_definition; end

    # source://temporalio//lib/temporalio/workflow/definition.rb#281
    def _workflow_type_from_workflow_parameter(workflow); end

    # @private
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#189
    def method_added(method_name); end

    # source://temporalio//lib/temporalio/workflow/definition.rb#267
    def singleton_method_added(method_name); end

    protected

    # Set a workflow as dynamic. Dynamic workflows do not have names and handle any workflow that is not otherwise
    # registered. A worker can only have one dynamic workflow. It is often useful to use {workflow_raw_args} with
    # this.
    #
    # @param value [Boolean] Whether the workflow is dynamic.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#36
    def workflow_dynamic(value = T.unsafe(nil)); end

    # Configure workflow failure exception types. This sets the types of exceptions that, if a
    # workflow-thrown exception extends, will cause the workflow/update to fail instead of suspending the workflow
    # via task failure. These are applied in addition to the worker option. If {::Exception} is set, it effectively
    # will fail a workflow/update in all user exception cases.
    #
    # @param types [Array<Class<Exception>>] Exception types to turn into workflow failures.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#55
    def workflow_failure_exception_type(*types); end

    # Mark an `initialize` as needing the workflow start arguments. Otherwise, `initialize` must accept no required
    # arguments. This must be placed above the `initialize` method or it will fail.
    #
    # @param value [Boolean] Whether the start parameters will be passed to `initialize`.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#95
    def workflow_init(value = T.unsafe(nil)); end

    # Customize the workflow name. By default the workflow is named the unqualified class name of the class provided
    # to the worker.
    #
    # @param workflow_name [String, Symbol] Name to use.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#22
    def workflow_name(workflow_name); end

    # Mark the next method as a workflow query with a default name as the name of the method. Queries can not have
    # any side effects, meaning they should never mutate state or try to wait on anything.
    #
    # @param name [String, Symbol, nil] Override the default name.
    # @param dynamic [Boolean] If true, make the query dynamic. This means it receives all other queries without
    #   handlers. This cannot have a name override since it is nameless. The first parameter will be the name. Often
    #   it is useful to have the second parameter be `*args` and `raw_args` be true.
    # @param raw_args [Boolean] If true, does not convert arguments, but instead provides each argument as
    #   {Converters::RawValue} which is a raw payload wrapper, convertible with {Workflow.payload_converter}.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#130
    def workflow_query(name: T.unsafe(nil), dynamic: T.unsafe(nil), raw_args: T.unsafe(nil)); end

    # Expose an attribute as a method and as a query. A `workflow_query_attr_reader :foo` is the equivalent of:
    # ```
    # workflow_query
    # def foo
    #   @foo
    # end
    # ```
    # This means it is a superset of `attr_reader`` and will not work if also using `attr_reader` or
    # `attr_accessor`. If a writer is needed alongside this, use `attr_writer`.
    #
    # @param attr_names [Array<Symbol>] Attributes to expose.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#74
    def workflow_query_attr_reader(*attr_names); end

    # Have workflow arguments delivered to `execute` (and `initialize` if {workflow_init} in use) as
    # {Converters::RawValue}s. These are wrappers for the raw payloads that have not been converted to types (but
    # they have been decoded by the codec if present). They can be converted with {Workflow.payload_converter}.
    #
    # @param value [Boolean] Whether the workflow accepts raw arguments.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#45
    def workflow_raw_args(value = T.unsafe(nil)); end

    # Mark the next method as a workflow signal with a default name as the name of the method. Signals cannot return
    # values.
    #
    # @param name [String, Symbol, nil] Override the default name.
    # @param dynamic [Boolean] If true, make the signal dynamic. This means it receives all other signals without
    #   handlers. This cannot have a name override since it is nameless. The first parameter will be the name. Often
    #   it is useful to have the second parameter be `*args` and `raw_args` be true.
    # @param raw_args [Boolean] If true, does not convert arguments, but instead provides each argument as
    #   {Converters::RawValue} which is a raw payload wrapper, convertible with {Workflow.payload_converter}.
    # @param unfinished_policy [HandlerUnfinishedPolicy] How to treat unfinished handlers if they are still running
    #   when the workflow ends. The default warns, but this can be disabled.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#110
    def workflow_signal(name: T.unsafe(nil), dynamic: T.unsafe(nil), raw_args: T.unsafe(nil),
                        unfinished_policy: T.unsafe(nil))
    end

    # Mark the next method as a workflow update with a default name as the name of the method. Updates can return
    # values. Separate validation methods can be provided via {workflow_update_validator}.
    #
    # @param name [String, Symbol, nil] Override the default name.
    # @param dynamic [Boolean] If true, make the update dynamic. This means it receives all other updates without
    #   handlers. This cannot have a name override since it is nameless. The first parameter will be the name. Often
    #   it is useful to have the second parameter be `*args` and `raw_args` be true.
    # @param raw_args [Boolean] If true, does not convert arguments, but instead provides each argument as
    #   {Converters::RawValue} which is a raw payload wrapper, convertible with {Workflow.payload_converter}.
    # @param unfinished_policy [HandlerUnfinishedPolicy] How to treat unfinished handlers if they are still running
    #   when the workflow ends. The default warns, but this can be disabled.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#151
    def workflow_update(name: T.unsafe(nil), dynamic: T.unsafe(nil), raw_args: T.unsafe(nil),
                        unfinished_policy: T.unsafe(nil))
    end

    # Mark the next method as a workflow update validator to the given update method. The validator is expected to
    # have the exact same parameter signature. It will run before an update and if it raises an exception, the
    # update will be rejected, possibly before even reaching history. Validators cannot have any side effects or do
    # any waiting, and they do not return values.
    #
    # @param update_method [Symbol] Name of the update method.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#168
    def workflow_update_validator(update_method); end

    private

    # Returns the value of attribute pending_handler_details.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#174
    def pending_handler_details; end

    # source://temporalio//lib/temporalio/workflow/definition.rb#176
    def pending_handler_details=(value); end
  end
end

# Information about the workflow definition. This is usually not used directly.
#
# source://temporalio//lib/temporalio/workflow/definition.rb#395
class Temporalio::Workflow::Definition::Info
  # Create a definition info. This should usually not be used directly, but instead a class that extends
  # {Workflow::Definition} should be used.
  #
  # @return [Info] a new instance of Info
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#413
  def initialize(workflow_class:, override_name: T.unsafe(nil), dynamic: T.unsafe(nil), init: T.unsafe(nil),
                 raw_args: T.unsafe(nil), failure_exception_types: T.unsafe(nil), signals: T.unsafe(nil), queries: T.unsafe(nil), updates: T.unsafe(nil))
  end

  # Returns the value of attribute dynamic.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def dynamic; end

  # Returns the value of attribute failure_exception_types.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def failure_exception_types; end

  # Returns the value of attribute init.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def init; end

  # @return [String] Workflow name.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#436
  def name; end

  # Returns the value of attribute override_name.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def override_name; end

  # Returns the value of attribute queries.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def queries; end

  # Returns the value of attribute raw_args.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def raw_args; end

  # Returns the value of attribute signals.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def signals; end

  # Returns the value of attribute updates.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def updates; end

  # Returns the value of attribute workflow_class.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#396
  def workflow_class; end

  class << self
    # Derive the workflow definition info from the class.
    #
    # @param workflow_class [Class<Definition>] Workflow class.
    # @return [Info] Built info.
    #
    # source://temporalio//lib/temporalio/workflow/definition.rb#403
    def from_class(workflow_class); end
  end
end

# A query definition. This is usually built as a result of a {Definition.workflow_query} method, but can be
# manually created to set at runtime on {Workflow.query_handlers}.
#
# source://temporalio//lib/temporalio/workflow/definition.rb#481
class Temporalio::Workflow::Definition::Query
  # Create a query definition manually. See {Definition.workflow_query} for more details on some of the
  # parameters.
  #
  # @param name [String, nil] Name or nil if dynamic.
  # @param to_invoke [Symbol, Proc] Method name or proc to invoke.
  # @param raw_args [Boolean] Whether the parameters should be raw values.
  # @return [Query] a new instance of Query
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#502
  def initialize(name:, to_invoke:, raw_args: T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#482
  def name; end

  # Returns the value of attribute raw_args.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#482
  def raw_args; end

  # Returns the value of attribute to_invoke.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#482
  def to_invoke; end

  class << self
    # source://temporalio//lib/temporalio/workflow/definition.rb#485
    def _name_from_parameter(query); end
  end
end

# A signal definition. This is usually built as a result of a {Definition.workflow_signal} method, but can be
# manually created to set at runtime on {Workflow.signal_handlers}.
#
# source://temporalio//lib/temporalio/workflow/definition.rb#443
class Temporalio::Workflow::Definition::Signal
  # Create a signal definition manually. See {Definition.workflow_signal} for more details on some of the
  # parameters.
  #
  # @param name [String, nil] Name or nil if dynamic.
  # @param to_invoke [Symbol, Proc] Method name or proc to invoke.
  # @param raw_args [Boolean] Whether the parameters should be raw values.
  # @param unfinished_policy [HandlerUnfinishedPolicy] How the workflow reacts when this handler is still running
  #   on workflow completion.
  # @return [Signal] a new instance of Signal
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#466
  def initialize(name:, to_invoke:, raw_args: T.unsafe(nil), unfinished_policy: T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#444
  def name; end

  # Returns the value of attribute raw_args.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#444
  def raw_args; end

  # Returns the value of attribute to_invoke.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#444
  def to_invoke; end

  # Returns the value of attribute unfinished_policy.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#444
  def unfinished_policy; end

  class << self
    # source://temporalio//lib/temporalio/workflow/definition.rb#447
    def _name_from_parameter(signal); end
  end
end

# An update definition. This is usually built as a result of a {Definition.workflow_update} method, but can be
# manually created to set at runtime on {Workflow.update_handlers}.
#
# source://temporalio//lib/temporalio/workflow/definition.rb#515
class Temporalio::Workflow::Definition::Update
  # Create an update definition manually. See {Definition.workflow_update} for more details on some of the
  # parameters.
  #
  # @param name [String, nil] Name or nil if dynamic.
  # @param to_invoke [Symbol, Proc] Method name or proc to invoke.
  # @param raw_args [Boolean] Whether the parameters should be raw values.
  # @param unfinished_policy [HandlerUnfinishedPolicy] How the workflow reacts when this handler is still running
  #   on workflow completion.
  # @param validator_to_invoke [Symbol, Proc, nil] Method name or proc validator to invoke.
  # @return [Update] a new instance of Update
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#539
  def initialize(name:, to_invoke:, raw_args: T.unsafe(nil), unfinished_policy: T.unsafe(nil),
                 validator_to_invoke: T.unsafe(nil))
  end

  # source://temporalio//lib/temporalio/workflow/definition.rb#554
  def _with_validator_to_invoke(validator_to_invoke); end

  # Returns the value of attribute name.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#516
  def name; end

  # Returns the value of attribute raw_args.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#516
  def raw_args; end

  # Returns the value of attribute to_invoke.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#516
  def to_invoke; end

  # Returns the value of attribute unfinished_policy.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#516
  def unfinished_policy; end

  # Returns the value of attribute validator_to_invoke.
  #
  # source://temporalio//lib/temporalio/workflow/definition.rb#516
  def validator_to_invoke; end

  class << self
    # source://temporalio//lib/temporalio/workflow/definition.rb#519
    def _name_from_parameter(update); end
  end
end

# Handle for interacting with an external workflow.
#
# This is created via {Workflow.external_workflow_handle}, it is never instantiated directly.
#
# source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#10
class Temporalio::Workflow::ExternalWorkflowHandle
  # @raise [NotImplementedError]
  # @return [ExternalWorkflowHandle] a new instance of ExternalWorkflowHandle
  #
  # source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#12
  def initialize; end

  # Cancel the external workflow.
  #
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#36
  def cancel; end

  # @raise [NotImplementedError]
  # @return [String] ID for the workflow.
  #
  # source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#17
  def id; end

  # @raise [NotImplementedError]
  # @return [String, nil] Run ID for the workflow.
  #
  # source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#22
  def run_id; end

  # Signal the external workflow.
  #
  # @param signal [Workflow::Definition::Signal, Symbol, String] Signal definition or name.
  # @param args [Array<Object>] Signal args.
  # @param cancellation [Cancellation] Cancellation for canceling the signalling.
  # @raise [NotImplementedError]
  #
  # source://temporalio//lib/temporalio/workflow/external_workflow_handle.rb#31
  def signal(signal, *args, cancellation: T.unsafe(nil)); end
end

# Asynchronous future for use in workflows to do concurrent and background work. This can only be used inside
# workflows.
#
# source://temporalio//lib/temporalio/workflow/future.rb#9
class Temporalio::Workflow::Future
  # Create a new future. If created with a block, the block is started in the background and its success/raise is
  # the result of the future. If created without a block, the result or failure can be set on it.
  #
  # @return [Future] a new instance of Future
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#74
  def initialize(&); end

  # @return [Boolean] True if the future is done, false otherwise.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#91
  def done?; end

  # @return [Exception, nil] Failure if this future failed or nil if it didn't or hasn't yet completed.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#70
  def failure; end

  # Mark the future as done and set the failure. Does nothing if the future is already done. This cannot be invoked
  # if the future was constructed with a block.
  #
  # @param failure [Exception] The failure.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#121
  def failure=(failure); end

  # @return [Boolean] True if done and failed, false if still running or succeeded.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#113
  def failure?; end

  # @return [Object, nil] Result if the future is done or nil if it is not. This will return nil if the result is
  #   nil too. Users can use {done?} to differentiate the situations.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#67
  def result; end

  # Mark the future as done and set the result. Does nothing if the future is already done. This cannot be invoked
  # if the future was constructed with a block.
  #
  # @param result [Object] The result, which can be nil.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#104
  def result=(result); end

  # @return [Boolean] True if done and not a failure, false if still running or failed.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#96
  def result?; end

  # Wait on the future to complete. This will return the success or raise the failure. To not raise, use
  # {wait_no_raise}.
  #
  # @raise [Exception] Failure if occurred.
  # @return [Object] Result on success.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#135
  def wait; end

  # Wait on the future to complete. This will return the success or nil if it failed, this will not raise.
  #
  # @return [Object, nil] Result on success or nil on failure.
  #
  # source://temporalio//lib/temporalio/workflow/future.rb#145
  def wait_no_raise; end

  class << self
    # Return a future that completes when all of the given futures complete or any future fails. The returned future
    # will return nil on success or raise an exception if any of the futures failed. This means if any future fails,
    # this will not wait for the other futures to complete. To wait for all futures to complete no matter what, see
    # {try_all_of}.
    #
    # @param futures [Array<Future<Object>>] Futures to wait for all to complete (or first to fail).
    # @return [Future<nil>] Future that completes successfully with nil when all futures complete, or raises on first
    #   future failure.
    #
    # source://temporalio//lib/temporalio/workflow/future.rb#32
    def all_of(*futures); end

    # Return a future that completes when any of the given futures complete. The returned future will return the first
    # completed futures value or raise the first completed futures exception. To not raise the exception, see
    # {try_any_of}.
    #
    # @param futures [Array<Future<Object>>] Futures to wait for the first to complete.
    # @return [Future<Object>] Future that relays the first completed future's result/failure.
    #
    # source://temporalio//lib/temporalio/workflow/future.rb#16
    def any_of(*futures); end

    # Return a future that completes when all of the given futures complete regardless of success/fail. The returned
    # future will return nil when all futures are complete.
    #
    # @param futures [Array<Future<Object>>] Futures to wait for all to complete (regardless of success/fail).
    # @return [Future<nil>] Future that completes successfully with nil when all futures complete.
    #
    # source://temporalio//lib/temporalio/workflow/future.rb#58
    def try_all_of(*futures); end

    # Return a future that completes when the first future completes. The result of the future is the future from the
    # list that completed first. The future returned will never raise even if the first completed future fails.
    #
    # @param futures [Array<Future<Object>>] Futures to wait for the first to complete.
    # @return [Future<Future<Object>>] Future with the first completing future regardless of success/fail.
    #
    # source://temporalio//lib/temporalio/workflow/future.rb#46
    def try_any_of(*futures); end
  end
end

# Actions taken if a workflow completes with running handlers.
#
# source://temporalio//lib/temporalio/workflow/handler_unfinished_policy.rb#6
module Temporalio::Workflow::HandlerUnfinishedPolicy; end

# Abandon the handler with no warning.
#
# source://temporalio//lib/temporalio/workflow/handler_unfinished_policy.rb#10
Temporalio::Workflow::HandlerUnfinishedPolicy::ABANDON = T.let(T.unsafe(nil), Integer)

# Issue a warning in addition to abandoning.
#
# source://temporalio//lib/temporalio/workflow/handler_unfinished_policy.rb#8
Temporalio::Workflow::HandlerUnfinishedPolicy::WARN_AND_ABANDON = T.let(T.unsafe(nil), Integer)

# Information about the running workflow. This is immutable for the life of the workflow run.
#
# @note WARNING: This class may have required parameters added to its constructor. Users should not instantiate this
#   class or it may break in incompatible ways.
#
# source://temporalio//lib/temporalio/workflow/info.rb#5
class Temporalio::Workflow::Info < Struct
  # @return [Integer] Current workflow attempt.
  def attempt; end

  # @return [Integer] Current workflow attempt.
  def attempt=(_); end

  # @return [String, nil] Run ID if this was continued.
  def continued_run_id; end

  # @return [String, nil] Run ID if this was continued.
  def continued_run_id=(_); end

  # @return [String, nil] Cron schedule if applicable.
  def cron_schedule; end

  # @return [String, nil] Cron schedule if applicable.
  def cron_schedule=(_); end

  # @return [Float, nil] Execution timeout for the workflow.
  def execution_timeout; end

  # @return [Float, nil] Execution timeout for the workflow.
  def execution_timeout=(_); end

  # @return [Exception, nil] Failure if this workflow run is a continuation of a failure.
  def last_failure; end

  # @return [Exception, nil] Failure if this workflow run is a continuation of a failure.
  def last_failure=(_); end

  # @return [Object, nil] Successful result if this workflow is a continuation of a success.
  def last_result; end

  # @return [Object, nil] Successful result if this workflow is a continuation of a success.
  def last_result=(_); end

  # @return [String] Namespace for the workflow.
  def namespace; end

  # @return [String] Namespace for the workflow.
  def namespace=(_); end

  # @return [ParentInfo, nil] Parent information for the workflow if this is a child.
  def parent; end

  # @return [ParentInfo, nil] Parent information for the workflow if this is a child.
  def parent=(_); end

  # @return [RetryPolicy, nil] Retry policy for the workflow.
  def retry_policy; end

  # @return [RetryPolicy, nil] Retry policy for the workflow.
  def retry_policy=(_); end

  # @return [String] Run ID for the workflow.
  def run_id; end

  # @return [String] Run ID for the workflow.
  def run_id=(_); end

  # @return [Float, nil] Run timeout for the workflow.
  def run_timeout; end

  # @return [Float, nil] Run timeout for the workflow.
  def run_timeout=(_); end

  # @return [Time] Time when the workflow started.
  def start_time; end

  # @return [Time] Time when the workflow started.
  def start_time=(_); end

  # @return [String] Task queue for the workflow.
  def task_queue; end

  # @return [String] Task queue for the workflow.
  def task_queue=(_); end

  # @return [Float] Task timeout for the workflow.
  def task_timeout; end

  # @return [Float] Task timeout for the workflow.
  def task_timeout=(_); end

  # @return [String] ID for the workflow.
  def workflow_id; end

  # @return [String] ID for the workflow.
  def workflow_id=(_); end

  # @return [String] Workflow type name.
  def workflow_type; end

  # @return [String] Workflow type name.
  def workflow_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Information about a parent of a workflow.
#
# @note WARNING: This class may have required parameters added to its constructor. Users should not instantiate
#   this class or it may break in incompatible ways.
#
# source://temporalio//lib/temporalio/workflow/info.rb#74
class Temporalio::Workflow::Info::ParentInfo < Struct
  # @return [String] Namespace for the parent.
  def namespace; end

  # @return [String] Namespace for the parent.
  def namespace=(_); end

  # @return [String] Run ID for the parent.
  def run_id; end

  # @return [String] Run ID for the parent.
  def run_id=(_); end

  # @return [String] Workflow ID for the parent.
  def workflow_id; end

  # @return [String] Workflow ID for the parent.
  def workflow_id=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Error raised when a workflow does something with a side effect in an improper context. In `initialize`, query
# handlers, and update validators, a workflow cannot do anything that would generate a command (e.g. starting an
# activity) or anything that could wait (e.g. scheduling a fiber, running a future, or using a wait condition).
#
# source://temporalio//lib/temporalio/workflow.rb#515
class Temporalio::Workflow::InvalidWorkflowStateError < Temporalio::Error; end

# Error raised when a workflow does something potentially non-deterministic such as making an illegal call. Note,
# non-deterministic errors during replay do not raise an error that can be caught, those happen internally. But this
# error can still be used with configuring workflow failure exception types to change non-deterministic errors from
# task failures to workflow failures.
#
# source://temporalio//lib/temporalio/workflow.rb#521
class Temporalio::Workflow::NondeterminismError < Temporalio::Error; end

# How a child workflow should be handled when the parent closes.
#
# source://temporalio//lib/temporalio/workflow/parent_close_policy.rb#8
module Temporalio::Workflow::ParentClosePolicy; end

# The child workflow will do nothing.
#
# source://temporalio//lib/temporalio/workflow/parent_close_policy.rb#14
Temporalio::Workflow::ParentClosePolicy::ABANDON = T.let(T.unsafe(nil), Integer)

# Cancellation will be requested of the child workflow.
#
# source://temporalio//lib/temporalio/workflow/parent_close_policy.rb#16
Temporalio::Workflow::ParentClosePolicy::REQUEST_CANCEL = T.let(T.unsafe(nil), Integer)

# The child workflow will also terminate.
#
# source://temporalio//lib/temporalio/workflow/parent_close_policy.rb#12
Temporalio::Workflow::ParentClosePolicy::TERMINATE = T.let(T.unsafe(nil), Integer)

# Unset.
#
# source://temporalio//lib/temporalio/workflow/parent_close_policy.rb#10
Temporalio::Workflow::ParentClosePolicy::UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# Unsafe module contains only-in-workflow methods that are considered unsafe. These should not be used unless the
# consequences are understood.
#
# source://temporalio//lib/temporalio/workflow.rb#446
module Temporalio::Workflow::Unsafe
  class << self
    # Run a block of code with illegal call tracing disabled. Users should be cautious about using this as it can
    # often signify unsafe code.
    #
    # @return [Object] Result of the block.
    # @yield Block to run with call tracing disabled
    #
    # source://temporalio//lib/temporalio/workflow.rb#458
    def illegal_call_tracing_disabled(&); end

    # @return [Boolean] True if the workflow is replaying, false otherwise. Most code should not check this value.
    #
    # source://temporalio//lib/temporalio/workflow.rb#448
    def replaying?; end
  end
end

# Information about a workflow update
#
# @note WARNING: This class may have required parameters added to its constructor. Users should not instantiate this
#   class or it may break in incompatible ways.
#
# source://temporalio//lib/temporalio/workflow/update_info.rb#14
class Temporalio::Workflow::UpdateInfo < Struct
  # @return [String] Update ID.
  def id; end

  # @return [String] Update ID.
  def id=(_); end

  # @return [String] Update name.
  def name; end

  # @return [String] Update name.
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Representation of a workflow's history.
#
# source://temporalio//lib/temporalio/workflow_history.rb#5
class Temporalio::WorkflowHistory
  # @return [WorkflowHistory] a new instance of WorkflowHistory
  #
  # source://temporalio//lib/temporalio/workflow_history.rb#10
  def initialize(events); end

  # History events for the workflow.
  #
  # source://temporalio//lib/temporalio/workflow_history.rb#7
  def events; end

  # @return [String] ID of the workflow, extracted from the first event.
  #
  # source://temporalio//lib/temporalio/workflow_history.rb#15
  def workflow_id; end
end

# How already-running workflows of the same ID are handled on start.
#
# @see https://docs.temporal.io/workflows#workflow-id-conflict-policy
#
# source://temporalio//lib/temporalio/common_enums.rb#31
module Temporalio::WorkflowIDConflictPolicy; end

# Don't start a new workflow, instead fail with already-started error.
#
# source://temporalio//lib/temporalio/common_enums.rb#35
Temporalio::WorkflowIDConflictPolicy::FAIL = T.let(T.unsafe(nil), Integer)

# Terminate the running workflow before starting a new one.
#
# source://temporalio//lib/temporalio/common_enums.rb#39
Temporalio::WorkflowIDConflictPolicy::TERMINATE_EXISTING = T.let(T.unsafe(nil), Integer)

# Unset.
#
# source://temporalio//lib/temporalio/common_enums.rb#33
Temporalio::WorkflowIDConflictPolicy::UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# Don't start a new workflow, instead return a workflow handle for the running workflow.
#
# source://temporalio//lib/temporalio/common_enums.rb#37
Temporalio::WorkflowIDConflictPolicy::USE_EXISTING = T.let(T.unsafe(nil), Integer)

# How already-in-use workflow IDs are handled on start.
#
# @see https://docs.temporal.io/workflows#workflow-id-reuse-policy
#
# source://temporalio//lib/temporalio/common_enums.rb#9
module Temporalio::WorkflowIDReusePolicy; end

# Allow starting a workflow execution using the same workflow ID.
#
# source://temporalio//lib/temporalio/common_enums.rb#11
Temporalio::WorkflowIDReusePolicy::ALLOW_DUPLICATE = T.let(T.unsafe(nil), Integer)

# Allow starting a workflow execution using the same workflow ID, only when the last execution's final state is one
# of terminated, canceled, timed out, or failed.
#
# source://temporalio//lib/temporalio/common_enums.rb#14
Temporalio::WorkflowIDReusePolicy::ALLOW_DUPLICATE_FAILED_ONLY = T.let(T.unsafe(nil), Integer)

# Do not permit re-use of the workflow ID for this workflow. Future start workflow requests could potentially change
# the policy, allowing re-use of the workflow ID.
#
# source://temporalio//lib/temporalio/common_enums.rb#18
Temporalio::WorkflowIDReusePolicy::REJECT_DUPLICATE = T.let(T.unsafe(nil), Integer)

# This option is {WorkflowIDConflictPolicy::TERMINATE_EXISTING} but is here for backwards compatibility. If
# specified, it acts like {ALLOW_DUPLICATE}, but also the {WorkflowIDConflictPolicy} on the request is treated as
# {WorkflowIDConflictPolicy::TERMINATE_EXISTING}. If no running workflow, then the behavior is the same as
# {ALLOW_DUPLICATE}.
#
# @deprecated Use {WorkflowIDConflictPolicy::TERMINATE_EXISTING} instead.
#
# source://temporalio//lib/temporalio/common_enums.rb#25
Temporalio::WorkflowIDReusePolicy::TERMINATE_IF_RUNNING = T.let(T.unsafe(nil), Integer)
